{"file_contents":{"README.md":{"content":"FPL Chip Strategy Architect\n===========================\n\nPersonalized Fantasy Premier League (FPL) chip timing and transfer planning based on your actual squad and upcoming fixtures. Live data from the official FPL API, clear recommendations in the UI, and a simple REST API under the hood.\n\nQuickstart\n- Install: `npm install`\n- Dev (HMR): `npm run dev` (or `npm run dev:open` on Windows to auto-open)\n- Build: `npm run build`\n- Start: `npm start` (or `npm run start:open` on Windows to auto-open)\n\nAPI\n- GET `/api/health` – health check\n- POST `/api/analyze` – body `{ teamId: string }`\n- POST `/api/transfer-plan` – body `{ teamId: string, chipType?, targetGameweek?, maxHits?, includeRiskyMoves? }`\n\nScripts\n- `dev`, `start` are cross‑platform via `cross-env`\n- Windows helpers: `dev:open`, `start:open` (PowerShell scripts under `scripts/`)\n\nCI\nGitHub Actions workflow runs type‑check and build on Node 20.\n\nLicense\nMIT\n\n","size_bytes":936},"design_guidelines.md":{"content":"# FPL Chip Strategy Architect - Design Guidelines\n\n## Design Approach: Reference-Based (Productivity Tools)\nInspired by modern data analysis platforms like Linear, Notion, and fantasy sports tools. Clean, professional interface that prioritizes data clarity and actionable insights.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors:**\n- Dark: 220 15% 12% (deep navy background)\n- Light: 220 15% 98% (off-white background)\n\n**Accent Colors:**\n- Success Green: 142 76% 36% (for positive recommendations)\n- Warning Orange: 25 95% 53% (for caution/moderate difficulty)\n- Danger Red: 0 84% 60% (for high difficulty periods)\n- FPL Purple: 280 100% 70% (brand accent for key CTAs)\n\n**Text Colors:**\n- Primary: 220 9% 46% (medium gray for body text)\n- Secondary: 220 9% 65% (lighter gray for supporting text)\n- Headers: 220 15% 20% (dark for strong hierarchy)\n\n### Typography\n- **Primary Font:** Inter (via Google Fonts)\n- **Headers:** 600-700 weight, clean hierarchy (text-2xl to text-5xl)\n- **Body:** 400 weight, excellent readability (text-sm to text-lg)\n- **Data/Numbers:** 500 weight for emphasis on key metrics\n\n### Layout System\n**Spacing Primitives:** Tailwind units of 2, 4, 6, 8, 12, 16\n- Tight spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px) \n- Section spacing: p-8, m-8 (32px)\n- Large spacing: p-12, m-12 (48px)\n\n### Component Library\n\n**Navigation:**\n- Clean top navigation with FPL branding\n- Minimal navigation items focusing on core functionality\n- Search/input for Team ID prominently placed\n\n**Data Displays:**\n- Card-based layout for chip recommendations\n- Fixture difficulty tables with color-coded FDR ratings\n- Progress indicators for gameweek analysis\n- Badge components for chip types (Wildcard, Bench Boost, etc.)\n\n**Forms:**\n- Single prominent input for FPL Team ID\n- Validation states with clear error messaging\n- Loading states during API calls\n\n**Key Features:**\n- Gameweek timeline visualization\n- Recommendation cards with clear action items\n- Collapsible sections for detailed analysis\n- Responsive grid layout for mobile optimization\n\n**Visual Hierarchy:**\n- Bold headers for each chip strategy section\n- Color-coded difficulty ratings throughout\n- Clear separation between analysis and recommendations\n- Strategic use of whitespace for scan-ability\n\n**Interaction Design:**\n- Hover states on interactive elements\n- Smooth transitions between loading and loaded states\n- Clear focus states for accessibility\n- Minimal animations to maintain professional feel\n\nThis design emphasizes clarity, data presentation, and actionable insights while maintaining the professional aesthetic expected in fantasy sports analysis tools.","size_bytes":2671},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Infinitely Powerful FPL Chip Strategy Architect\n\nAI-powered FPL strategy optimization combining bookmaker odds, advanced statistics, Monte Carlo simulations, machine learning predictions, competitive intelligence, and natural language processing. Features an intelligent AI co-pilot that understands FPL terminology and provides conversational strategic guidance.\n\n## Quickstart\n\n- Prerequisites: Node.js 20+\n- Install: `npm install`\n- Dev (API + Client on the same port): `npm run dev`\n- Type-check: `npm run check`\n- Build (client + bundled server): `npm run build`\n- Start production server: `npm start`\n\nDefault port is `5000` (configurable via `PORT`).\n\n## Environment\n\n- `PORT` (optional): HTTP port. Defaults to `5000`.\n- `DATABASE_URL` (optional): Only required if using Drizzle Kit migrations (not required for runtime).\n- `OPENROUTER_API_KEY` (optional): Required for enhanced LLM responses via OpenRouter's Qwen3 Coder model. System gracefully falls back to static responses if not configured.\n\n## API Reference\n\nBase URL is the same as the client (the Express server serves both).\n\n- GET `/api/health`\n  - Returns `{ status: \"ok\", timestamp }`.\n\n- POST `/api/analyze`\n  - Body: `{ teamId: string }` (numeric string)\n  - Response: `AnalyzeTeamResponse` with:\n    - `players`: processed 15-man squad\n    - `gameweeks`: squad FDR timeline (next ~10 GWs)\n    - `recommendations`: chip suggestions (wildcard, bench-boost, triple-captain, free-hit)\n    - `budget`: bank, team value, free transfers, affordable upgrades\n  - Example:\n    ```bash\n    curl -s http://localhost:5000/api/analyze \\\n      -H 'content-type: application/json' \\\n      -d '{\"teamId\":\"1234567\"}'\n    ```\n\n- POST `/api/transfer-plan`\n  - Body: `{ teamId: string, chipType?: 'wildcard'|'bench-boost'|'triple-captain'|'free-hit', targetGameweek?: number, maxHits?: number, includeRiskyMoves?: boolean }`\n  - Response: `PlanTransfersResponse` with up to 3 plans (conservative, aggressive, chip-optimized)\n  - Example:\n    ```bash\n    curl -s http://localhost:5000/api/transfer-plan \\\n      -H 'content-type: application/json' \\\n      -d '{\"teamId\":\"1234567\", \"chipType\":\"triple-captain\", \"maxHits\":1}'\n    ```\n\n- POST `/api/cache/clear`\n  - Clears in-memory FPL API cache. Useful during development.\n\n- POST `/api/chat`\n  - Body: `{ message: string, sessionId?: string, teamId?: string, userId?: string }`\n  - Response: `AICopilotResponse` with:\n    - `message`: AI-generated response to user query\n    - `insights`: structured AI insights and recommendations\n    - `suggestions`: actionable suggestions\n    - `followUpQuestions`: contextual follow-up questions\n    - `conversationContext`: query intent, response time, model version\n    - `sessionId`: conversation session identifier\n  - Example:\n    ```bash\n    curl -s http://localhost:5000/api/chat \\\n      -H 'content-type: application/json' \\\n      -d '{\"message\":\"When should I use my wildcard?\", \"teamId\":\"1234567\"}'\n    ```\n\n## Caching\n\n- FPL API responses: 5 minutes (in-memory, per-URL key).\n- Analysis results: 15 minutes per team (`/api/analyze` checks and returns cached result if still fresh).\n- AI conversation sessions: 30 minutes in-memory with automatic cleanup.\n- ML predictions and competitive intelligence: Various cache durations based on data freshness requirements.\n\n## Repository Layout\n\n- `server/`\n  - `index.ts`: Express setup, Vite dev middleware/static serving, error handling.\n  - `routes.ts`: REST endpoints (health, analyze, transfer-plan, cache/clear, chat).\n  - `services/fplApi.ts`: Official FPL API wrapper with caching and helpers.\n  - `services/analysisEngine.ts`: Enhanced with Phase 1 simulations, Phase 2 ML, and Phase 3 AI integration.\n  - `services/transferEngine.ts`: Generates transfer plans (conservative, aggressive, chip-optimized).\n  - `services/oddsService.ts`: Phase 1 - Bookmaker odds integration for realistic predictions.\n  - `services/statsService.ts`: Phase 1 - Advanced player statistics and performance metrics.\n  - `services/mlPredictionEngine.ts`: Phase 2 - Machine learning models for player predictions.\n  - `services/competitiveIntelligenceEngine.ts`: Phase 2 - Rival analysis and strategic insights.\n  - `services/naturalLanguageProcessor.ts`: Phase 3 - NLP for FPL query understanding.\n  - `services/aiCopilotService.ts`: Phase 3 - Conversational AI with FPL domain expertise.\n  - `services/openRouterService.ts`: Phase 3+ - LLM integration using OpenRouter's Qwen3 Coder model.\n  - `storage.ts`: In-memory caches for analysis and FPL objects.\n  - `vite.ts`: Dev HMR and production file serving.\n- `client/`\n  - React app with tabbed interface: Analysis & Recommendations, AI Co-pilot, Transfer Planner.\n  - `components/ChatInterface.tsx`: Phase 3 - Conversational AI chat interface.\n  - `components/AIInsights.tsx`: Phase 3 - AI-generated insights and recommendations display.\n  - `components/SimulationSummary.tsx`: Phase 1 - Monte Carlo simulation results.\n  - Tailwind theming via CSS variables; shadcn-style UI primitives.\n- `shared/`\n  - TypeScript models and Zod schemas for requests/responses and FPL data.\n  - Enhanced schemas for AI conversations, ML predictions, and simulation data.\n\n## Frontend UX\n\n1. Enter your Team ID on the home page.\n2. The app calls `/api/analyze` and displays results in a tabbed interface:\n\n**Analysis & Recommendations Tab:**\n   - Enhanced simulation summary with Monte Carlo confidence intervals\n   - Squad overview with ML-enhanced expected points\n   - Fixture Difficulty chart with volatility indicators\n   - AI-powered chip recommendation cards with success probabilities\n\n**AI Co-pilot Tab:**\n   - Conversational chat interface with FPL terminology understanding\n   - LLM-powered intelligent responses via OpenRouter's Qwen3 Coder model\n   - Context-aware responses based on your squad and analysis\n   - Structured AI insights with reasoning and action items\n   - Follow-up questions to guide strategic discussions\n   - Session persistence for continuous conversations\n   - Graceful fallback to static responses when LLM unavailable\n\n**Transfer Planner Tab:**\n   - Budget analysis and transfer planning tools\n   - Multiple plan options (conservative, aggressive, chip-optimized)\n   - Integration with competitive intelligence insights\n\n## Development Notes\n\n- TypeScript strict mode across client/server. Aliases `@` and `@shared` are configured in Vite/tsconfig.\n- Logging: concise API logs for `/api/*` with response status + timing.\n- No database required at runtime. `drizzle.config.ts` only matters if you add persistence later.\n- Hybrid intelligence architecture combining statistical simulations, ML predictions, and conversational AI.\n- Provider pattern for data services with mock/real implementations for development flexibility.\n- In-memory session management for AI conversations with automatic cleanup.\n- LLM integration with OpenRouter using Qwen3 Coder model for enhanced conversational responses.\n- Graceful fallback system ensuring functionality even when LLM services are unavailable.\n\n## Implementation Status\n\n### Phase 1: Enhanced Probabilistic Analysis ✅ COMPLETED\n- ✅ Bookmaker odds integration for realistic player predictions\n- ✅ Advanced statistics (xG, xA, form, volatility) from multiple providers\n- ✅ Monte Carlo simulations with confidence intervals and success probabilities\n- ✅ Enhanced chip recommendations with simulation-backed confidence scores\n- ✅ Fixture difficulty analysis with volatility indicators\n\n### Phase 2: Machine Learning & Competitive Intelligence ✅ COMPLETED  \n- ✅ ML prediction engine with player performance forecasting\n- ✅ Competitive intelligence engine for rival analysis and market insights\n- ✅ Historical data analysis and pattern recognition\n- ✅ Strategic recommendations combining statistical and ML approaches\n- ✅ Enhanced expected points calculations with multiple data sources\n\n### Phase 3: AI Co-pilot & Natural Language Processing ✅ COMPLETED\n- ✅ Natural language processor with FPL terminology understanding\n- ✅ Conversational AI co-pilot with domain expertise\n- ✅ Intent recognition and entity extraction for FPL queries\n- ✅ Context-aware conversation management with session persistence\n- ✅ Structured AI insights with reasoning and actionable recommendations\n- ✅ Chat interface with message history and follow-up suggestions\n\n### Phase 3+: LLM Integration & Enhanced Intelligence ✅ COMPLETED\n- ✅ OpenRouter integration with Qwen3 Coder model for intelligent responses\n- ✅ Hybrid response system: LLM-enhanced with graceful fallback to static responses\n- ✅ Rich context assembly: passes squad data, analysis results, and conversation history to LLM\n- ✅ Dynamic suggestion and follow-up question generation based on user intent\n- ✅ Robust error handling and credit/quota management for LLM services\n- ✅ Enhanced conversational capabilities with deep FPL domain understanding\n\n## Next Development Priorities\n\n### Phase 4: Advanced Optimization & Personalization\n- **Personalized Strategy Profiles**: Learn user preferences and risk tolerance\n- **Advanced Transfer Optimization**: Multi-gameweek transfer planning with chip coordination\n- **Real-time Market Intelligence**: Player price change predictions and ownership trends\n- **Custom Metrics Dashboard**: User-defined KPIs and performance tracking\n\n### Phase 5: Community & Social Features\n- **League Analysis**: Head-to-head comparison and competitive positioning\n- **Social Insights**: Community trends and popular strategies\n- **Performance Analytics**: Historical performance tracking and improvement suggestions\n- **Strategy Sharing**: Export and share analysis reports\n\n### Technical Improvements\n- **Free Hit Optimization**: Implement single-gameweek team optimization algorithms\n- **Enhanced ML Models**: Incorporate weather, referee, and venue data\n- **Performance Optimization**: Caching strategies and response time improvements\n- **Mobile Responsiveness**: Enhanced mobile experience and PWA features\n\n### Quality & Reliability\n- **Comprehensive Testing**: Unit, integration, and E2E test coverage\n- **Error Handling**: Robust error recovery and user feedback\n- **Documentation**: API documentation and user guides\n- **Monitoring**: Performance metrics and usage analytics\n\nIf you’re running on Replit, this repo is configured to serve both API and client on the same port for a smooth DX.\n","size_bytes":10412},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/The Infinitely Powerful FPL Chip Strategy Architect_1757776875114.md":{"content":"\n\n# **The Infinitely Powerful FPL Chip Strategy Architect: A Blueprint for Next-Generation FPL Tooling**\n\n## **Phase 1: The Sentient Strategist — Evolving the Core Intelligence**\n\nThe first leap towards ultimate power involves fundamentally upgrading the tool's analytical engine. The goal is to move from simple fixture-based heuristics to a sophisticated, multi-layered risk and opportunity assessment. This new engine will be built by tasking an AI coding assistant to integrate and synthesize data from diverse, high-fidelity sources.\n\n### **1.1 Hyper-Contextual Fixture Analysis**\n\nThe current model's reliance on the official Fixture Difficulty Rating (FDR) is a significant limitation. To become truly powerful, the Architect must build its own dynamic model of team strength by integrating superior predictive data.\n\n* **Bookmaker Odds Integration:** The betting markets are the most accurate public predictors of football outcomes. The Architect will be instructed to integrate with a live odds API to replace static FDR with real-time probabilities for key FPL events. This includes:  \n  * **Clean Sheet Odds:** A direct, market-driven measure of a defense's strength in a specific match.  \n  * **Anytime Goalscorer Odds:** A precise probability of a player's attacking potential.  \n  * **Team Goal Expectancy:** Odds for a team to score over/under a certain number of goals.  \n* **Advanced Statistical Modeling:** The tool will incorporate team-level advanced statistics from sources like Understat and FBref, such as Expected Goals (xG), Expected Goals Conceded (xGC), and metrics for pressing intensity. A fixture that looks easy on paper (low FDR) might be revealed as a trap if the opponent has a strong underlying xGC, an insight the Architect will now capture.\n\n### **1.2 Deep Player Profiling: The \"Player DNA\"**\n\nA truly powerful tool must understand that not all players are the same. It needs to quantify a player's unique performance profile beyond simple averages.\n\n* **Quantifying Volatility and Explosiveness:** The Architect will analyze a player's entire FPL history to calculate their **standard deviation of points**. This metric of volatility identifies two key player archetypes:  \n  * **Consistent Performers (Low Volatility):** Reliable for protecting rank.  \n  * **Explosive Mavericks (High Volatility):** Capable of massive, rank-changing hauls, making them ideal for chasing rivals.1\n\n    This allows for nuanced chip recommendations, such as suggesting a Bench Boost with high-volatility players to maximize the potential points ceiling.  \n* **Performance Across All Competitions:** To get a complete picture of form and fatigue, the tool will be tasked with integrating player performance data from all competitions, including domestic cups and European tournaments, and linking it back to FPL player IDs.\n\n### **1.3 The Foresight Engine: Probabilistic Simulation**\n\nThe most significant upgrade to the core engine is a shift from deterministic suggestions to probabilistic forecasting. Using **Monte Carlo simulations**, the Architect can model the full range of potential outcomes for any chip strategy.1 When a user requests an analysis, the tool will run thousands of simulations based on each player's historical point distribution.\n\nThe output becomes a comprehensive risk assessment, not just a simple recommendation: *\"Deploying your Bench Boost in Gameweek 15 has a 70% probability of scoring over 85 points. The most likely outcome is 92 points, with a 10% chance of exceeding 120 points.\"* This empowers the manager to make decisions that align perfectly with their personal risk tolerance.\n\n## **Phase 2: The Omniscient Oracle — Expanding the Strategic Horizon**\n\nWith a hyper-intelligent core engine, the next phase is to make the Architect aware of the entire FPL game state, transforming it from a team analyzer into a league-dominating oracle.\n\n### **2.1 Predictive Points Modeling**\n\nThe ultimate goal of FPL analytics is to accurately forecast future points. The Architect will integrate a state-of-the-art, open-source machine learning model like **OpenFPL**. This model uses an ensemble of XGBoost and Random Forest regressors, trained on public FPL and Understat data, to achieve prediction accuracy comparable to leading commercial services. An AI coding assistant can be tasked with implementing the inference code for this model, allowing the Architect to base its chip recommendations on robust, forward-looking point projections.\n\n### **2.2 Game Theory and Mini-League Dominance**\n\nFPL is a game played against other people. An infinitely powerful tool must understand this dynamic.\n\n* **Rival Analysis Engine:** The user will provide their mini-league ID. The Architect will then use the FPL API to pull the current squads of every rival manager in that league.  \n* **Effective Ownership (EO) Integration:** The tool will calculate the live Effective Ownership for key players *within the context of that specific mini-league*. Chip strategies will then be framed with game theory at their core. For example: *\"Using your Triple Captain on Haaland has a high floor, as his EO in your league is 180%. However, captaining Saka is a powerful differential move that offers a higher rank ceiling if he outscores Haaland.\"*\n\n### **2.3 Dynamic Event Monitoring**\n\nThe FPL landscape is constantly changing. The Architect must be able to react in real-time.\n\n* **Live Event Integration:** The tool will be built to connect to APIs providing live player injury news, suspension updates, and press conference summaries. A critical injury to a highly-owned player would automatically trigger a complete re-evaluation of all chip strategies for the user's squad.  \n* **Price Change Prediction:** By incorporating a price change prediction model, the Architect can advise on the financial implications of a Wildcard. Activating a Wildcard early in the week to capture rising player values can provide a long-term budget advantage.\n\n## **Phase 3: The Explainable AI (XAI) Co-Pilot — The GPT-5 Synergy**\n\nThis is the final and most transformative phase, leveraging the unique capabilities of being developed by an AI partner. The tool evolves from a data processor into a conversational, explainable strategic co-pilot.\n\n### **3.1 Natural Language Strategy Generation**\n\nThe tool's output will transcend tables and charts. GPT-5 Codex will be tasked with synthesizing all the complex, multi-source data points into a coherent, human-readable strategic narrative.\n\n* **Example Output:** *\"The optimal time for your Bench Boost appears to be Gameweek 8\\. Your bench players have favorable fixtures with a collective clean sheet probability of 45% according to bookmaker odds. However, your main rival also has a strong bench that week. A higher-variance play would be to wait for Gameweek 12, where your bench has tougher fixtures but contains two 'explosive' players (volatility \\> 8.5) who could deliver a massive haul and help you close the 30-point gap.\"*\n\n### **3.2 Interactive \"What-If\" Dialogue**\n\nThe user experience will become a conversation. Instead of just inputting a team ID, the manager can engage in a strategic dialogue with the Architect.\n\n* **User:** \"What if I wildcard in GW8 to bring in three Arsenal players?\"  \n* **Architect:** \"An interesting move. Simulating this scenario, a Wildcard in GW8 to acquire Saka, Saliba, and Jesus increases your projected points over the next five gameweeks by an estimated 12.5. However, this would leave you exposed to a favorable fixture swing for Spurs in GW10, where your rival is heavily invested with an EO of 150% on Son. Are you willing to accept this short-term risk for the long-term gain?\"\n\n### **3.3 Explainable AI (XAI) for Ultimate Trust**\n\nTo be truly powerful, the tool must be transparent. Every recommendation will be accompanied by a clear, data-backed justification generated by the AI, building user trust and turning a black box into a crystal-clear advisor.2\n\n* **Example Explanation:** *\"We recommend a Triple Captain on Haaland in GW6 **because**: 1\\) His anytime goalscorer odds are 65%. 2\\) He is facing a defense ranked in the bottom 5 for xGC. 3\\) His EO in your mini-league is only 120%, providing a significant rank-climbing opportunity against the template.\"*\n\nThis three-phase evolution creates a tool that is not just an analyzer but an intelligent, omniscient, and interactive FPL partner, representing the absolute pinnacle of what is possible in FPL decision support.\n\n#### **Works cited**\n\n1. USING DATA TO WIN IN FANTASY FOOTBALL \\- Frontier Economics, accessed September 13, 2025, [https://www.frontier-economics.com/media/nugbxnui/using-data-to-win-in-fantasy-footabll.pdf](https://www.frontier-economics.com/media/nugbxnui/using-data-to-win-in-fantasy-footabll.pdf)  \n2. How AI is Changing the Game: Sports Analytics and Performance ..., accessed September 13, 2025, [https://webmobtech.com/blog/ai-sports-analytics-performance/](https://webmobtech.com/blog/ai-sports-analytics-performance/)  \n3. How AI and Sports Analytics are Teaming Up to Transform the Sports Industry \\- GMU CEHD, accessed September 13, 2025, [https://cehd.gmu.edu/features/2025/08/25/how-ai-and-sports-analytics-are-teaming-up-to-transform-the-sports-industry/](https://cehd.gmu.edu/features/2025/08/25/how-ai-and-sports-analytics-are-teaming-up-to-transform-the-sports-industry/)  \n4. AI in Sports: Applications and Use Cases \\- Appinventiv, accessed September 13, 2025, [https://appinventiv.com/blog/ai-in-sports/](https://appinventiv.com/blog/ai-in-sports/)  \n5. AI Sports Analytics: Enhancing Player Performance | Tribe AI, accessed September 13, 2025, [https://www.tribe.ai/applied-ai/ai-driven-sports-analytics](https://www.tribe.ai/applied-ai/ai-driven-sports-analytics)","size_bytes":9802},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2045},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  analyzeTeamRequestSchema, \n  planTransfersRequestSchema,\n  chatRequestSchema,\n  type AnalyzeTeamResponse,\n  type PlanTransfersResponse,\n  type AICopilotResponse \n} from \"@shared/schema\";\nimport { AnalysisEngine } from \"./services/analysisEngine\";\nimport { TransferEngine } from \"./services/transferEngine\";\nimport { AICopilotService } from \"./services/aiCopilotService\";\n\nconst analysisEngine = new AnalysisEngine();\nconst transferEngine = new TransferEngine();\nconst aiCopilotService = AICopilotService.getInstance();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check route\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // Analyze team route\n  app.post(\"/api/analyze\", async (req, res) => {\n    try {\n      // Validate request\n      const validatedData = analyzeTeamRequestSchema.parse(req.body);\n      const teamId = validatedData.teamId.toString();\n\n      // Check cache first (15 minutes cache)\n      const cacheTimestamp = await storage.getCacheTimestamp(teamId);\n      const now = Date.now();\n      const cacheExpiry = 15 * 60 * 1000; // 15 minutes\n\n      if (cacheTimestamp && (now - cacheTimestamp) < cacheExpiry) {\n        const cachedResult = await storage.getAnalysisResult(teamId);\n        if (cachedResult) {\n          console.log(`Returning cached analysis for team ${teamId}`);\n          const response: AnalyzeTeamResponse = {\n            success: true,\n            data: cachedResult\n          };\n          return res.json(response);\n        }\n      }\n\n      // Perform fresh analysis\n      console.log(`Analyzing team ${teamId}...`);\n      const analysisResult = await analysisEngine.analyzeTeam(teamId);\n      \n      // Cache the result\n      await storage.setAnalysisResult(teamId, analysisResult);\n      await storage.setCacheTimestamp(teamId, now);\n      \n      console.log(`Analysis complete for team ${teamId}`);\n      \n      const response: AnalyzeTeamResponse = {\n        success: true,\n        data: analysisResult\n      };\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Analysis Error:', error);\n      \n      let errorMessage = 'Failed to analyze team';\n      \n      if (error instanceof Error) {\n        // Handle specific error types\n        if (error.message.includes('404') || error.message.includes('not found')) {\n          errorMessage = 'Team ID not found. Please check your FPL Team ID and try again.';\n        } else if (error.message.includes('network') || error.message.includes('fetch')) {\n          errorMessage = 'Unable to connect to FPL servers. Please try again later.';\n        } else if (error.message.includes('validation')) {\n          errorMessage = 'Invalid team ID format. Please enter a valid FPL Team ID.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      const errorResponse: AnalyzeTeamResponse = {\n        success: false,\n        error: errorMessage\n      };\n      \n      res.status(400).json(errorResponse);\n    }\n  });\n\n  // Transfer planning route\n  app.post(\"/api/transfer-plan\", async (req, res) => {\n    try {\n      // Validate request\n      const validatedData = planTransfersRequestSchema.parse(req.body);\n      const teamId = validatedData.teamId.toString();\n      \n      console.log(`Planning transfers for team ${teamId}...`);\n      \n      // Get current analysis result (need it for squad and budget info)\n      const analysisResult = await analysisEngine.analyzeTeam(teamId);\n      \n      if (!analysisResult) {\n        throw new Error('Could not analyze team for transfer planning');\n      }\n      \n      // Generate transfer plans\n      const plans = await transferEngine.generateTransferPlans(\n        analysisResult.players,\n        analysisResult.budget.bank,\n        analysisResult.budget.freeTransfers,\n        {\n          targetGameweek: validatedData.targetGameweek || analysisResult.gameweeks[1]?.gameweek || 1,\n          chipType: validatedData.chipType,\n          maxHits: validatedData.maxHits,\n          includeRiskyMoves: validatedData.includeRiskyMoves,\n          gameweeks: analysisResult.gameweeks\n        }\n      );\n      \n      console.log(`Generated ${plans.length} transfer plans for team ${teamId}`);\n      \n      const response: PlanTransfersResponse = {\n        success: true,\n        data: { plans }\n      };\n      \n      res.json(response);\n    } catch (error) {\n      console.error('Transfer planning error:', error);\n      \n      let errorMessage = 'Failed to generate transfer plans';\n      \n      if (error instanceof Error) {\n        if (error.message.includes('404') || error.message.includes('not found')) {\n          errorMessage = 'Team ID not found. Please check your FPL Team ID and try again.';\n        } else if (error.message.includes('validation')) {\n          errorMessage = 'Invalid request format. Please check your parameters.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      const errorResponse: PlanTransfersResponse = {\n        success: false,\n        error: errorMessage\n      };\n      \n      res.status(400).json(errorResponse);\n    }\n  });\n\n  // Clear cache route (for development/testing)\n  app.post(\"/api/cache/clear\", async (req, res) => {\n    try {\n      // Clear all service caches\n      const fplApi = await import('./services/fplApi');\n      const oddsService = await import('./services/oddsService');\n      const statsService = await import('./services/statsService');\n      \n      const apiService = fplApi.FPLApiService.getInstance();\n      const odds = oddsService.OddsService.getInstance();\n      const stats = statsService.StatsService.getInstance();\n      \n      apiService.clearCache();\n      odds.clearCache();\n      stats.clearCache();\n      \n      res.json({ success: true, message: 'All caches cleared successfully' });\n    } catch (error) {\n      console.error('Cache clear error:', error);\n      res.status(500).json({ success: false, error: 'Failed to clear cache' });\n    }\n  });\n\n  // Enhanced Phase 1: Data provider status endpoint\n  app.get(\"/api/providers/status\", async (req, res) => {\n    try {\n      const oddsService = await import('./services/oddsService');\n      const statsService = await import('./services/statsService');\n      \n      const odds = oddsService.OddsService.getInstance();\n      const stats = statsService.StatsService.getInstance();\n      \n      const status = {\n        odds: odds.getProviderInfo(),\n        stats: stats.getProviderInfo(),\n        simulation: {\n          name: 'monte-carlo',\n          available: true,\n          defaultRuns: 1000\n        },\n        lastUpdated: new Date().toISOString()\n      };\n      \n      res.json({ success: true, data: status });\n    } catch (error) {\n      console.error('Provider status error:', error);\n      res.status(500).json({ success: false, error: 'Failed to get provider status' });\n    }\n  });\n\n  // Enhanced Phase 1: Simulation configuration endpoint\n  app.get(\"/api/simulation/config\", (req, res) => {\n    const config = {\n      defaultRuns: 1000,\n      maxRuns: 5000,\n      gameweeksAnalyzed: 6,\n      useOdds: process.env.ODDS_PROVIDER !== 'mock',\n      useAdvancedStats: process.env.STATS_PROVIDER !== 'mock',\n      providers: {\n        odds: process.env.ODDS_PROVIDER || 'mock',\n        stats: process.env.STATS_PROVIDER || 'mock'\n      }\n    };\n    \n    res.json({ success: true, data: config });\n  });\n\n  // Enhanced Phase 3: AI Co-pilot chat endpoint\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      // Validate request\n      const validatedData = chatRequestSchema.parse(req.body);\n      \n      // Generate session ID if not provided\n      const sessionId = validatedData.sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      console.log(`Processing chat message for session ${sessionId}...`);\n      \n      // Process the chat message\n      const response = await aiCopilotService.processChatMessage(\n        validatedData.message,\n        sessionId,\n        validatedData.teamId,\n        validatedData.userId\n      );\n      \n      console.log(`Chat response generated (${response.conversationContext.responseTime}ms)`);\n      \n      res.json({\n        success: true,\n        data: {\n          ...response,\n          sessionId // Include session ID in response\n        }\n      });\n      \n    } catch (error) {\n      console.error('Chat processing error:', error);\n      \n      let errorMessage = 'Failed to process chat message';\n      \n      if (error instanceof Error) {\n        if (error.message.includes('validation')) {\n          errorMessage = 'Invalid chat message format.';\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(400).json({\n        success: false,\n        error: errorMessage\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9081},"server/storage.ts":{"content":"import { \n  type AnalysisResult,\n  type FPLPlayer,\n  type FPLTeam,\n  type FPLFixture\n} from \"@shared/schema\";\n\n// FPL API Cache interface\nexport interface IStorage {\n  // Analysis results cache\n  getAnalysisResult(teamId: string): Promise<AnalysisResult | undefined>;\n  setAnalysisResult(teamId: string, result: AnalysisResult): Promise<void>;\n  \n  // FPL API data cache\n  getFPLPlayers(): Promise<FPLPlayer[] | undefined>;\n  setFPLPlayers(players: FPLPlayer[]): Promise<void>;\n  \n  getFPLTeams(): Promise<FPLTeam[] | undefined>;\n  setFPLTeams(teams: FPLTeam[]): Promise<void>;\n  \n  getFPLFixtures(): Promise<FPLFixture[] | undefined>;\n  setFPLFixtures(fixtures: FPLFixture[]): Promise<void>;\n  \n  // Cache management\n  getCacheTimestamp(key: string): Promise<number | undefined>;\n  setCacheTimestamp(key: string, timestamp: number): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private analysisCache: Map<string, AnalysisResult>;\n  private fplPlayers: FPLPlayer[] | undefined;\n  private fplTeams: FPLTeam[] | undefined;\n  private fplFixtures: FPLFixture[] | undefined;\n  private cacheTimestamps: Map<string, number>;\n\n  constructor() {\n    this.analysisCache = new Map();\n    this.cacheTimestamps = new Map();\n  }\n\n  async getAnalysisResult(teamId: string): Promise<AnalysisResult | undefined> {\n    return this.analysisCache.get(teamId);\n  }\n\n  async setAnalysisResult(teamId: string, result: AnalysisResult): Promise<void> {\n    this.analysisCache.set(teamId, result);\n  }\n\n  async getFPLPlayers(): Promise<FPLPlayer[] | undefined> {\n    return this.fplPlayers;\n  }\n\n  async setFPLPlayers(players: FPLPlayer[]): Promise<void> {\n    this.fplPlayers = players;\n  }\n\n  async getFPLTeams(): Promise<FPLTeam[] | undefined> {\n    return this.fplTeams;\n  }\n\n  async setFPLTeams(teams: FPLTeam[]): Promise<void> {\n    this.fplTeams = teams;\n  }\n\n  async getFPLFixtures(): Promise<FPLFixture[] | undefined> {\n    return this.fplFixtures;\n  }\n\n  async setFPLFixtures(fixtures: FPLFixture[]): Promise<void> {\n    this.fplFixtures = fixtures;\n  }\n\n  async getCacheTimestamp(key: string): Promise<number | undefined> {\n    return this.cacheTimestamps.get(key);\n  }\n\n  async setCacheTimestamp(key: string, timestamp: number): Promise<void> {\n    this.cacheTimestamps.set(key, timestamp);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2346},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\n// ESM-compatible __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(__dirname, \"..\", \"client\", \"index.html\");\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2363},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// FPL API Response Types\nexport interface FPLPlayer {\n  id: number;\n  web_name: string;\n  element_type: number; // 1=GK, 2=DEF, 3=MID, 4=FWD\n  team: number;\n  now_cost: number; // Price in tenths of millions\n  total_points: number;\n  first_name: string;\n  second_name: string;\n}\n\nexport interface FPLTeam {\n  id: number;\n  name: string;\n  short_name: string;\n  strength: number;\n  strength_overall_home: number;\n  strength_overall_away: number;\n  strength_attack_home: number;\n  strength_attack_away: number;\n  strength_defence_home: number;\n  strength_defence_away: number;\n}\n\nexport interface FPLFixture {\n  id: number;\n  event: number; // gameweek\n  team_h: number; // home team id\n  team_a: number; // away team id\n  team_h_difficulty: number;\n  team_a_difficulty: number;\n  finished: boolean;\n  started: boolean;\n}\n\nexport interface FPLUserPick {\n  element: number; // player id\n  position: number; // 1-11 starting, 12-15 bench\n  multiplier: number; // captain multiplier\n  is_captain: boolean;\n  is_vice_captain: boolean;\n  purchase_price: number; // Price bought at in tenths of millions\n  selling_price: number; // Current selling price in tenths of millions\n}\n\nexport interface FPLUserSquad {\n  active_chip?: string;\n  automatic_subs: any[];\n  entry_history: {\n    event: number;\n    points: number;\n    total_points: number;\n    rank: number;\n    overall_rank: number;\n    bank: number;\n    value: number;\n    event_transfers: number;\n    event_transfers_cost: number;\n    points_on_bench: number;\n  };\n  picks: FPLUserPick[];\n}\n\n// Enhanced Phase 1 Types for Advanced Analytics\n\n// Bookmaker odds for fixtures\nexport interface MatchOdds {\n  fixtureId: number;\n  homeWin: number; // decimal odds\n  draw: number;\n  awayWin: number;\n  btts: number; // both teams to score\n  over25Goals: number; // over 2.5 goals\n  under25Goals: number; // under 2.5 goals\n  homeCleanSheet: number; // home team clean sheet\n  awayCleanSheet: number; // away team clean sheet\n  homeGoalsOver15: number; // home team over 1.5 goals\n  awayGoalsOver15: number; // away team over 1.5 goals\n  lastUpdated: string;\n}\n\n// Team strength metrics derived from odds and advanced stats\nexport interface TeamStrength {\n  teamId: number;\n  attack: number; // attacking strength (0-100)\n  defense: number; // defensive strength (0-100)\n  xGFor: number; // expected goals for (per game)\n  xGAgainst: number; // expected goals against (per game)\n  homeAdvantage: number; // home advantage factor (0.8-1.2)\n  form: number; // recent form (0-100)\n  lastUpdated: string;\n}\n\n// Advanced player statistics\nexport interface PlayerAdvanced {\n  playerId: number;\n  xG: number; // expected goals\n  xA: number; // expected assists\n  xMins: number; // expected minutes (proxy for rotation risk)\n  role: 'nailed' | 'rotation' | 'benchwarmer'; // playing time confidence\n  volatility: number; // points standard deviation \n  formTrend: 'rising' | 'stable' | 'declining'; // recent performance trend\n  fixtureAdjustedXG: number; // xG adjusted for upcoming fixtures\n  fixtureAdjustedXA: number; // xA adjusted for upcoming fixtures\n  lastUpdated: string;\n}\n\n// Monte Carlo simulation results for individual players\nexport interface PlayerSimOutcome {\n  playerId: number;\n  gameweeksSimulated: number;\n  meanPoints: number;\n  p10: number; // 10th percentile outcome\n  p50: number; // median outcome\n  p90: number; // 90th percentile outcome\n  standardDeviation: number;\n  haulsCount: number; // number of >10pt hauls in simulation\n  blankCount: number; // number of 0-2pt blanks in simulation\n  bestGameweek: number; // gameweek with highest expected return\n  worstGameweek: number; // gameweek with lowest expected return\n  confidence: number; // confidence in prediction (0-100)\n}\n\n// Simulation summary for the entire squad or chip strategy\nexport interface SimulationSummary {\n  strategy: string; // e.g., \"bench-boost-gw8\", \"current-squad\"\n  runs: number; // number of simulation runs\n  gameweeksAnalyzed: number[];\n  \n  // Overall outcomes\n  meanTotalPoints: number;\n  p10TotalPoints: number; // conservative outcome\n  p90TotalPoints: number; // optimistic outcome\n  \n  // Chip-specific metrics\n  successRate: number; // % of simulations above target\n  boomRate: number; // % of simulations with exceptional returns (>20% above mean)\n  bustRate: number; // % of simulations below disappointing threshold\n  \n  // Risk assessment\n  variance: number;\n  confidenceInterval: [number, number]; // 80% confidence interval\n  recommendationStrength: 'strong' | 'moderate' | 'weak';\n  \n  lastUpdated: string;\n}\n\n// Enhanced Phase 2: Machine Learning and Competitive Intelligence Types\n\n// Machine learning prediction for individual players\nexport interface MLPrediction {\n  playerId: number;\n  predictedPoints: number;\n  confidence: number; // 0-100 confidence in prediction\n  modelVersion: string;\n  features: {\n    form: number; // recent form factor\n    fixtures: number; // fixture difficulty weighting\n    price: number; // price performance factor\n    ownership: number; // ownership impact\n    historical: number; // historical performance factor\n  };\n  riskFactors: {\n    injuryRisk: number; // 0-1 probability of injury\n    rotationRisk: number; // 0-1 probability of rotation\n    priceDrop: number; // 0-1 probability of price decline\n  };\n  lastUpdated: string;\n}\n\n// Analysis of rival manager strategies\nexport interface RivalAnalysis {\n  managerId: string;\n  managerName: string;\n  overallRank: number;\n  gameweekRank: number;\n  totalPoints: number;\n  transfers: {\n    playersIn: Array<{\n      playerId: number;\n      playerName: string;\n      gameweek: number;\n      reason: 'popular_pick' | 'differential' | 'fixture_swing' | 'price_rise';\n    }>;\n    playersOut: Array<{\n      playerId: number;\n      playerName: string;\n      gameweek: number;\n      reason: 'injury' | 'rotation' | 'fixture_swing' | 'price_drop';\n    }>;\n  };\n  strategy: 'template' | 'differential' | 'balanced' | 'contrarian';\n  chipsUsed: Array<{\n    chip: 'wildcard' | 'bench-boost' | 'triple-captain' | 'free-hit';\n    gameweek: number;\n    success: boolean;\n    points: number;\n  }>;\n  lastUpdated: string;\n}\n\n// Competitive intelligence data about meta trends\nexport interface CompetitiveIntelligence {\n  metaTrends: {\n    popularPicks: Array<{\n      playerId: number;\n      playerName: string;\n      ownership: number;\n      trend: 'rising' | 'falling' | 'stable';\n      differential: boolean;\n    }>;\n    emergingPlayers: Array<{\n      playerId: number;\n      playerName: string;\n      ownershipGrowth: number;\n      reasons: string[];\n    }>;\n  };\n  rivalInsights: {\n    topManagerMoves: RivalAnalysis[];\n    commonStrategies: string[];\n    chipUsagePatterns: Array<{\n      chip: string;\n      optimalGameweeks: number[];\n      averageReturn: number;\n    }>;\n  };\n  marketInefficiencies: Array<{\n    playerId: number;\n    playerName: string;\n    expectedVsActualOwnership: number;\n    opportunity: 'undervalued' | 'overvalued';\n    confidence: number;\n  }>;\n  lastUpdated: string;\n}\n\n// ML model performance tracking\nexport interface MLModelPerformance {\n  modelId: string;\n  modelType: 'regression' | 'classification' | 'ensemble';\n  accuracy: number;\n  precision: number;\n  recall: number;\n  f1Score: number;\n  lastTrained: string;\n  trainingDataSize: number;\n  features: string[];\n  validationResults: {\n    meanAbsoluteError: number;\n    rootMeanSquareError: number;\n    r2Score: number;\n  };\n}\n\n// Historical player performance data for ML training\nexport interface HistoricalPlayerData {\n  playerId: number;\n  playerName: string;\n  season: string;\n  gameweeks: Array<{\n    gameweek: number;\n    points: number;\n    minutes: number;\n    goals: number;\n    assists: number;\n    cleanSheets: number;\n    saves: number;\n    penalties: number;\n    yellowCards: number;\n    redCards: number;\n    ownGoals: number;\n    price: number;\n    ownership: number;\n    captaincy: number;\n    fixture: {\n      opponent: string;\n      isHome: boolean;\n      difficulty: number;\n    };\n  }>;\n  aggregatedStats: {\n    totalPoints: number;\n    avgPointsPerGame: number;\n    pointsPerMillion: number;\n    volatility: number;\n    consistency: number;\n  };\n}\n\n// Enhanced Phase 3: AI Co-pilot and Natural Language Processing Types\n\n// Natural language query and response for AI co-pilot\nexport interface ChatMessage {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n  metadata?: {\n    queryType?: 'analysis' | 'strategy' | 'transfers' | 'general';\n    confidence?: number;\n    processingTime?: number;\n    analysisData?: any; // References to analysis results if applicable\n  };\n}\n\n// Conversation context for maintaining chat history and user preferences\nexport interface ConversationContext {\n  sessionId: string;\n  userId?: string;\n  teamId?: string;\n  messages: ChatMessage[];\n  userPreferences: {\n    riskTolerance: 'conservative' | 'balanced' | 'aggressive';\n    strategyType: 'template' | 'differential' | 'balanced' | 'contrarian';\n    priorityChips: string[];\n    budget?: number;\n  };\n  currentAnalysis?: {\n    teamData?: any;\n    lastAnalyzed?: string;\n    activeChips?: string[];\n  };\n  lastUpdated: string;\n}\n\n// Structured intent recognition from natural language queries\nexport interface QueryIntent {\n  type: 'squad_analysis' | 'chip_strategy' | 'transfer_suggestions' | 'player_comparison' | 'fixture_analysis' | 'general_advice';\n  entities: {\n    players?: string[];\n    teams?: string[];\n    gameweeks?: number[];\n    chips?: string[];\n    positions?: string[];\n    budget?: number;\n  };\n  confidence: number;\n  originalQuery: string;\n  processedQuery: string;\n}\n\n// AI-generated strategic insights and recommendations\nexport interface AIInsight {\n  type: 'recommendation' | 'warning' | 'opportunity' | 'explanation';\n  title: string;\n  content: string;\n  priority: 'high' | 'medium' | 'low';\n  confidence: number;\n  reasoning: string[];\n  actionItems?: string[];\n  relatedData?: {\n    players?: number[];\n    gameweeks?: number[];\n    expectedPoints?: number;\n    riskLevel?: 'low' | 'medium' | 'high';\n  };\n  lastUpdated: string;\n}\n\n// Comprehensive AI co-pilot response\nexport interface AICopilotResponse {\n  message: string;\n  insights: AIInsight[];\n  suggestions: string[];\n  followUpQuestions: string[];\n  analysisPerformed?: {\n    type: string;\n    confidence: number;\n    dataUsed: string[];\n  };\n  conversationContext: {\n    intent: QueryIntent;\n    responseTime: number;\n    modelVersion: string;\n  };\n}\n\n// FPL knowledge base entry for AI understanding\nexport interface FPLConcept {\n  term: string;\n  category: 'rule' | 'strategy' | 'statistic' | 'terminology';\n  definition: string;\n  examples: string[];\n  relatedTerms: string[];\n  strategicImportance: number; // 1-10 scale\n}\n\n// Analysis Types\nexport interface ProcessedPlayer {\n  id: number;\n  name: string;\n  position: 'GK' | 'DEF' | 'MID' | 'FWD';\n  team: string;\n  price: number; // in millions\n  points: number;\n  teamId: number;\n  sellPrice?: number; // Selling price in millions if owned\n  purchasePrice?: number; // Purchase price in millions if owned\n  isBench?: boolean; // Whether player is on bench\n  isStarter?: boolean; // Whether player is in starting XI\n  expectedPoints?: number; // Expected points over analysis window\n  \n  // Enhanced Phase 1 data\n  volatility?: number; // Standard deviation of points (explosiveness metric)\n  advancedStats?: PlayerAdvanced; // Advanced statistics\n  simOutcome?: PlayerSimOutcome; // Monte Carlo simulation results\n  \n  // Enhanced Phase 2: Machine Learning data\n  mlPrediction?: MLPrediction; // ML prediction for this player\n}\n\nexport interface GameweekFDR {\n  gameweek: number;\n  totalFDR: number;\n  averageFDR: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  fixtures: {\n    playerId: number;\n    playerName: string;\n    opponent: string;\n    isHome: boolean;\n    fdr: number;\n  }[];\n}\n\nexport type ChipType = 'wildcard' | 'bench-boost' | 'triple-captain' | 'free-hit';\n\nexport interface ChipRecommendation {\n  chipType: ChipType;\n  gameweek: number;\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  reasoning: string[];\n  confidence: number;\n  \n  // Enhanced Phase 1 data\n  expectedPointsRange?: [number, number]; // [min, max] expected points from simulation\n  successProbability?: number; // Probability of achieving target outcome\n  alternativeWindows?: number[]; // Other viable gameweeks for this chip\n}\n\n// Transfer Planning Types\nexport interface TransferTarget {\n  playerId: number;\n  name: string;\n  position: 'GK' | 'DEF' | 'MID' | 'FWD';\n  teamId: number;\n  teamName: string;\n  price: number; // in millions\n  expectedPoints: number;\n  reason: string;\n}\n\nexport interface TransferMove {\n  outPlayerId: number;\n  outPlayerName: string;\n  inPlayerId: number;\n  inPlayerName: string;\n  cost: number; // Transfer cost (0 for free, 4 for hit)\n  netCost: number; // Net spend after selling player\n  expectedGain: number; // Expected point gain\n}\n\nexport interface TransferPlan {\n  gameweek: number;\n  chipContext?: ChipType;\n  moves: TransferMove[];\n  totalHits: number;\n  totalCost: number; // Total points cost from hits\n  budgetAfter: number; // Remaining budget after transfers\n  projectedGain: number; // Total expected points gain\n  confidence: number; // Confidence score 0-100\n  notes: string[];\n  feasible: boolean; // Whether plan is within budget/transfer constraints\n}\n\nexport interface BudgetAnalysis {\n  bank: number; // Money in bank (millions)\n  teamValue: number; // Total team value (millions)\n  freeTransfers: number; // Available free transfers\n  nextDeadline: string; // Next transfer deadline\n  canAfford: {\n    maxPlayerPrice: number; // Most expensive player affordable\n    benchUpgrades: TransferTarget[]; // Affordable bench improvements\n    starterUpgrades: TransferTarget[]; // Affordable starting XI improvements\n  };\n}\n\nexport interface AnalysisResult {\n  teamId: string;\n  teamName: string;\n  players: ProcessedPlayer[];\n  totalValue: number;\n  totalPoints: number;\n  gameweeks: GameweekFDR[];\n  recommendations: ChipRecommendation[];\n  budget: BudgetAnalysis;\n  transferPlans?: TransferPlan[];\n  lastUpdated: string;\n  \n  // Enhanced Phase 1 data\n  simulationSummary?: SimulationSummary; // Overall squad simulation results\n  expectedPointsSource?: 'fdr' | 'odds' | 'advanced-stats' | 'simulation'; // Data source for EP calculations\n  confidenceLevel?: number; // Overall confidence in analysis (0-100)\n  dataFreshness?: {\n    odds: string; // timestamp of last odds update\n    stats: string; // timestamp of last stats update\n    fpl: string; // timestamp of last FPL data update\n    ml?: string; // timestamp of last ML predictions update (Phase 2)\n    competitiveIntelligence?: string; // timestamp of last competitive intelligence update (Phase 2)\n  };\n  \n  // Enhanced Phase 2: Machine Learning and Competitive Intelligence\n  mlPredictions?: MLPrediction[]; // ML predictions for each player\n  competitiveIntelligence?: CompetitiveIntelligence; // Market trends and rival insights\n  strategicRecommendations?: Array<{\n    type: 'template' | 'differential' | 'contrarian' | 'balanced';\n    description: string;\n    confidence: number;\n    recommendations: string[];\n  }>;\n}\n\n// Request/Response Schemas\nexport const analyzeTeamRequestSchema = z.object({\n  teamId: z.string().regex(/^\\d+$/, \"Team ID must be a number\")\n    .transform(val => parseInt(val))\n    .refine(val => val > 0 && val <= 99999999, \"Invalid team ID range\")\n});\n\nexport type AnalyzeTeamRequest = z.infer<typeof analyzeTeamRequestSchema>;\n\n// Transfer Planning Request/Response Schemas\nexport const planTransfersRequestSchema = z.object({\n  teamId: z.string().regex(/^\\d+$/, \"Team ID must be a number\")\n    .transform(val => parseInt(val))\n    .refine(val => val > 0 && val <= 99999999, \"Invalid team ID range\"),\n  targetGameweek: z.number().optional(),\n  chipType: z.enum(['wildcard', 'bench-boost', 'triple-captain', 'free-hit']).optional(),\n  maxHits: z.number().min(0).max(10).default(2),\n  includeRiskyMoves: z.boolean().default(false)\n});\n\nexport type PlanTransfersRequest = z.infer<typeof planTransfersRequestSchema>;\n\n// Enhanced Phase 3: AI Co-pilot API schemas\nexport const chatRequestSchema = z.object({\n  message: z.string().min(1).max(1000),\n  sessionId: z.string().optional(),\n  teamId: z.string().optional(),\n  userId: z.string().optional()\n});\n\nexport type ChatRequest = z.infer<typeof chatRequestSchema>;\n\nexport const planTransfersResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    plans: z.array(z.object({\n      gameweek: z.number(),\n      chipContext: z.enum(['wildcard', 'bench-boost', 'triple-captain', 'free-hit']).optional(),\n      moves: z.array(z.object({\n        outPlayerId: z.number(),\n        outPlayerName: z.string(),\n        inPlayerId: z.number(),\n        inPlayerName: z.string(),\n        cost: z.number(),\n        netCost: z.number(),\n        expectedGain: z.number()\n      })),\n      totalHits: z.number(),\n      totalCost: z.number(),\n      budgetAfter: z.number(),\n      projectedGain: z.number(),\n      confidence: z.number(),\n      notes: z.array(z.string()),\n      feasible: z.boolean()\n    }))\n  }).optional(),\n  error: z.string().optional()\n});\n\nexport type PlanTransfersResponse = z.infer<typeof planTransfersResponseSchema>;\n\nexport const analyzeTeamResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.object({\n    teamId: z.string(),\n    teamName: z.string(),\n    players: z.array(z.object({\n      id: z.number(),\n      name: z.string(),\n      position: z.enum(['GK', 'DEF', 'MID', 'FWD']),\n      team: z.string(),\n      price: z.number(),\n      points: z.number(),\n      teamId: z.number(),\n      sellPrice: z.number().optional(),\n      purchasePrice: z.number().optional(),\n      isBench: z.boolean().optional(),\n      isStarter: z.boolean().optional(),\n      expectedPoints: z.number().optional(),\n      \n      // Enhanced Phase 1 data\n      volatility: z.number().optional(),\n      advancedStats: z.object({\n        playerId: z.number(),\n        xG: z.number(),\n        xA: z.number(),\n        xMins: z.number(),\n        role: z.enum(['nailed', 'rotation', 'benchwarmer']),\n        volatility: z.number(),\n        formTrend: z.enum(['rising', 'stable', 'declining']),\n        fixtureAdjustedXG: z.number(),\n        fixtureAdjustedXA: z.number(),\n        lastUpdated: z.string()\n      }).optional()\n    })),\n    totalValue: z.number(),\n    totalPoints: z.number(),\n    gameweeks: z.array(z.object({\n      gameweek: z.number(),\n      totalFDR: z.number(),\n      averageFDR: z.number(),\n      difficulty: z.enum(['easy', 'medium', 'hard']),\n      fixtures: z.array(z.object({\n        playerId: z.number(),\n        playerName: z.string(),\n        opponent: z.string(),\n        isHome: z.boolean(),\n        fdr: z.number()\n      }))\n    })),\n    recommendations: z.array(z.object({\n      chipType: z.enum(['wildcard', 'bench-boost', 'triple-captain', 'free-hit']),\n      gameweek: z.number(),\n      priority: z.enum(['high', 'medium', 'low']),\n      title: z.string(),\n      description: z.string(),\n      reasoning: z.array(z.string()),\n      confidence: z.number(),\n      \n      // Enhanced Phase 1 data\n      expectedPointsRange: z.tuple([z.number(), z.number()]).optional(),\n      successProbability: z.number().optional(),\n      alternativeWindows: z.array(z.number()).optional()\n    })),\n    budget: z.object({\n      bank: z.number(),\n      teamValue: z.number(),\n      freeTransfers: z.number(),\n      nextDeadline: z.string(),\n      canAfford: z.object({\n        maxPlayerPrice: z.number(),\n        benchUpgrades: z.array(z.object({\n          playerId: z.number(),\n          name: z.string(),\n          position: z.enum(['GK', 'DEF', 'MID', 'FWD']),\n          teamId: z.number(),\n          teamName: z.string(),\n          price: z.number(),\n          expectedPoints: z.number(),\n          reason: z.string()\n        })),\n        starterUpgrades: z.array(z.object({\n          playerId: z.number(),\n          name: z.string(),\n          position: z.enum(['GK', 'DEF', 'MID', 'FWD']),\n          teamId: z.number(),\n          teamName: z.string(),\n          price: z.number(),\n          expectedPoints: z.number(),\n          reason: z.string()\n        }))\n      })\n    }),\n    transferPlans: z.array(z.object({\n      gameweek: z.number(),\n      chipContext: z.enum(['wildcard', 'bench-boost', 'triple-captain', 'free-hit']).optional(),\n      moves: z.array(z.object({\n        outPlayerId: z.number(),\n        outPlayerName: z.string(),\n        inPlayerId: z.number(),\n        inPlayerName: z.string(),\n        cost: z.number(),\n        netCost: z.number(),\n        expectedGain: z.number()\n      })),\n      totalHits: z.number(),\n      totalCost: z.number(),\n      budgetAfter: z.number(),\n      projectedGain: z.number(),\n      confidence: z.number(),\n      notes: z.array(z.string()),\n      feasible: z.boolean()\n    })).optional(),\n    lastUpdated: z.string(),\n    \n    // Enhanced Phase 1 data\n    simulationSummary: z.object({\n      strategy: z.string(),\n      runs: z.number(),\n      gameweeksAnalyzed: z.array(z.number()),\n      meanTotalPoints: z.number(),\n      p10TotalPoints: z.number(),\n      p90TotalPoints: z.number(),\n      successRate: z.number(),\n      boomRate: z.number(),\n      bustRate: z.number(),\n      variance: z.number(),\n      confidenceInterval: z.tuple([z.number(), z.number()]),\n      recommendationStrength: z.enum(['strong', 'moderate', 'weak']),\n      lastUpdated: z.string()\n    }).optional(),\n    expectedPointsSource: z.enum(['fdr', 'odds', 'advanced-stats', 'simulation']).optional(),\n    confidenceLevel: z.number().optional(),\n    dataFreshness: z.object({\n      odds: z.string(),\n      stats: z.string(),\n      fpl: z.string()\n    }).optional()\n  }).optional(),\n  error: z.string().optional()\n});\n\nexport type AnalyzeTeamResponse = z.infer<typeof analyzeTeamResponseSchema>;\n","size_bytes":21996},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":729},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 15% 98%;\n\n  --foreground: 220 15% 20%;\n\n  --border: 220 13% 91%;\n\n  --card: 220 14% 96%;\n\n  --card-foreground: 220 15% 20%;\n\n  --card-border: 220 13% 93%;\n\n  --sidebar: 220 13% 94%;\n\n  --sidebar-foreground: 220 15% 20%;\n\n  --sidebar-border: 220 13% 91%;\n\n  --sidebar-primary: 280 100% 70%;\n\n  --sidebar-primary-foreground: 280 100% 98%;\n\n  --sidebar-accent: 220 13% 89%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 280 100% 70%;\n\n  --popover: 220 14% 92%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 13% 88%;\n\n  --primary: 280 100% 70%;\n\n  --primary-foreground: 280 100% 98%;\n\n  --secondary: 220 13% 88%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 220 12% 90%;\n\n  --muted-foreground: 220 9% 46%;\n\n  --accent: 220 12% 88%;\n\n  --accent-foreground: 220 15% 20%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 13% 85%;\n  --ring: 280 100% 70%;\n  --chart-1: 142 76% 36%;\n  --chart-2: 25 95% 53%;\n  --chart-3: 0 84% 60%;\n  --chart-4: 280 100% 70%;\n  --chart-5: 220 9% 46%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 69% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 69% / 0.1);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 13% 69% / 0.05), 0px 1px 3px 0px hsl(220 13% 69% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 69% / 0.1), 0px 1px 2px -1px hsl(220 13% 69% / 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 69% / 0.1), 0px 2px 4px -2px hsl(220 13% 69% / 0.1);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 69% / 0.1), 0px 4px 6px -4px hsl(220 13% 69% / 0.1);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 69% / 0.1), 0px 8px 10px -6px hsl(220 13% 69% / 0.1);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 69% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 12%;\n\n  --foreground: 220 15% 85%;\n\n  --border: 220 13% 18%;\n\n  --card: 220 14% 14%;\n\n  --card-foreground: 220 15% 85%;\n\n  --card-border: 220 13% 16%;\n\n  --sidebar: 220 13% 16%;\n\n  --sidebar-foreground: 220 15% 85%;\n\n  --sidebar-border: 220 13% 18%;\n\n  --sidebar-primary: 280 100% 70%;\n\n  --sidebar-primary-foreground: 280 100% 98%;\n\n  --sidebar-accent: 220 13% 18%;\n\n  --sidebar-accent-foreground: 220 15% 85%;\n\n  --sidebar-ring: 280 100% 70%;\n\n  --popover: 220 14% 18%;\n\n  --popover-foreground: 220 15% 85%;\n\n  --popover-border: 220 13% 20%;\n\n  --primary: 280 100% 70%;\n\n  --primary-foreground: 280 100% 98%;\n\n  --secondary: 220 13% 20%;\n\n  --secondary-foreground: 220 15% 85%;\n\n  --muted: 220 12% 19%;\n\n  --muted-foreground: 220 9% 65%;\n\n  --accent: 220 12% 20%;\n\n  --accent-foreground: 220 15% 85%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 84% 98%;\n\n  --input: 220 13% 24%;\n  --ring: 280 100% 70%;\n  --chart-1: 142 76% 55%;\n  --chart-2: 25 95% 65%;\n  --chart-3: 0 84% 70%;\n  --chart-4: 280 100% 80%;\n  --chart-5: 220 9% 75%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 15% 5% / 0.3);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 15% 5% / 0.4);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 15% 5% / 0.3), 0px 1px 3px 0px hsl(220 15% 5% / 0.4);\n  --shadow: 0px 1px 3px 0px hsl(220 15% 5% / 0.4), 0px 1px 2px -1px hsl(220 15% 5% / 0.4);\n  --shadow-md: 0px 4px 6px -1px hsl(220 15% 5% / 0.4), 0px 2px 4px -2px hsl(220 15% 5% / 0.4);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 15% 5% / 0.4), 0px 4px 6px -4px hsl(220 15% 5% / 0.4);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 15% 5% / 0.4), 0px 8px 10px -6px hsl(220 15% 5% / 0.4);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 15% 5% / 0.5);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9859},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiCopilotService.ts":{"content":"/**\n * AICopilotService - Phase 3 Enhancement\n * \n * Main AI co-pilot service that orchestrates natural language processing,\n * analysis coordination, and intelligent response generation for FPL strategy.\n */\n\nimport { NaturalLanguageProcessor } from './naturalLanguageProcessor';\nimport { AnalysisEngine } from './analysisEngine';\nimport { MLPredictionEngine } from './mlPredictionEngine';\nimport { CompetitiveIntelligenceEngine } from './competitiveIntelligenceEngine';\nimport { OpenRouterService } from './openRouterService';\nimport { \n  ChatMessage, \n  ConversationContext, \n  QueryIntent, \n  AICopilotResponse, \n  AIInsight,\n  ProcessedPlayer \n} from '@shared/schema';\n\ninterface ConversationSession {\n  context: ConversationContext;\n  lastActivity: Date;\n}\n\nexport class AICopilotService {\n  private static instance: AICopilotService;\n  private nlProcessor: NaturalLanguageProcessor;\n  private analysisEngine: AnalysisEngine;\n  private mlEngine: MLPredictionEngine;\n  private competitiveEngine: CompetitiveIntelligenceEngine;\n  private llmService: OpenRouterService;\n  private sessions = new Map<string, ConversationSession>();\n  private readonly SESSION_TIMEOUT = 30 * 60 * 1000; // 30 minutes\n\n  private constructor() {\n    this.nlProcessor = NaturalLanguageProcessor.getInstance();\n    this.analysisEngine = new AnalysisEngine();\n    this.mlEngine = MLPredictionEngine.getInstance();\n    this.competitiveEngine = CompetitiveIntelligenceEngine.getInstance();\n    this.llmService = OpenRouterService.getInstance();\n    \n    // Clean up expired sessions periodically\n    setInterval(() => this.cleanupExpiredSessions(), 5 * 60 * 1000); // Every 5 minutes\n  }\n\n  public static getInstance(): AICopilotService {\n    if (!AICopilotService.instance) {\n      AICopilotService.instance = new AICopilotService();\n    }\n    return AICopilotService.instance;\n  }\n\n  /**\n   * Process a natural language chat message and generate intelligent response\n   */\n  async processChatMessage(\n    message: string, \n    sessionId: string, \n    teamId?: string,\n    userId?: string\n  ): Promise<AICopilotResponse> {\n    const startTime = Date.now();\n    \n    try {\n      // Get or create conversation context\n      const context = await this.getOrCreateContext(sessionId, teamId, userId);\n      \n      // Process the natural language query\n      const intent = await this.nlProcessor.processQuery(message);\n      \n      // Check confidence threshold for clarification (per-intent thresholds)\n      const getConfidenceThreshold = (intentType: string): number => {\n        switch (intentType) {\n          case 'squad_analysis': return 35;\n          case 'chip_strategy':\n          case 'player_comparison':\n          case 'transfer_suggestions':\n          case 'fixture_analysis': return 45;\n          case 'general_advice': return 50;\n          default: return 40;\n        }\n      };\n      \n      const threshold = getConfidenceThreshold(intent.type);\n      if (intent.confidence < threshold) {\n        const clarificationMessage = this.nlProcessor.generateClarificationQuestion(message, intent.entities);\n        \n        return {\n          message: clarificationMessage,\n          insights: [],\n          suggestions: [\n            \"Try being more specific about what you're asking\",\n            \"Mention specific players, gameweeks, or chips if relevant\",\n            \"Ask about a particular aspect like transfers, analysis, or strategy\"\n          ],\n          followUpQuestions: [\n            \"What specific FPL help do you need?\",\n            \"Are you looking for squad analysis, transfer advice, or chip timing?\",\n            \"Do you have a Team ID for personalized advice?\"\n          ],\n          conversationContext: {\n            intent,\n            responseTime: Date.now() - startTime,\n            modelVersion: 'ai-copilot-v3.0'\n          }\n        };\n      }\n      \n      // Add user message to conversation history\n      const userMessage: ChatMessage = {\n        id: this.generateMessageId(),\n        role: 'user',\n        content: message,\n        timestamp: new Date().toISOString(),\n        metadata: {\n          queryType: this.mapIntentToQueryType(intent.type),\n          confidence: intent.confidence\n        }\n      };\n      context.messages.push(userMessage);\n      \n      // Generate response based on intent\n      const response = await this.generateResponse(intent, context);\n      \n      // Add assistant response to conversation history\n      const assistantMessage: ChatMessage = {\n        id: this.generateMessageId(),\n        role: 'assistant',\n        content: response.message,\n        timestamp: new Date().toISOString(),\n        metadata: {\n          processingTime: Date.now() - startTime,\n          confidence: response.analysisPerformed?.confidence || intent.confidence\n        }\n      };\n      context.messages.push(assistantMessage);\n      \n      // Update session\n      context.lastUpdated = new Date().toISOString();\n      this.updateSession(sessionId, context);\n      \n      return {\n        ...response,\n        conversationContext: {\n          intent,\n          responseTime: Date.now() - startTime,\n          modelVersion: 'ai-copilot-v3.0'\n        }\n      };\n      \n    } catch (error) {\n      console.error('AI Copilot processing error:', error);\n      \n      return {\n        message: \"I apologize, but I'm having trouble processing your request right now. Could you try rephrasing your question about your FPL strategy?\",\n        insights: [],\n        suggestions: [\n          \"Try asking about specific players or transfers\",\n          \"Ask for chip strategy advice\",\n          \"Request a squad analysis\"\n        ],\n        followUpQuestions: [\n          \"Would you like me to analyze your current squad?\",\n          \"Are you looking for transfer suggestions?\",\n          \"Do you need help with chip timing?\"\n        ],\n        conversationContext: {\n          intent: {\n            type: 'general_advice',\n            entities: {},\n            confidence: 20,\n            originalQuery: message,\n            processedQuery: message\n          },\n          responseTime: Date.now() - startTime,\n          modelVersion: 'ai-copilot-v3.0-fallback'\n        }\n      };\n    }\n  }\n\n  /**\n   * Generate intelligent response based on query intent\n   */\n  private async generateResponse(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    // Try to generate LLM-enhanced response first\n    if (this.llmService.isConfigured()) {\n      try {\n        return await this.generateLLMEnhancedResponse(intent, context);\n      } catch (error) {\n        console.warn('LLM generation failed, falling back to static responses:', error);\n        // Fall through to static responses\n      }\n    }\n\n    // Fallback to static responses\n    switch (intent.type) {\n      case 'squad_analysis':\n        return this.handleSquadAnalysis(intent, context);\n      \n      case 'chip_strategy':\n        return this.handleChipStrategy(intent, context);\n      \n      case 'transfer_suggestions':\n        return this.handleTransferSuggestions(intent, context);\n      \n      case 'player_comparison':\n        return this.handlePlayerComparison(intent, context);\n      \n      case 'fixture_analysis':\n        return this.handleFixtureAnalysis(intent, context);\n      \n      case 'general_advice':\n      default:\n        return this.handleGeneralAdvice(intent, context);\n    }\n  }\n\n  /**\n   * Generate LLM-enhanced response with full FPL context\n   */\n  private async generateLLMEnhancedResponse(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    // Gather FPL analysis data based on intent\n    let analysisData: any = null;\n    let squadData: any = null;\n    let recommendations: any[] = [];\n\n    // Get squad analysis if we have a team ID and it's relevant\n    if (context.teamId && (intent.type === 'squad_analysis' || intent.type === 'transfer_suggestions' || intent.type === 'chip_strategy')) {\n      try {\n        analysisData = await this.analysisEngine.analyzeTeam(context.teamId);\n        squadData = {\n          teamValue: analysisData.budget?.teamValue || 100,\n          bank: analysisData.budget?.bank || 0,\n          freeTransfers: analysisData.budget?.freeTransfers || 1\n        };\n        recommendations = analysisData.recommendations || [];\n      } catch (error) {\n        console.warn('Failed to get analysis data for LLM context:', error);\n      }\n    }\n\n    // Build conversation history for context\n    const conversationHistory = context.messages\n      .slice(-6) // Last 6 messages for context\n      .map(msg => ({\n        role: msg.role as 'user' | 'assistant',\n        content: msg.content\n      }));\n\n    // Get the user's current query\n    const currentQuery = context.messages[context.messages.length - 1]?.content || intent.originalQuery;\n\n    // Generate LLM response with rich context\n    const llmResponse = await this.llmService.generateFPLResponse(\n      currentQuery,\n      {\n        intent: intent.type,\n        entities: intent.entities,\n        squadData,\n        analysisData,\n        recommendations\n      },\n      conversationHistory\n    );\n\n    // Generate insights based on analysis data\n    const insights: AIInsight[] = [];\n    if (analysisData?.insights) {\n      insights.push(...analysisData.insights);\n    }\n\n    // Generate dynamic suggestions based on intent\n    const suggestions = this.generateDynamicSuggestions(intent, analysisData);\n    \n    // Generate dynamic follow-up questions\n    const followUpQuestions = this.generateDynamicFollowUps(intent, context);\n\n    return {\n      message: llmResponse,\n      insights,\n      suggestions,\n      followUpQuestions,\n      analysisPerformed: analysisData ? {\n        type: intent.type as any,\n        confidence: Math.min(95, intent.confidence + 15), // Boost confidence for LLM responses\n        dataUsed: ['fpl_data', 'llm_analysis', 'simulation', 'ml_predictions', 'competitive_intelligence']\n      } : undefined\n    };\n  }\n\n  /**\n   * Generate dynamic suggestions based on intent and analysis\n   */\n  private generateDynamicSuggestions(intent: QueryIntent, analysisData: any): string[] {\n    const suggestions: string[] = [];\n\n    switch (intent.type) {\n      case 'squad_analysis':\n        if (analysisData?.recommendations) {\n          suggestions.push(...analysisData.recommendations.slice(0, 3).map((r: any) => r.content || r.title));\n        }\n        suggestions.push(\"Consider upcoming fixture difficulty\", \"Look for differential picks\");\n        break;\n      \n      case 'chip_strategy':\n        suggestions.push(\"Consider fixture swings for optimal timing\", \"Plan around double gameweeks\", \"Coordinate with transfer strategy\");\n        break;\n      \n      case 'transfer_suggestions':\n        suggestions.push(\"Check player price trends\", \"Consider fixture difficulty\", \"Look at ownership percentages\");\n        break;\n      \n      case 'player_comparison':\n        suggestions.push(\"Compare expected points and form\", \"Check upcoming fixtures\", \"Consider value for money\");\n        break;\n      \n      case 'fixture_analysis':\n        suggestions.push(\"Identify fixture swings\", \"Plan transfer timing\", \"Consider captaincy rotation\");\n        break;\n      \n      default:\n        suggestions.push(\"Try asking about specific players or strategies\", \"Share your Team ID for personalized advice\");\n    }\n\n    return suggestions.slice(0, 4); // Limit to 4 suggestions\n  }\n\n  /**\n   * Generate dynamic follow-up questions based on context\n   */\n  private generateDynamicFollowUps(intent: QueryIntent, context: ConversationContext): string[] {\n    const questions: string[] = [];\n\n    switch (intent.type) {\n      case 'squad_analysis':\n        questions.push(\"Would you like specific transfer recommendations?\", \"Should I analyze your chip timing strategy?\", \"Want to see how your players compare to popular picks?\");\n        break;\n      \n      case 'chip_strategy':\n        questions.push(\"Want details about a specific chip recommendation?\", \"Should I analyze the best captaincy options?\", \"Need help planning transfers before using chips?\");\n        break;\n      \n      case 'transfer_suggestions':\n        questions.push(\"Want me to analyze specific transfer options?\", \"Should I check if any transfers would improve your fixtures?\", \"Need help timing transfers around price changes?\");\n        break;\n      \n      case 'player_comparison':\n        questions.push(\"Which specific aspect should I focus on - form, fixtures, or value?\", \"Want me to include more players in the comparison?\", \"Should I consider your current squad context?\");\n        break;\n      \n      case 'fixture_analysis':\n        questions.push(\"Want to see specific team fixture runs?\", \"Should I identify the best chip timing based on fixtures?\", \"Need help with captaincy based on fixtures?\");\n        break;\n      \n      default:\n        if (!context.teamId) {\n          questions.push(\"What's your FPL Team ID for personalized advice?\");\n        }\n        questions.push(\"What specific FPL challenge are you facing?\", \"Are you planning for this gameweek or longer term?\");\n    }\n\n    return questions.slice(0, 3); // Limit to 3 questions\n  }\n\n  /**\n   * Handle squad analysis requests\n   */\n  private async handleSquadAnalysis(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    if (!context.teamId) {\n      return {\n        message: \"I'd love to analyze your squad! Could you please provide your FPL Team ID so I can access your current players and give you personalized insights?\",\n        insights: [],\n        suggestions: [\n          \"You can find your Team ID in the FPL app or website\",\n          \"Once I have your Team ID, I can provide detailed analysis\",\n          \"I'll analyze your players, fixtures, and suggest improvements\"\n        ],\n        followUpQuestions: [\n          \"What's your FPL Team ID?\",\n          \"Are you looking for any specific type of analysis?\"\n        ]\n      };\n    }\n\n    try {\n      // Perform comprehensive analysis\n      const analysis = await this.analysisEngine.analyzeTeam(context.teamId);\n      \n      // Generate insights based on analysis\n      const insights = await this.generateSquadInsights(analysis);\n      \n      // Create response message\n      const message = this.formatSquadAnalysisMessage(analysis, insights);\n      \n      return {\n        message,\n        insights,\n        suggestions: this.generateSquadSuggestions(analysis),\n        followUpQuestions: [\n          \"Would you like specific transfer recommendations?\",\n          \"Should I analyze your chip timing strategy?\",\n          \"Want to see how your players compare to popular picks?\"\n        ],\n        analysisPerformed: {\n          type: 'squad_analysis',\n          confidence: analysis.confidenceLevel || 75,\n          dataUsed: ['fpl_data', 'simulation', 'ml_predictions', 'competitive_intelligence']\n        }\n      };\n      \n    } catch (error) {\n      console.error('Squad analysis error:', error);\n      return {\n        message: \"I couldn't analyze your squad right now. Please check your Team ID and try again.\",\n        insights: [],\n        suggestions: [\"Verify your Team ID is correct\", \"Try again in a moment\"],\n        followUpQuestions: [\"What's your correct Team ID?\"]\n      };\n    }\n  }\n\n  /**\n   * Handle chip strategy questions\n   */\n  private async handleChipStrategy(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    const chipRequested = intent.entities.chips?.[0];\n    const gameweekRequested = intent.entities.gameweeks?.[0];\n    \n    if (chipRequested) {\n      return this.generateChipSpecificAdvice(chipRequested, gameweekRequested, context);\n    }\n    \n    if (!context.teamId) {\n      return {\n        message: \"For personalized chip strategy, I'll need your Team ID to analyze your squad and fixtures. In general, here's my chip timing advice:\",\n        insights: this.generateGeneralChipInsights(),\n        suggestions: [\n          \"Wildcard: Use during fixture swings or international breaks\",\n          \"Bench Boost: Target gameweeks with good bench player fixtures\",\n          \"Triple Captain: Pick explosive players with great home fixtures\",\n          \"Free Hit: Save for blank/double gameweeks\"\n        ],\n        followUpQuestions: [\n          \"What's your Team ID for personalized chip advice?\",\n          \"Which specific chip are you considering?\",\n          \"Do you want to know about double gameweeks?\"\n        ]\n      };\n    }\n\n    try {\n      const analysis = await this.analysisEngine.analyzeTeam(context.teamId);\n      const chipRecommendations = analysis.recommendations;\n      \n      const message = this.formatChipStrategyMessage(chipRecommendations);\n      const insights = this.generateChipInsights(chipRecommendations);\n      \n      return {\n        message,\n        insights,\n        suggestions: chipRecommendations.map(rec => `${rec.chipType} in GW${rec.gameweek}: ${rec.reasoning.join(', ')}`),\n        followUpQuestions: [\n          \"Want details about a specific chip recommendation?\",\n          \"Should I analyze the best captaincy options?\",\n          \"Need help planning transfers before using chips?\"\n        ]\n      };\n      \n    } catch (error) {\n      console.error('Chip strategy error:', error);\n      return {\n        message: \"I couldn't analyze your chip strategy right now. Here's some general advice:\",\n        insights: this.generateGeneralChipInsights(),\n        suggestions: [\"Check your Team ID\", \"Consider fixture congestion periods\"],\n        followUpQuestions: [\"Which chip are you most interested in?\"]\n      };\n    }\n  }\n\n  /**\n   * Handle transfer suggestion requests\n   */\n  private async handleTransferSuggestions(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    if (!context.teamId) {\n      return {\n        message: \"I'd love to suggest transfers! Please provide your Team ID so I can see your current squad and recommend the best moves.\",\n        insights: [],\n        suggestions: [\n          \"I'll analyze your squad value and free transfers\",\n          \"Consider player form, fixtures, and ownership\",\n          \"Look for injury updates and rotation risks\"\n        ],\n        followUpQuestions: [\n          \"What's your FPL Team ID?\",\n          \"Do you have any budget constraints?\",\n          \"Any specific players you're considering?\"\n        ]\n      };\n    }\n\n    try {\n      // Get current analysis and competitive intelligence\n      const [analysis, competitiveReport] = await Promise.all([\n        this.analysisEngine.analyzeTeam(context.teamId),\n        this.competitiveEngine.generateIntelligenceReport([], 5).catch(() => null)\n      ]);\n\n      const transferTargets = competitiveReport?.transferTargets || [];\n      const insights = this.generateTransferInsights(analysis, transferTargets);\n      \n      const message = this.formatTransferSuggestionsMessage(analysis, transferTargets);\n      \n      return {\n        message,\n        insights,\n        suggestions: transferTargets.slice(0, 5).map(target => \n          `${target.playerName}: ${target.reason} (${target.priority} priority)`\n        ),\n        followUpQuestions: [\n          \"Want me to analyze specific transfer options?\",\n          \"Should I check if any transfers would improve your fixtures?\",\n          \"Need help timing transfers around price changes?\"\n        ]\n      };\n      \n    } catch (error) {\n      console.error('Transfer suggestions error:', error);\n      return {\n        message: \"I'm having trouble accessing transfer data right now. Here's some general transfer advice:\",\n        insights: [],\n        suggestions: [\n          \"Check player form over the last 5 gameweeks\",\n          \"Consider upcoming fixture difficulty\",\n          \"Monitor injury news and rotation risks\"\n        ],\n        followUpQuestions: [\"Which position needs strengthening?\"]\n      };\n    }\n  }\n\n  /**\n   * Handle other intent types (simplified for now)\n   */\n  private async handlePlayerComparison(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    const players = intent.entities.players || [];\n    \n    return {\n      message: players.length >= 2 \n        ? `Let me compare ${players.join(' vs ')} for you. I'll analyze their form, fixtures, value, and ML predictions.`\n        : \"I can help you compare players! Which specific players are you trying to choose between?\",\n      insights: [],\n      suggestions: [\n        \"Consider current form and fixture difficulty\",\n        \"Check ownership levels and differential potential\",\n        \"Compare value for money and price trends\"\n      ],\n      followUpQuestions: [\n        \"Which players do you want to compare?\",\n        \"Are you looking at a specific position?\",\n        \"What's your budget for this position?\"\n      ]\n    };\n  }\n\n  private async handleFixtureAnalysis(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    const teams = intent.entities.teams || [];\n    const gameweeks = intent.entities.gameweeks || [];\n    \n    return {\n      message: \"I'll analyze the upcoming fixtures and their difficulty ratings. This helps with transfer timing and chip strategy.\",\n      insights: [],\n      suggestions: [\n        \"Look for fixture swings (hard to easy or vice versa)\",\n        \"Identify good periods for chip usage\",\n        \"Plan transfers around fixture congestion\"\n      ],\n      followUpQuestions: [\n        \"Want to see specific team fixture runs?\",\n        \"Should I identify the best chip timing based on fixtures?\",\n        \"Need help with captaincy based on fixtures?\"\n      ]\n    };\n  }\n\n  private async handleGeneralAdvice(intent: QueryIntent, context: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    return {\n      message: \"I'm your AI FPL assistant! I can help with squad analysis, chip strategy, transfer suggestions, and more. What would you like to know?\",\n      insights: [],\n      suggestions: [\n        \"Ask me to analyze your squad\",\n        \"Get personalized chip timing advice\", \n        \"Request transfer recommendations\",\n        \"Compare different players\"\n      ],\n      followUpQuestions: [\n        \"What's your current FPL rank?\",\n        \"Which aspect of FPL do you struggle with most?\",\n        \"Do you have your Team ID ready?\"\n      ]\n    };\n  }\n\n  // Helper methods for generating insights and formatting responses would go here\n  // (Implementation details for brevity - these would format the data appropriately)\n\n  private generateSquadInsights(analysis: any): AIInsight[] {\n    const insights: AIInsight[] = [];\n    \n    if (analysis.budget && analysis.budget.freeTransfers >= 2) {\n      insights.push({\n        type: 'opportunity',\n        title: 'Transfer Opportunity',\n        content: `You have ${analysis.budget.freeTransfers} free transfers available - perfect for squad optimization!`,\n        priority: 'high',\n        confidence: 85,\n        reasoning: ['Multiple free transfers reduce point deductions', 'Good time for strategic squad changes'],\n        actionItems: ['Consider upgrading underperforming players', 'Look for fixture-favorable transfers'],\n        lastUpdated: new Date().toISOString()\n      });\n    }\n    \n    if (analysis.players && analysis.players.length > 0) {\n      const topPlayer = analysis.players\n        .filter((p: any) => p.expectedPoints)\n        .sort((a: any, b: any) => (b.expectedPoints || 0) - (a.expectedPoints || 0))[0];\n      \n      if (topPlayer) {\n        insights.push({\n          type: 'recommendation',\n          title: 'Top Performer',\n          content: `${topPlayer.name} is your highest expected points scorer with ${topPlayer.expectedPoints?.toFixed(1)} projected points.`,\n          priority: 'medium',\n          confidence: 75,\n          reasoning: ['Based on form, fixtures, and statistical analysis'],\n          relatedData: { players: [topPlayer.id], expectedPoints: topPlayer.expectedPoints },\n          lastUpdated: new Date().toISOString()\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  private formatSquadAnalysisMessage(analysis: any, insights: AIInsight[]): string {\n    const playerCount = analysis.players?.length || 15;\n    const totalValue = analysis.budget?.teamValue || 100;\n    const bankAmount = analysis.budget?.bank || 0;\n    const freeTransfers = analysis.budget?.freeTransfers || 1;\n    \n    let message = `Your squad analysis is complete! I've analyzed your ${playerCount} players using advanced simulation and ML models.\\n\\n`;\n    \n    message += `📊 **Squad Overview:**\\n`;\n    message += `• Team Value: £${totalValue.toFixed(1)}m\\n`;\n    message += `• Bank: £${bankAmount.toFixed(1)}m\\n`;\n    message += `• Free Transfers: ${freeTransfers}\\n\\n`;\n    \n    if (insights.length > 0) {\n      message += `🔍 **Key Insights:**\\n`;\n      insights.slice(0, 2).forEach(insight => {\n        message += `• ${insight.title}: ${insight.content}\\n`;\n      });\n      message += `\\n`;\n    }\n    \n    if (analysis.recommendations && analysis.recommendations.length > 0) {\n      const topChip = analysis.recommendations[0];\n      message += `🎯 **Top Recommendation:** ${topChip.chipType} in GW${topChip.gameweek} (${topChip.confidence}% confidence)`;\n    }\n    \n    return message;\n  }\n\n  private generateSquadSuggestions(analysis: any): string[] {\n    const suggestions = [];\n    \n    if (analysis.budget?.freeTransfers >= 2) {\n      suggestions.push(`Use ${analysis.budget.freeTransfers} free transfers to optimize your squad`);\n    }\n    \n    if (analysis.budget?.bank >= 2) {\n      suggestions.push(`Upgrade a player with your £${analysis.budget.bank.toFixed(1)}m bank`);\n    }\n    \n    if (analysis.recommendations && analysis.recommendations.length > 0) {\n      const nextChip = analysis.recommendations[0];\n      suggestions.push(`Consider ${nextChip.chipType} in GW${nextChip.gameweek}`);\n    }\n    \n    if (analysis.gameweeks && analysis.gameweeks.length > 0) {\n      const difficultGW = analysis.gameweeks.find((gw: any) => gw.averageFDR > 3.5);\n      if (difficultGW) {\n        suggestions.push(`Plan transfers before GW${difficultGW.gameweek} (difficult fixtures)`);\n      }\n    }\n    \n    // Add some fallback suggestions if none of the above apply\n    if (suggestions.length === 0) {\n      suggestions.push(\"Monitor player form and injury news\", \"Consider fixture difficulty for transfers\", \"Plan your chip strategy\");\n    }\n    \n    return suggestions;\n  }\n\n  private async generateChipSpecificAdvice(chip: string, gameweek?: number, context?: ConversationContext): Promise<Omit<AICopilotResponse, 'conversationContext'>> {\n    const chipName = chip.toLowerCase().replace(/[^a-z]/g, '');\n    \n    const chipAdvice: Record<string, any> = {\n      'wildcard': {\n        message: 'Wildcard is perfect for major squad overhauls! Use it during fixture swings (around GW8-12 or GW16-20) when many teams have tough fixtures changing to easy ones.',\n        suggestions: [\n          'Target fixture swings for maximum impact',\n          'Use during international breaks for planning time',\n          'Consider player price rises before activating',\n          'Plan 8-10 transfers for optimal value'\n        ]\n      },\n      'benchboost': {\n        message: 'Bench Boost works best in double gameweeks when your bench players have fixtures. Look for GWs where 4+ teams have doubles.',\n        suggestions: [\n          'Target double gameweeks with good bench fixtures',\n          'Ensure all 15 players have games',\n          'Use 1-2 transfers to optimize bench beforehand',\n          'Consider defensive players for reliable points'\n        ]\n      },\n      'triplecaptain': {\n        message: 'Triple Captain multiplies your captain by 3x instead of 2x. Save it for explosive players with great home fixtures or double gameweeks.',\n        suggestions: [\n          'Target premium forwards/midfielders at home',\n          'Use in double gameweeks for extra games',\n          'Consider opponents defensive weaknesses',\n          'Avoid using on defenders or goalkeepers'\n        ]\n      },\n      'freehit': {\n        message: 'Free Hit gives you a completely different team for one gameweek. Perfect for blank gameweeks or specific fixture optimization.',\n        suggestions: [\n          'Save for blank gameweeks (few teams play)',\n          'Use when your players have terrible fixtures',\n          'Target double gameweek players',\n          'Plan the gameweek before to optimize your real team'\n        ]\n      }\n    };\n    \n    const advice = chipAdvice[chipName] || chipAdvice['wildcard'];\n    \n    let message = advice.message;\n    if (gameweek) {\n      message += ` For GW${gameweek} specifically, I'd need to analyze the fixtures to give you targeted advice.`;\n    }\n    \n    return {\n      message,\n      insights: [],\n      suggestions: advice.suggestions,\n      followUpQuestions: [\n        gameweek ? `Is GW${gameweek} the right time for ${chip}?` : `Which gameweek are you considering for ${chip}?`,\n        'Want me to analyze your squad to see if this chip fits your strategy?',\n        'Should I check upcoming fixtures for optimal timing?'\n      ]\n    };\n  }\n\n  private generateGeneralChipInsights(): AIInsight[] {\n    return [\n      {\n        type: 'recommendation',\n        title: 'Chip Timing Strategy',\n        content: 'Plan your chips around fixture difficulty swings and double gameweeks for maximum impact.',\n        priority: 'medium',\n        confidence: 80,\n        reasoning: ['Historical data shows 15-20% better returns with strategic timing'],\n        actionItems: ['Monitor fixture releases', 'Track double gameweek announcements'],\n        lastUpdated: new Date().toISOString()\n      },\n      {\n        type: 'warning',\n        title: 'Early Chip Usage',\n        content: 'Avoid using chips too early in the season. Wait for fixture swings and double gameweeks.',\n        priority: 'medium', \n        confidence: 85,\n        reasoning: ['More information available later in season', 'Better fixture predictability'],\n        lastUpdated: new Date().toISOString()\n      }\n    ];\n  }\n\n  private formatChipStrategyMessage(recommendations: any[]): string {\n    if (!recommendations || recommendations.length === 0) {\n      return \"I don't see any immediate chip recommendations for your squad. This could mean your current team is well-optimized for upcoming fixtures!\";\n    }\n    \n    const topRec = recommendations[0];\n    let message = `Based on your squad and upcoming fixtures, here's my chip strategy recommendation:\\n\\n`;\n    \n    message += `🎯 **${topRec.chipType.toUpperCase()} in Gameweek ${topRec.gameweek}** (${topRec.confidence}% confidence)\\n\\n`;\n    \n    if (topRec.reasoning && topRec.reasoning.length > 0) {\n      message += `**Why this works:**\\n`;\n      topRec.reasoning.slice(0, 3).forEach((reason: string) => {\n        message += `• ${reason}\\n`;\n      });\n    }\n    \n    if (topRec.expectedPoints) {\n      message += `\\n**Expected Impact:** ${topRec.expectedPoints.toFixed(1)} extra points`;\n    }\n    \n    if (recommendations.length > 1) {\n      message += `\\n\\n**Alternative:** ${recommendations[1].chipType} in GW${recommendations[1].gameweek} (${recommendations[1].confidence}% confidence)`;\n    }\n    \n    return message;\n  }\n\n  private generateChipInsights(recommendations: any[]): AIInsight[] {\n    return [];\n  }\n\n  private formatTransferSuggestionsMessage(analysis: any, targets: any[]): string {\n    return \"Here are my top transfer recommendations based on your squad analysis:\";\n  }\n\n  private generateTransferInsights(analysis: any, targets: any[]): AIInsight[] {\n    return [];\n  }\n\n  private mapIntentToQueryType(intent: QueryIntent['type']): 'analysis' | 'strategy' | 'transfers' | 'general' {\n    const mapping: Record<QueryIntent['type'], 'analysis' | 'strategy' | 'transfers' | 'general'> = {\n      'squad_analysis': 'analysis',\n      'chip_strategy': 'strategy',\n      'transfer_suggestions': 'transfers',\n      'player_comparison': 'analysis',\n      'fixture_analysis': 'analysis',\n      'general_advice': 'general'\n    };\n    return mapping[intent] || 'general';\n  }\n\n  private getOrCreateContext(sessionId: string, teamId?: string, userId?: string): ConversationContext {\n    const existing = this.sessions.get(sessionId);\n    \n    if (existing) {\n      existing.lastActivity = new Date();\n      if (teamId && !existing.context.teamId) {\n        existing.context.teamId = teamId;\n      }\n      return existing.context;\n    }\n\n    const newContext: ConversationContext = {\n      sessionId,\n      userId,\n      teamId,\n      messages: [],\n      userPreferences: {\n        riskTolerance: 'balanced',\n        strategyType: 'balanced',\n        priorityChips: []\n      },\n      lastUpdated: new Date().toISOString()\n    };\n\n    this.sessions.set(sessionId, {\n      context: newContext,\n      lastActivity: new Date()\n    });\n\n    return newContext;\n  }\n\n  private updateSession(sessionId: string, context: ConversationContext): void {\n    const session = this.sessions.get(sessionId);\n    if (session) {\n      session.context = context;\n      session.lastActivity = new Date();\n    }\n  }\n\n  private cleanupExpiredSessions(): void {\n    const now = Date.now();\n    for (const [sessionId, session] of Array.from(this.sessions.entries())) {\n      if (now - session.lastActivity.getTime() > this.SESSION_TIMEOUT) {\n        this.sessions.delete(sessionId);\n      }\n    }\n  }\n\n  private generateMessageId(): string {\n    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get service information for debugging\n   */\n  public getServiceInfo(): {\n    activeSessions: number;\n    version: string;\n    capabilities: string[];\n  } {\n    return {\n      activeSessions: this.sessions.size,\n      version: 'ai-copilot-v3.0',\n      capabilities: [\n        'natural-language-processing',\n        'squad-analysis',\n        'chip-strategy', \n        'transfer-suggestions',\n        'conversation-memory',\n        'contextual-responses'\n      ]\n    };\n  }\n}","size_bytes":34293},"server/services/analysisEngine.ts":{"content":"import {\n  type ProcessedPlayer,\n  type GameweekFDR,\n  type ChipRecommendation,\n  type AnalysisResult,\n  type FPLPlayer,\n  type FPLTeam,\n  type FPLFixture,\n  type FPLUserSquad,\n  type ChipType,\n  type BudgetAnalysis,\n  type TransferTarget,\n  type SimulationSummary,\n  type PlayerSimOutcome,\n  type PlayerAdvanced,\n  type MatchOdds,\n  type MLPrediction,\n  type CompetitiveIntelligence\n} from \"@shared/schema\";\nimport { FPLApiService } from './fplApi';\nimport { TransferEngine } from './transferEngine';\nimport { OddsService } from './oddsService';\nimport { StatsService } from './statsService';\nimport { SimulationEngine, type GameweekFixture, type SimulationConfig } from './simulationEngine';\nimport { MLPredictionEngine } from './mlPredictionEngine';\nimport { CompetitiveIntelligenceEngine } from './competitiveIntelligenceEngine';\n\nconst POSITION_MAP: Record<number, 'GK' | 'DEF' | 'MID' | 'FWD'> = {\n  1: 'GK',\n  2: 'DEF', \n  3: 'MID',\n  4: 'FWD'\n};\n\nexport class AnalysisEngine {\n  private fplApi: FPLApiService;\n  private transferEngine: TransferEngine;\n  private oddsService: OddsService;\n  private statsService: StatsService;\n  private simulationEngine: SimulationEngine;\n  private mlPredictionEngine: MLPredictionEngine;\n  private competitiveIntelligenceEngine: CompetitiveIntelligenceEngine;\n\n  constructor() {\n    this.fplApi = FPLApiService.getInstance();\n    this.transferEngine = new TransferEngine();\n    this.oddsService = OddsService.getInstance();\n    this.statsService = StatsService.getInstance();\n    this.simulationEngine = SimulationEngine.getInstance();\n    this.mlPredictionEngine = MLPredictionEngine.getInstance();\n    this.competitiveIntelligenceEngine = CompetitiveIntelligenceEngine.getInstance();\n  }\n\n  async analyzeTeam(teamId: string): Promise<AnalysisResult> {\n    try {\n      const managerId = parseInt(teamId);\n      \n      // Fetch all required data in parallel\n      const [bootstrap, userSquad, userInfo, fixtures, freeTransfers, nextDeadline] = await Promise.all([\n        this.fplApi.getBootstrapData(),\n        this.fplApi.getUserSquad(managerId),\n        this.fplApi.getUserInfo(managerId),\n        this.fplApi.getUpcomingFixtures(15),\n        this.fplApi.computeFreeTransfers(managerId),\n        this.fplApi.getNextDeadline()\n      ]);\n\n      // Enhanced Phase 1: Fetch odds and advanced stats\n      const fixtureIds = fixtures.map(f => f.id);\n      const playerIds = userSquad.picks.map(pick => pick.element);\n      \n      const [oddsData, playerStats] = await Promise.all([\n        this.oddsService.getMatchOddsBatch(fixtureIds).catch(e => {\n          console.warn('Odds service unavailable:', e.message);\n          return [];\n        }),\n        this.statsService.getPlayerAdvancedBatch(playerIds).catch(e => {\n          console.warn('Stats service unavailable:', e.message);\n          return [];\n        })\n      ]);\n\n      // Process players with enhanced data\n      const players = await this.processPlayersEnhanced(\n        userSquad, bootstrap.elements, bootstrap.teams, playerStats\n      );\n      \n      // Calculate enhanced gameweek FDRs with odds data\n      const gameweeks = this.calculateEnhancedGameweekFDRs(\n        players, fixtures, bootstrap.teams, oddsData\n      );\n      \n      // Run Monte Carlo simulations for squad analysis\n      const simulationSummary = await this.runSquadSimulation(players, fixtures, oddsData);\n      \n      // Enhanced Phase 2: Generate ML predictions and competitive intelligence\n      const [mlPredictions, competitiveIntelligence] = await Promise.all([\n        this.mlPredictionEngine.predictPlayers(players, 5).catch(e => {\n          console.warn('ML prediction engine unavailable:', e.message);\n          return [];\n        }),\n        this.competitiveIntelligenceEngine.generateIntelligenceReport(players, 5).catch(e => {\n          console.warn('Competitive intelligence unavailable:', e.message);\n          return null;\n        })\n      ]);\n      \n      // Merge ML predictions with players data\n      const playersWithML = this.mergeMLPredictions(players, mlPredictions);\n      \n      // Generate enhanced chip recommendations with confidence intervals and ML insights\n      const recommendations = await this.generateEnhancedRecommendations(\n        playersWithML, gameweeks, simulationSummary\n      );\n      \n      // Create budget analysis\n      const budget = await this.createBudgetAnalysis(\n        userSquad, bootstrap.elements, bootstrap.teams, freeTransfers, nextDeadline\n      );\n      \n      const totalValue = Math.round(userSquad.entry_history.value / 10 * 10) / 10;\n      const totalPoints = userSquad.entry_history.total_points;\n      \n      // Determine data source and confidence (Phase 2 Enhanced)\n      let expectedPointsSource: 'fdr' | 'odds' | 'advanced-stats' | 'simulation' = 'fdr';\n      if (mlPredictions.length > 0 && oddsData.length > 0) {\n        expectedPointsSource = 'simulation'; // ML + odds + simulation combined\n      } else if (oddsData.length > 0) {\n        expectedPointsSource = 'odds';\n      } else if (playerStats.length > 0) {\n        expectedPointsSource = 'advanced-stats';\n      }\n      \n      const confidenceLevel = this.calculateOverallConfidence(simulationSummary, oddsData.length, playerStats.length);\n      \n      return {\n        teamId,\n        teamName: userInfo.name || `${userInfo.player_first_name} ${userInfo.player_last_name}`.trim() || 'Unknown Team',\n        players: playersWithML,\n        totalValue,\n        totalPoints,\n        gameweeks,\n        recommendations,\n        budget,\n        lastUpdated: new Date().toISOString(),\n        \n        // Enhanced Phase 1 data\n        simulationSummary,\n        expectedPointsSource,\n        confidenceLevel,\n        dataFreshness: {\n          odds: oddsData.length > 0 ? new Date().toISOString() : 'unavailable',\n          stats: playerStats.length > 0 ? new Date().toISOString() : 'unavailable',\n          fpl: new Date().toISOString(),\n          ml: mlPredictions.length > 0 ? new Date().toISOString() : 'unavailable',\n          competitiveIntelligence: competitiveIntelligence ? new Date().toISOString() : 'unavailable'\n        },\n        \n        // Enhanced Phase 2: Machine Learning and Competitive Intelligence\n        mlPredictions: mlPredictions.length > 0 ? mlPredictions : undefined,\n        competitiveIntelligence: competitiveIntelligence?.competitiveIntelligence || undefined,\n        strategicRecommendations: competitiveIntelligence?.recommendedStrategies || undefined\n      };\n    } catch (error) {\n      console.error('Analysis Engine Error:', error);\n      throw new Error(`Failed to analyze team: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async processPlayersEnhanced(\n    userSquad: FPLUserSquad, \n    allPlayers: FPLPlayer[], \n    teams: FPLTeam[],\n    playerStats: PlayerAdvanced[]\n  ): Promise<ProcessedPlayer[]> {\n    return Promise.all(userSquad.picks.map(async pick => {\n      const player = allPlayers.find(p => p.id === pick.element);\n      const team = teams.find(t => t.id === player?.team);\n      const stats = playerStats.find(s => s.playerId === pick.element);\n      \n      if (!player || !team) {\n        throw new Error(`Player or team data missing for element ${pick.element}`);\n      }\n      \n      // Calculate enhanced expected points\n      const expectedPoints = await this.calculateEnhancedExpectedPoints(player, stats);\n      \n      // Calculate historical volatility\n      const volatility = stats?.volatility || this.calculateHistoricalVolatility(player);\n      \n      return {\n        id: player.id,\n        name: player.web_name,\n        position: POSITION_MAP[player.element_type],\n        team: team.short_name,\n        price: player.now_cost / 10,\n        points: player.total_points,\n        teamId: player.team,\n        sellPrice: (pick.selling_price || player.now_cost) / 10,\n        purchasePrice: (pick.purchase_price || player.now_cost) / 10,\n        isBench: pick.position > 11,\n        isStarter: pick.position <= 11,\n        expectedPoints,\n        \n        // Enhanced Phase 1 data\n        volatility,\n        advancedStats: stats\n      };\n    }));\n  }\n\n  /**\n   * Merge ML predictions with player data (Phase 2 Enhancement)\n   */\n  private mergeMLPredictions(players: ProcessedPlayer[], mlPredictions: MLPrediction[]): ProcessedPlayer[] {\n    return players.map(player => {\n      const mlPrediction = mlPredictions.find(pred => pred.playerId === player.id);\n      \n      return {\n        ...player,\n        mlPrediction\n      };\n    });\n  }\n\n  private async createBudgetAnalysis(\n    userSquad: FPLUserSquad,\n    allPlayers: FPLPlayer[],\n    teams: FPLTeam[],\n    freeTransfers: number,\n    nextDeadline: string\n  ): Promise<BudgetAnalysis> {\n    const bank = userSquad.entry_history.bank / 10; // Convert from tenths to millions\n    const teamValue = userSquad.entry_history.value / 10; // Convert from tenths to millions\n    \n    // Find current squad compositions\n    const currentSquad = userSquad.picks.map(pick => {\n      const player = allPlayers.find(p => p.id === pick.element);\n      return {\n        ...pick,\n        player,\n        sellPrice: (pick.selling_price || player?.now_cost || 0) / 10\n      };\n    });\n\n    const benchPlayers = currentSquad.filter(p => p.position > 11);\n    const starterPlayers = currentSquad.filter(p => p.position <= 11);\n    \n    // Calculate maximum affordable player price\n    const maxSellValue = Math.max(...currentSquad.map(p => p.sellPrice));\n    const maxPlayerPrice = bank + maxSellValue;\n    \n    // Find affordable upgrades for bench\n    const benchUpgrades: TransferTarget[] = [];\n    for (const benchPlayer of benchPlayers.slice(0, 3)) { // Top 3 bench improvements\n      if (!benchPlayer.player) continue;\n      \n      const position = POSITION_MAP[benchPlayer.player.element_type];\n      const budget = bank + benchPlayer.sellPrice;\n      \n      const upgrade = allPlayers\n        .filter(p => POSITION_MAP[p.element_type] === position)\n        .filter(p => p.now_cost / 10 <= budget)\n        .filter(p => p.id !== benchPlayer.element)\n        .sort((a, b) => b.total_points - a.total_points)[0];\n        \n      if (upgrade) {\n        benchUpgrades.push({\n          playerId: upgrade.id,\n          name: upgrade.web_name,\n          position,\n          teamId: upgrade.team,\n          teamName: teams.find(t => t.id === upgrade.team)?.short_name || 'Unknown',\n          price: upgrade.now_cost / 10,\n          expectedPoints: upgrade.total_points / Math.max(1, 10) * 5,\n          reason: `Upgrade from ${benchPlayer.player.web_name} - better fixtures ahead`\n        });\n      }\n    }\n    \n    // Find affordable upgrades for starters\n    const starterUpgrades: TransferTarget[] = [];\n    for (const starterPlayer of starterPlayers.slice(0, 3)) { // Top 3 starter improvements\n      if (!starterPlayer.player) continue;\n      \n      const position = POSITION_MAP[starterPlayer.player.element_type];\n      const budget = bank + starterPlayer.sellPrice;\n      \n      const upgrade = allPlayers\n        .filter(p => POSITION_MAP[p.element_type] === position)\n        .filter(p => p.now_cost / 10 <= budget)\n        .filter(p => p.id !== starterPlayer.element)\n        .filter(p => p.total_points > starterPlayer.player!.total_points)\n        .sort((a, b) => b.total_points - a.total_points)[0];\n        \n      if (upgrade) {\n        starterUpgrades.push({\n          playerId: upgrade.id,\n          name: upgrade.web_name,\n          position,\n          teamId: upgrade.team,\n          teamName: teams.find(t => t.id === upgrade.team)?.short_name || 'Unknown',\n          price: upgrade.now_cost / 10,\n          expectedPoints: upgrade.total_points / Math.max(1, 10) * 5,\n          reason: `Significant upgrade from ${starterPlayer.player.web_name} - premium option`\n        });\n      }\n    }\n\n    return {\n      bank,\n      teamValue,\n      freeTransfers,\n      nextDeadline,\n      canAfford: {\n        maxPlayerPrice,\n        benchUpgrades: benchUpgrades.slice(0, 5),\n        starterUpgrades: starterUpgrades.slice(0, 5)\n      }\n    };\n  }\n\n  private calculateGameweekFDRs(players: ProcessedPlayer[], fixtures: FPLFixture[], teams: FPLTeam[]): GameweekFDR[] {\n    const gameweekMap = new Map<number, GameweekFDR>();\n    \n    // Initialize gameweeks\n    const currentGW = Math.min(...fixtures.map(f => f.event)) || 1;\n    for (let gw = currentGW; gw <= currentGW + 9; gw++) {\n      gameweekMap.set(gw, {\n        gameweek: gw,\n        totalFDR: 0,\n        averageFDR: 0,\n        difficulty: 'medium' as const,\n        fixtures: []\n      });\n    }\n\n    // Calculate FDR for each player in each gameweek\n    players.forEach(player => {\n      const playerTeamId = player.teamId;\n      const playerFixtures = fixtures.filter(f => \n        f.team_h === playerTeamId || f.team_a === playerTeamId\n      );\n\n      playerFixtures.forEach(fixture => {\n        const gameweek = gameweekMap.get(fixture.event);\n        if (!gameweek) return;\n\n        const isHome = fixture.team_h === playerTeamId;\n        const opponentId = isHome ? fixture.team_a : fixture.team_h;\n        const opponent = teams.find(t => t.id === opponentId);\n        const fdr = isHome ? fixture.team_h_difficulty : fixture.team_a_difficulty;\n\n        if (opponent) {\n          gameweek.fixtures.push({\n            playerId: player.id,\n            playerName: player.name,\n            opponent: opponent.short_name,\n            isHome,\n            fdr\n          });\n          \n          gameweek.totalFDR += fdr;\n        }\n      });\n    });\n\n    // Calculate averages and difficulty ratings\n    const gameweeks = Array.from(gameweekMap.values()).map(gw => {\n      const fixtureCount = gw.fixtures.length;\n      gw.averageFDR = fixtureCount > 0 ? gw.totalFDR / fixtureCount : 3;\n      \n      // Classify difficulty\n      if (gw.averageFDR <= 2.2) {\n        gw.difficulty = 'easy';\n      } else if (gw.averageFDR >= 3.2) {\n        gw.difficulty = 'hard';\n      } else {\n        gw.difficulty = 'medium';\n      }\n      \n      return gw;\n    });\n\n    return gameweeks.sort((a, b) => a.gameweek - b.gameweek);\n  }\n\n  private generateRecommendations(players: ProcessedPlayer[], gameweeks: GameweekFDR[]): ChipRecommendation[] {\n    const recommendations: ChipRecommendation[] = [];\n    \n    // Bench Boost recommendation\n    const benchBoostGW = this.findOptimalBenchBoost(gameweeks);\n    if (benchBoostGW) {\n      recommendations.push(benchBoostGW);\n    }\n    \n    // Triple Captain recommendation  \n    const tripleCaptainGW = this.findOptimalTripleCaptain(players, gameweeks);\n    if (tripleCaptainGW) {\n      recommendations.push(tripleCaptainGW);\n    }\n    \n    // Wildcard recommendation\n    const wildcardGW = this.findOptimalWildcard(gameweeks);\n    if (wildcardGW) {\n      recommendations.push(wildcardGW);\n    }\n    \n    // Free Hit recommendation\n    const freeHitGW = this.findOptimalFreeHit(gameweeks);\n    if (freeHitGW) {\n      recommendations.push(freeHitGW);\n    }\n    \n    return recommendations.sort((a, b) => {\n      // Sort by priority first, then by gameweek\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];\n      return priorityDiff !== 0 ? priorityDiff : a.gameweek - b.gameweek;\n    });\n  }\n\n  private findOptimalBenchBoost(gameweeks: GameweekFDR[]): ChipRecommendation | null {\n    // Find gameweek with lowest total FDR (best fixtures for full squad)\n    const bestGW = gameweeks.reduce((best, current) => \n      current.totalFDR < best.totalFDR ? current : best\n    );\n    \n    if (bestGW.averageFDR > 2.5) return null; // Don't recommend if fixtures aren't good enough\n    \n    const confidence = Math.max(60, Math.min(95, Math.round((3.5 - bestGW.averageFDR) * 30)));\n    \n    return {\n      chipType: 'bench-boost',\n      gameweek: bestGW.gameweek,\n      priority: bestGW.averageFDR <= 2.0 ? 'high' : 'medium',\n      title: 'Optimal Bench Boost Window',\n      description: `Your entire squad faces favorable fixtures with an average FDR of ${bestGW.averageFDR.toFixed(1)}, maximizing your bench potential.`,\n      reasoning: [\n        `Average FDR of ${bestGW.averageFDR.toFixed(1)} across all 15 players`,\n        `Total squad difficulty rating: ${bestGW.totalFDR}`,\n        bestGW.fixtures.length === 15 ? 'All players have fixtures this gameweek' : 'Most players have favorable fixtures',\n        'Strong opportunity for bench players to contribute points'\n      ],\n      confidence\n    };\n  }\n\n  private findOptimalTripleCaptain(players: ProcessedPlayer[], gameweeks: GameweekFDR[]): ChipRecommendation | null {\n    // Find premium players (high points) with best individual fixtures\n    const premiumPlayers = players\n      .filter(p => p.points > 100 && (p.position === 'FWD' || p.position === 'MID'))\n      .sort((a, b) => b.points - a.points)\n      .slice(0, 3); // Top 3 premium players\n    \n    if (premiumPlayers.length === 0) return null;\n    \n    type BestOpportunity = { player: ProcessedPlayer; gameweek: number; fdr: number; opponent: string; isHome: boolean };\n    let bestOpportunity: BestOpportunity | null = null;\n    \n    premiumPlayers.forEach(player => {\n      gameweeks.forEach(gw => {\n        const playerFixture = gw.fixtures.find(f => f.playerId === player.id);\n        if (playerFixture && playerFixture.fdr <= 2) {\n          if (!bestOpportunity || playerFixture.fdr < bestOpportunity.fdr ||\n              (playerFixture.fdr === bestOpportunity.fdr && player.points > bestOpportunity.player.points)) {\n            bestOpportunity = {\n              player,\n              gameweek: gw.gameweek,\n              fdr: playerFixture.fdr,\n              opponent: playerFixture.opponent,\n              isHome: playerFixture.isHome\n            };\n          }\n        }\n      });\n    });\n    \n    if (!bestOpportunity) return null;\n    const bo = bestOpportunity as BestOpportunity;\n    const confidence = Math.max(70, Math.min(95, Math.round((3 - bo.fdr) * 25 + (bo.player.points / 10))));\n    return {\n      chipType: 'triple-captain',\n      gameweek: bo.gameweek,\n      priority: bo.fdr === 1 ? 'high' : 'medium',\n      title: 'Premium Captain Opportunity',\n      description: `${bo.player.name} faces ${bo.opponent} ${bo.isHome ? 'at home' : 'away'} - an excellent captaincy opportunity.`,\n      reasoning: [\n        `${bo.player.name} has ${bo.player.points} points this season`,\n        `Fixture difficulty rating of only ${bo.fdr} vs ${bo.opponent}`,\n        bo.isHome ? 'Playing at home provides additional advantage' : 'Away fixture but very favorable opponent',\n        `${bo.player.position} is in excellent form`\n      ],\n      confidence\n    };\n  }\n\n  private findOptimalWildcard(gameweeks: GameweekFDR[]): ChipRecommendation | null {\n    // Look for difficult periods followed by easier fixtures\n    const sortedByDifficulty = [...gameweeks].sort((a, b) => b.averageFDR - a.averageFDR);\n    const hardestGW = sortedByDifficulty[0];\n    \n    if (hardestGW.averageFDR < 2.8) return null; // Not difficult enough to warrant wildcard\n    \n    // Find if there's a good period after the difficult one\n    const futureEasyGW = gameweeks.find(gw => gw.gameweek > hardestGW.gameweek && gw.averageFDR <= 2.2);\n    \n    const wildcardGW = Math.max(1, hardestGW.gameweek - 1); // Recommend before the difficult period\n    const confidence = futureEasyGW ? Math.min(85, 60 + (hardestGW.averageFDR - 2.5) * 20) : 65;\n    \n    return {\n      chipType: 'wildcard',\n      gameweek: wildcardGW,\n      priority: hardestGW.averageFDR >= 3.2 ? 'high' : 'medium',\n      title: 'Strategic Wildcard Window',\n      description: `Your current squad faces difficult fixtures around GW${hardestGW.gameweek}. Consider wildcarding before this tough period.`,\n      reasoning: [\n        `Difficult period starting GW${hardestGW.gameweek} with average FDR of ${hardestGW.averageFDR.toFixed(1)}`,\n        futureEasyGW ? `Easier fixtures available from GW${futureEasyGW.gameweek} onwards` : 'Opportunity to pivot to better fixture runs',\n        'Wildcard before tough period allows optimal team restructuring',\n        gameweeks[0]?.gameweek <= 19 ? 'Must use one chip before GW19 deadline' : 'Strategic timing for maximum impact'\n      ],\n      confidence\n    };\n  }\n\n  // Enhanced Phase 1 Methods\n\n  private async calculateEnhancedExpectedPoints(player: FPLPlayer, stats?: PlayerAdvanced): Promise<number> {\n    // Use advanced stats if available, otherwise fallback to FPL data\n    if (stats && stats.fixtureAdjustedXG > 0) {\n      // Points from xG (goals) and xA (assists), adjusted for position\n      const goalPoints = stats.fixtureAdjustedXG * this.getGoalPoints(POSITION_MAP[player.element_type]);\n      const assistPoints = stats.fixtureAdjustedXA * 3; // 3 points per assist\n      const minutesPoints = (stats.xMins / 90) * 2; // 2 points for 60+ mins\n      \n      return Math.max(0, Math.round((goalPoints + assistPoints + minutesPoints) * 10) / 10);\n    }\n\n    // Fallback to existing FPL-based calculation\n    const currentGW = 15; // Rough estimate\n    const approxGamesPlayed = Math.max(1, currentGW - 1);\n    const basePPG = player.total_points / approxGamesPlayed;\n    \n    return Math.max(0, Math.round(basePPG * 5 * 10) / 10); // 5 gameweeks\n  }\n\n  private getGoalPoints(position: 'GK' | 'DEF' | 'MID' | 'FWD'): number {\n    switch (position) {\n      case 'GK':\n      case 'DEF': return 6;\n      case 'MID': return 5;\n      case 'FWD': return 4;\n      default: return 4;\n    }\n  }\n\n  private calculateHistoricalVolatility(player: FPLPlayer): number {\n    // Mock volatility based on position and points (real implementation would use gameweek history)\n    const pointsPerGame = player.total_points / Math.max(1, 15);\n    const baseVolatility = {\n      'GK': 2.0,\n      'DEF': 2.5,\n      'MID': 3.5,\n      'FWD': 4.5\n    };\n    \n    const position = POSITION_MAP[player.element_type];\n    const positionVolatility = baseVolatility[position] || 3.0;\n    \n    // Higher scoring players tend to have higher volatility\n    const scoreAdjustment = Math.min(2.0, pointsPerGame * 0.1);\n    \n    return Math.round((positionVolatility + scoreAdjustment) * 10) / 10;\n  }\n\n  private calculateEnhancedGameweekFDRs(\n    players: ProcessedPlayer[], \n    fixtures: FPLFixture[], \n    teams: FPLTeam[],\n    oddsData: MatchOdds[]\n  ): GameweekFDR[] {\n    const gameweekMap = new Map<number, GameweekFDR>();\n    \n    // Initialize gameweeks\n    const currentGW = Math.min(...fixtures.map(f => f.event)) || 1;\n    for (let gw = currentGW; gw <= currentGW + 9; gw++) {\n      gameweekMap.set(gw, {\n        gameweek: gw,\n        totalFDR: 0,\n        averageFDR: 0,\n        difficulty: 'medium' as const,\n        fixtures: []\n      });\n    }\n\n    // Calculate FDR for each player in each gameweek\n    players.forEach(player => {\n      const playerTeamId = player.teamId;\n      const playerFixtures = fixtures.filter(f => \n        f.team_h === playerTeamId || f.team_a === playerTeamId\n      );\n\n      playerFixtures.forEach(fixture => {\n        const gameweek = gameweekMap.get(fixture.event);\n        if (!gameweek) return;\n\n        const isHome = fixture.team_h === playerTeamId;\n        const opponentId = isHome ? fixture.team_a : fixture.team_h;\n        const opponent = teams.find(t => t.id === opponentId);\n        let fdr = isHome ? fixture.team_h_difficulty : fixture.team_a_difficulty;\n\n        // Enhance FDR with odds data if available\n        const odds = oddsData.find(o => o.fixtureId === fixture.id);\n        if (odds) {\n          fdr = this.calculateOddsBasedFDR(odds, isHome);\n        }\n\n        if (opponent) {\n          gameweek.fixtures.push({\n            playerId: player.id,\n            playerName: player.name,\n            opponent: opponent.short_name,\n            isHome,\n            fdr\n          });\n          \n          gameweek.totalFDR += fdr;\n        }\n      });\n    });\n\n    // Calculate averages and difficulty ratings\n    const gameweeks = Array.from(gameweekMap.values()).map(gw => {\n      const fixtureCount = gw.fixtures.length;\n      gw.averageFDR = fixtureCount > 0 ? gw.totalFDR / fixtureCount : 3;\n      \n      // Classify difficulty\n      if (gw.averageFDR <= 2.2) {\n        gw.difficulty = 'easy';\n      } else if (gw.averageFDR >= 3.2) {\n        gw.difficulty = 'hard';\n      } else {\n        gw.difficulty = 'medium';\n      }\n      \n      return gw;\n    });\n\n    return gameweeks.sort((a, b) => a.gameweek - b.gameweek);\n  }\n\n  private calculateOddsBasedFDR(odds: MatchOdds, isHome: boolean): number {\n    // Convert odds to win probability\n    const homeWinProb = 1 / odds.homeWin;\n    const drawProb = 1 / odds.draw;\n    const awayWinProb = 1 / odds.awayWin;\n    \n    // Normalize (remove bookmaker margin)\n    const total = homeWinProb + drawProb + awayWinProb;\n    const normalizedHomeWin = homeWinProb / total;\n    const normalizedAwayWin = awayWinProb / total;\n    \n    // Convert to FPL-style difficulty rating (1-5 scale)\n    const winProb = isHome ? normalizedHomeWin : normalizedAwayWin;\n    \n    // Higher win probability = lower difficulty\n    if (winProb > 0.6) return 1.5; // Very easy\n    if (winProb > 0.45) return 2.5; // Easy\n    if (winProb > 0.35) return 3.0; // Medium\n    if (winProb > 0.25) return 4.0; // Hard\n    return 4.5; // Very hard\n  }\n\n  private async runSquadSimulation(\n    players: ProcessedPlayer[], \n    fixtures: FPLFixture[], \n    oddsData: MatchOdds[]\n  ): Promise<SimulationSummary> {\n    // Prepare fixtures for simulation\n    const gameweekFixtures: GameweekFixture[] = [];\n    \n    fixtures.forEach(fixture => {\n      players.forEach(player => {\n        if (fixture.team_h === player.teamId || fixture.team_a === player.teamId) {\n          const isHome = fixture.team_h === player.teamId;\n          const odds = oddsData.find(o => o.fixtureId === fixture.id);\n          const fdr = isHome ? fixture.team_h_difficulty : fixture.team_a_difficulty;\n          \n          gameweekFixtures.push({\n            gameweek: fixture.event,\n            playerId: player.id,\n            hasFixture: true,\n            odds,\n            fdr,\n            isHome\n          });\n        }\n      });\n    });\n\n    const config: SimulationConfig = {\n      runs: 1000, // Run 1000 simulations for good statistical power\n      gameweeksToSimulate: Array.from(new Set(fixtures.map(f => f.event))).slice(0, 6), // Next 6 GWs\n      strategy: 'current-squad',\n      targetThreshold: players.reduce((sum, p) => sum + (p.expectedPoints || 0), 0), // Target = sum of expected points\n      useOdds: oddsData.length > 0,\n      useAdvancedStats: players.some(p => p.advancedStats)\n    };\n\n    return await this.simulationEngine.simulateSquad(players, gameweekFixtures, config);\n  }\n\n  private async generateEnhancedRecommendations(\n    players: ProcessedPlayer[], \n    gameweeks: GameweekFDR[], \n    simulationSummary: SimulationSummary\n  ): Promise<ChipRecommendation[]> {\n    const recommendations: ChipRecommendation[] = [];\n    \n    // Enhanced Bench Boost with simulation data\n    const benchBoostGW = await this.findOptimalEnhancedBenchBoost(players, gameweeks, simulationSummary);\n    if (benchBoostGW) recommendations.push(benchBoostGW);\n    \n    // Enhanced Triple Captain with volatility consideration\n    const tripleCaptainGW = await this.findOptimalEnhancedTripleCaptain(players, gameweeks, simulationSummary);\n    if (tripleCaptainGW) recommendations.push(tripleCaptainGW);\n    \n    // Other chips with enhanced analysis\n    const wildcardGW = this.findOptimalWildcard(gameweeks);\n    if (wildcardGW) recommendations.push(wildcardGW);\n    \n    const freeHitGW = this.findOptimalFreeHit(gameweeks);\n    if (freeHitGW) recommendations.push(freeHitGW);\n    \n    return recommendations.sort((a, b) => {\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];\n      return priorityDiff !== 0 ? priorityDiff : a.gameweek - b.gameweek;\n    });\n  }\n\n  private async findOptimalEnhancedBenchBoost(\n    players: ProcessedPlayer[], \n    gameweeks: GameweekFDR[], \n    simulationSummary: SimulationSummary\n  ): Promise<ChipRecommendation | null> {\n    const bestGW = gameweeks.reduce((best, current) => \n      current.totalFDR < best.totalFDR ? current : best\n    );\n    \n    if (bestGW.averageFDR > 2.5) return null;\n    \n    // Enhanced confidence using simulation variance\n    const baseConfidence = Math.max(60, Math.min(95, Math.round((3.5 - bestGW.averageFDR) * 30)));\n    const varianceAdjustment = Math.max(-20, Math.min(10, (10 - simulationSummary.variance)));\n    const confidence = Math.max(50, Math.min(100, baseConfidence + varianceAdjustment));\n    \n    // Calculate expected points range from simulation\n    const benchPlayers = players.filter(p => p.isBench);\n    const benchExpectedPoints = benchPlayers.reduce((sum, p) => sum + (p.expectedPoints || 0), 0);\n    const expectedRange: [number, number] = [\n      Math.round(benchExpectedPoints * 0.8),\n      Math.round(benchExpectedPoints * 1.3)\n    ];\n    \n    return {\n      chipType: 'bench-boost',\n      gameweek: bestGW.gameweek,\n      priority: bestGW.averageFDR <= 2.0 ? 'high' : 'medium',\n      title: 'Optimal Bench Boost Window (Enhanced)',\n      description: `Squad simulation shows ${simulationSummary.successRate}% success rate. Average FDR: ${bestGW.averageFDR.toFixed(1)}`,\n      reasoning: [\n        `Monte Carlo analysis: ${simulationSummary.runs} simulations run`,\n        `Expected bench points: ${expectedRange[0]}-${expectedRange[1]}`,\n        `Success probability: ${simulationSummary.successRate}%`,\n        `Squad variance: ${simulationSummary.variance.toFixed(1)} (${simulationSummary.recommendationStrength} recommendation)`\n      ],\n      confidence,\n      expectedPointsRange: expectedRange,\n      successProbability: simulationSummary.successRate,\n      alternativeWindows: gameweeks.filter(gw => gw.averageFDR <= 2.8 && gw.gameweek !== bestGW.gameweek).map(gw => gw.gameweek).slice(0, 2)\n    };\n  }\n\n  private async findOptimalEnhancedTripleCaptain(\n    players: ProcessedPlayer[], \n    gameweeks: GameweekFDR[], \n    simulationSummary: SimulationSummary\n  ): Promise<ChipRecommendation | null> {\n    // Find premium players with high volatility (explosive potential)\n    const premiumPlayers = players\n      .filter(p => p.points > 100 && (p.position === 'FWD' || p.position === 'MID'))\n      .filter(p => (p.volatility || 0) > 3.0) // High volatility for explosive hauls\n      .sort((a, b) => b.points - a.points)\n      .slice(0, 3);\n    \n    if (premiumPlayers.length === 0) return null;\n    \n    type BestOpportunity = { player: ProcessedPlayer; gameweek: number; fdr: number; opponent: string; isHome: boolean };\n    let bestOpportunity: BestOpportunity | null = null;\n    \n    premiumPlayers.forEach(player => {\n      gameweeks.forEach(gw => {\n        const playerFixture = gw.fixtures.find(f => f.playerId === player.id);\n        if (playerFixture && playerFixture.fdr <= 2.5) {\n          if (!bestOpportunity || playerFixture.fdr < bestOpportunity.fdr ||\n              (playerFixture.fdr === bestOpportunity.fdr && (player.volatility || 0) > (bestOpportunity.player.volatility || 0))) {\n            bestOpportunity = {\n              player,\n              gameweek: gw.gameweek,\n              fdr: playerFixture.fdr,\n              opponent: playerFixture.opponent,\n              isHome: playerFixture.isHome\n            };\n          }\n        }\n      });\n    });\n    \n    if (!bestOpportunity) return null;\n    const bo = bestOpportunity as BestOpportunity;\n    \n    const baseConfidence = Math.max(70, Math.min(95, Math.round((3 - bo.fdr) * 25 + (bo.player.points / 10))));\n    const volatilityBonus = Math.min(10, (bo.player.volatility || 0) * 2); // Reward high volatility\n    const confidence = Math.min(100, baseConfidence + volatilityBonus);\n    \n    const expectedRange: [number, number] = [\n      Math.round((bo.player.expectedPoints || 0) * 2.5), // Conservative TC return\n      Math.round((bo.player.expectedPoints || 0) * 4.5)  // Explosive TC return\n    ];\n    \n    return {\n      chipType: 'triple-captain',\n      gameweek: bo.gameweek,\n      priority: bo.fdr <= 1.5 && (bo.player.volatility || 0) > 4.0 ? 'high' : 'medium',\n      title: 'Premium Captain Opportunity (Enhanced)',\n      description: `${bo.player.name}: ${bo.player.volatility?.toFixed(1)} volatility, ${(bo.player.expectedPoints || 0).toFixed(1)} xP vs ${bo.opponent}`,\n      reasoning: [\n        `High volatility (${bo.player.volatility?.toFixed(1)}) suggests explosive potential`,\n        `Favorable fixture (FDR: ${bo.fdr}) vs ${bo.opponent}`,\n        `Season total: ${bo.player.points} points`,\n        `Advanced stats: ${bo.player.advancedStats ? 'Available' : 'Using FPL data'}`\n      ],\n      confidence,\n      expectedPointsRange: expectedRange,\n      successProbability: Math.round(confidence * 0.8), // Success rate slightly lower than confidence\n      alternativeWindows: gameweeks.filter(gw => \n        gw.fixtures.some(f => premiumPlayers.some(p => p.id === f.playerId && f.fdr <= 2.8))\n      ).map(gw => gw.gameweek).slice(0, 2)\n    };\n  }\n\n  private calculateOverallConfidence(\n    simulationSummary: SimulationSummary, \n    oddsAvailable: number, \n    statsAvailable: number\n  ): number {\n    let baseConfidence = 60; // Base confidence without enhanced data\n    \n    // Boost confidence based on data availability\n    if (oddsAvailable > 0) baseConfidence += 15;\n    if (statsAvailable > 0) baseConfidence += 10;\n    \n    // Boost confidence based on simulation consistency\n    if (simulationSummary.recommendationStrength === 'strong') baseConfidence += 15;\n    else if (simulationSummary.recommendationStrength === 'moderate') baseConfidence += 5;\n    \n    // Adjust based on simulation variance (lower variance = higher confidence)\n    const varianceAdjustment = Math.max(-10, Math.min(10, (8 - simulationSummary.variance)));\n    \n    return Math.max(50, Math.min(100, Math.round(baseConfidence + varianceAdjustment)));\n  }\n\n  private findOptimalFreeHit(gameweeks: GameweekFDR[]): ChipRecommendation | null {\n    // Look for gameweeks with few fixtures (blank gameweeks) or differential opportunities\n    const lightFixtureGWs = gameweeks.filter(gw => gw.fixtures.length < 10); // Less than 10 player fixtures\n    \n    if (lightFixtureGWs.length === 0) {\n      // No blank gameweeks, suggest holding\n      const midSeasonGW = gameweeks[Math.floor(gameweeks.length / 2)];\n      return {\n        chipType: 'free-hit',\n        gameweek: midSeasonGW?.gameweek || 15,\n        priority: 'low',\n        title: 'Consider Holding Free Hit',\n        description: 'No obvious blank gameweeks detected. Consider saving Free Hit for a better opportunity later in the season.',\n        reasoning: [\n          'No significant blank gameweeks in the analyzed period',\n          'Current squad has reasonable fixture coverage',\n          'Free Hit is most valuable during blank/double gameweeks',\n          'Can reassess when fixtures become clearer'\n        ],\n        confidence: 60\n      };\n    }\n    \n    const bestBlankGW = lightFixtureGWs[0];\n    const confidence = Math.max(50, Math.min(75, 90 - bestBlankGW.fixtures.length * 5));\n    \n    return {\n      chipType: 'free-hit',\n      gameweek: bestBlankGW.gameweek,\n      priority: bestBlankGW.fixtures.length < 8 ? 'medium' : 'low',\n      title: 'Potential Free Hit Opportunity',\n      description: `Limited fixtures in GW${bestBlankGW.gameweek} with only ${bestBlankGW.fixtures.length} of your players having games. Consider Free Hit strategy.`,\n      reasoning: [\n        `Only ${bestBlankGW.fixtures.length} players have fixtures this gameweek`,\n        'Free Hit allows access to players from well-fixtured teams',\n        'Opportunity for differential captain choices',\n        bestBlankGW.fixtures.length < 8 ? 'Significant blank gameweek' : 'Moderate fixture reduction'\n      ],\n      confidence\n    };\n  }\n}\n","size_bytes":36032},"server/services/competitiveIntelligenceEngine.ts":{"content":"/**\n * CompetitiveIntelligenceEngine - Phase 2 Enhancement\n * \n * Advanced competitive intelligence engine that combines rival analysis,\n * meta trends, and market inefficiencies to provide strategic recommendations.\n */\n\nimport { RivalAnalysisService } from './rivalAnalysisService';\nimport { MLPredictionEngine } from './mlPredictionEngine';\nimport { HistoricalDataService } from './historicalDataService';\nimport { CompetitiveIntelligence, RivalAnalysis, ProcessedPlayer } from '@shared/schema';\n\ninterface CompetitiveStrategy {\n  type: 'template' | 'differential' | 'contrarian' | 'balanced';\n  description: string;\n  riskLevel: 'low' | 'medium' | 'high';\n  expectedReturn: number;\n  confidence: number;\n  recommendations: string[];\n}\n\ninterface MetaShift {\n  trend: string;\n  impact: 'major' | 'moderate' | 'minor';\n  timeframe: 'immediate' | 'short-term' | 'long-term';\n  affectedPlayers: Array<{\n    playerId: number;\n    playerName: string;\n    impactType: 'positive' | 'negative';\n    magnitude: number;\n  }>;\n}\n\nexport class CompetitiveIntelligenceEngine {\n  private static instance: CompetitiveIntelligenceEngine;\n  private rivalAnalysisService: RivalAnalysisService;\n  private mlPredictionEngine: MLPredictionEngine;\n  private historicalDataService: HistoricalDataService;\n  private cache = new Map<string, any>();\n  private cacheExpiry = new Map<string, number>();\n  private readonly CACHE_DURATION = 45 * 60 * 1000; // 45 minutes\n\n  private constructor() {\n    this.rivalAnalysisService = RivalAnalysisService.getInstance();\n    this.mlPredictionEngine = MLPredictionEngine.getInstance();\n    this.historicalDataService = HistoricalDataService.getInstance();\n  }\n\n  public static getInstance(): CompetitiveIntelligenceEngine {\n    if (!CompetitiveIntelligenceEngine.instance) {\n      CompetitiveIntelligenceEngine.instance = new CompetitiveIntelligenceEngine();\n    }\n    return CompetitiveIntelligenceEngine.instance;\n  }\n\n  /**\n   * Generate comprehensive competitive intelligence report\n   */\n  async generateIntelligenceReport(userSquad: ProcessedPlayer[], targetGameweeks: number = 5): Promise<{\n    competitiveIntelligence: CompetitiveIntelligence;\n    recommendedStrategies: CompetitiveStrategy[];\n    metaShifts: MetaShift[];\n    transferTargets: Array<{\n      playerId: number;\n      playerName: string;\n      reason: string;\n      priority: 'high' | 'medium' | 'low';\n      confidence: number;\n    }>;\n  }> {\n    const cacheKey = `intelligence_report_${userSquad.map(p => p.id).join(',')}_${targetGameweeks}`;\n    \n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    try {\n      // Gather competitive intelligence\n      const competitiveIntelligence = await this.rivalAnalysisService.getCompetitiveIntelligence();\n      \n      // Generate strategic recommendations\n      const recommendedStrategies = await this.generateStrategicRecommendations(\n        competitiveIntelligence, \n        userSquad\n      );\n      \n      // Identify meta shifts\n      const metaShifts = await this.identifyMetaShifts(competitiveIntelligence);\n      \n      // Find optimal transfer targets\n      const transferTargets = await this.findOptimalTransferTargets(\n        competitiveIntelligence, \n        userSquad, \n        targetGameweeks\n      );\n\n      const report = {\n        competitiveIntelligence,\n        recommendedStrategies,\n        metaShifts,\n        transferTargets\n      };\n\n      // Cache the report\n      this.cache.set(cacheKey, report);\n      this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_DURATION);\n      \n      return report;\n    } catch (error) {\n      console.error('Failed to generate intelligence report:', error);\n      throw new Error('Competitive intelligence report generation failed');\n    }\n  }\n\n  /**\n   * Generate strategic recommendations based on competitive analysis\n   */\n  private async generateStrategicRecommendations(\n    intelligence: CompetitiveIntelligence, \n    userSquad: ProcessedPlayer[]\n  ): Promise<CompetitiveStrategy[]> {\n    const strategies: CompetitiveStrategy[] = [];\n\n    // Template Strategy - Follow the meta\n    const templateStrategy: CompetitiveStrategy = {\n      type: 'template',\n      description: 'Follow proven template picks and popular transfers among top managers',\n      riskLevel: 'low',\n      expectedReturn: 75,\n      confidence: 85,\n      recommendations: [\n        ...intelligence.metaTrends.popularPicks.slice(0, 3).map(pick => \n          `Consider ${pick.playerName} (${pick.ownership}% ownership, ${pick.trend} trend)`\n        ),\n        'Align with proven chip timing from top managers',\n        'Focus on fixtures and form over differentials'\n      ]\n    };\n\n    // Differential Strategy - Find undervalued players\n    const differentialStrategy: CompetitiveStrategy = {\n      type: 'differential',\n      description: 'Target undervalued players before they become popular',\n      riskLevel: 'medium',\n      expectedReturn: 90,\n      confidence: 70,\n      recommendations: [\n        ...intelligence.metaTrends.emergingPlayers.slice(0, 2).map(player =>\n          `Early move to ${player.playerName} (${player.ownershipGrowth}% growth expected)`\n        ),\n        ...intelligence.marketInefficiencies.filter(m => m.opportunity === 'undervalued').slice(0, 2).map(player =>\n          `${player.playerName} appears undervalued (${player.confidence}% confidence)`\n        ),\n        'Use chips in non-template gameweeks for maximum differential'\n      ]\n    };\n\n    // Contrarian Strategy - Go against the grain\n    const contrarianStrategy: CompetitiveStrategy = {\n      type: 'contrarian',\n      description: 'Fade popular picks and target overlooked opportunities',\n      riskLevel: 'high',\n      expectedReturn: 110,\n      confidence: 60,\n      recommendations: [\n        'Avoid template players with high ownership',\n        'Target players being transferred out by top managers',\n        'Use unpopular chip combinations',\n        'Focus on fixtures over form for contrarian picks'\n      ]\n    };\n\n    // Balanced Strategy - Mix template and differential\n    const balancedStrategy: CompetitiveStrategy = {\n      type: 'balanced',\n      description: 'Combine template security with strategic differentials',\n      riskLevel: 'medium',\n      expectedReturn: 82,\n      confidence: 80,\n      recommendations: [\n        'Core of template players for security',\n        '2-3 differential picks for upside',\n        'Strategic chip timing based on fixture analysis',\n        'Monitor emerging trends for early moves'\n      ]\n    };\n\n    strategies.push(templateStrategy, differentialStrategy, contrarianStrategy, balancedStrategy);\n\n    // Rank strategies by expected value and user's current squad composition\n    return this.rankStrategiesByFit(strategies, userSquad, intelligence);\n  }\n\n  /**\n   * Identify significant meta shifts in the FPL landscape\n   */\n  private async identifyMetaShifts(intelligence: CompetitiveIntelligence): Promise<MetaShift[]> {\n    const shifts: MetaShift[] = [];\n\n    // Analyze ownership trends for significant shifts\n    const risingPlayers = intelligence.metaTrends.popularPicks.filter(p => p.trend === 'rising');\n    if (risingPlayers.length > 5) {\n      shifts.push({\n        trend: 'Mass template convergence',\n        impact: 'major',\n        timeframe: 'immediate',\n        affectedPlayers: risingPlayers.slice(0, 5).map(p => ({\n          playerId: p.playerId,\n          playerName: p.playerName,\n          impactType: 'positive',\n          magnitude: p.ownership\n        }))\n      });\n    }\n\n    // Analyze chip usage patterns\n    const unusualChipPatterns = intelligence.rivalInsights.chipUsagePatterns.filter(\n      pattern => pattern.optimalGameweeks.length > 0 && pattern.averageReturn > 70\n    );\n    if (unusualChipPatterns.length > 0) {\n      shifts.push({\n        trend: 'Chip timing optimization',\n        impact: 'moderate',\n        timeframe: 'short-term',\n        affectedPlayers: [] // Affects strategy rather than specific players\n      });\n    }\n\n    // Analyze market inefficiencies for trend shifts\n    const undervaluedCount = intelligence.marketInefficiencies.filter(m => m.opportunity === 'undervalued').length;\n    if (undervaluedCount > 8) {\n      shifts.push({\n        trend: 'Market inefficiency spike',\n        impact: 'moderate',\n        timeframe: 'short-term',\n        affectedPlayers: intelligence.marketInefficiencies\n          .filter(m => m.opportunity === 'undervalued')\n          .slice(0, 3)\n          .map(m => ({\n            playerId: m.playerId,\n            playerName: m.playerName,\n            impactType: 'positive',\n            magnitude: m.confidence\n          }))\n      });\n    }\n\n    return shifts;\n  }\n\n  /**\n   * Find optimal transfer targets based on competitive intelligence\n   */\n  private async findOptimalTransferTargets(\n    intelligence: CompetitiveIntelligence, \n    userSquad: ProcessedPlayer[], \n    targetGameweeks: number\n  ): Promise<Array<{\n    playerId: number;\n    playerName: string;\n    reason: string;\n    priority: 'high' | 'medium' | 'low';\n    confidence: number;\n  }>> {\n    const targets: any[] = [];\n    const userPlayerIds = new Set(userSquad.map(p => p.id));\n\n    // High priority: Emerging players with strong momentum\n    intelligence.metaTrends.emergingPlayers.forEach(player => {\n      if (!userPlayerIds.has(player.playerId)) {\n        targets.push({\n          playerId: player.playerId,\n          playerName: player.playerName,\n          reason: `Emerging pick: ${player.reasons.join(', ')}`,\n          priority: 'high' as const,\n          confidence: Math.min(95, 70 + player.ownershipGrowth)\n        });\n      }\n    });\n\n    // Medium priority: Undervalued market inefficiencies\n    intelligence.marketInefficiencies\n      .filter(m => m.opportunity === 'undervalued' && !userPlayerIds.has(m.playerId))\n      .forEach(player => {\n        targets.push({\n          playerId: player.playerId,\n          playerName: player.playerName,\n          reason: `Undervalued by market`,\n          priority: 'medium' as const,\n          confidence: player.confidence\n        });\n      });\n\n    // Low priority: Template picks you're missing\n    intelligence.metaTrends.popularPicks\n      .filter(p => !p.differential && !userPlayerIds.has(p.playerId))\n      .slice(0, 5)\n      .forEach(player => {\n        targets.push({\n          playerId: player.playerId,\n          playerName: player.playerName,\n          reason: `Popular template pick (${player.ownership}% ownership)`,\n          priority: 'low' as const,\n          confidence: 60 + (player.ownership / 2)\n        });\n      });\n\n    // Sort by priority and confidence\n    return targets\n      .sort((a, b) => {\n        const priorityOrder: Record<string, number> = { high: 3, medium: 2, low: 1 };\n        const aPriority = priorityOrder[a.priority] || 0;\n        const bPriority = priorityOrder[b.priority] || 0;\n        if (aPriority !== bPriority) {\n          return bPriority - aPriority;\n        }\n        return b.confidence - a.confidence;\n      })\n      .slice(0, 10); // Return top 10 targets\n  }\n\n  /**\n   * Rank strategies by how well they fit the user's current situation\n   */\n  private rankStrategiesByFit(\n    strategies: CompetitiveStrategy[], \n    userSquad: ProcessedPlayer[], \n    intelligence: CompetitiveIntelligence\n  ): CompetitiveStrategy[] {\n    return strategies.map(strategy => {\n      // Adjust confidence based on user's current squad composition\n      let fitScore = strategy.confidence;\n      \n      // If user already has many template players, differential strategies become more attractive\n      const templatePlayerCount = userSquad.filter(player => {\n        return intelligence.metaTrends.popularPicks.some(popular => \n          popular.playerId === player.id && popular.ownership > 20\n        );\n      }).length;\n      \n      if (strategy.type === 'differential' && templatePlayerCount > 8) {\n        fitScore += 10;\n      } else if (strategy.type === 'template' && templatePlayerCount < 6) {\n        fitScore += 15;\n      }\n\n      return {\n        ...strategy,\n        confidence: Math.min(95, fitScore)\n      };\n    }).sort((a, b) => b.confidence - a.confidence);\n  }\n\n  /**\n   * Get strategic insights for specific players\n   */\n  async getPlayerStrategicInsights(playerId: number): Promise<{\n    competitivePosition: 'template' | 'emerging' | 'differential' | 'contrarian';\n    ownershipTrend: 'rising' | 'falling' | 'stable';\n    topManagerUsage: number;\n    strategicValue: 'high' | 'medium' | 'low';\n    recommendations: string[];\n  }> {\n    const intelligence = await this.rivalAnalysisService.getCompetitiveIntelligence();\n    \n    // Find player in various intelligence categories\n    const popularPick = intelligence.metaTrends.popularPicks.find(p => p.playerId === playerId);\n    const emergingPick = intelligence.metaTrends.emergingPlayers.find(p => p.playerId === playerId);\n    const inefficiency = intelligence.marketInefficiencies.find(p => p.playerId === playerId);\n    \n    // Determine competitive position\n    let competitivePosition: 'template' | 'emerging' | 'differential' | 'contrarian' = 'contrarian';\n    if (popularPick && !popularPick.differential) competitivePosition = 'template';\n    else if (emergingPick) competitivePosition = 'emerging';\n    else if (popularPick && popularPick.differential) competitivePosition = 'differential';\n\n    // Count top manager usage\n    const topManagerUsage = intelligence.rivalInsights.topManagerMoves\n      .filter(manager => \n        manager.transfers.playersIn.some(transfer => transfer.playerId === playerId)\n      ).length;\n\n    // Determine strategic value\n    let strategicValue: 'high' | 'medium' | 'low' = 'low';\n    if (emergingPick && emergingPick.ownershipGrowth > 15) strategicValue = 'high';\n    else if (topManagerUsage > 3 || (popularPick && popularPick.trend === 'rising')) strategicValue = 'medium';\n\n    // Generate recommendations\n    const recommendations: string[] = [];\n    if (competitivePosition === 'emerging') {\n      recommendations.push('Early mover advantage - consider before ownership increases');\n    }\n    if (inefficiency && inefficiency.opportunity === 'undervalued') {\n      recommendations.push(`Market inefficiency detected - ${inefficiency.confidence}% confidence`);\n    }\n    if (topManagerUsage > 5) {\n      recommendations.push('High top manager adoption - strong template candidate');\n    }\n\n    return {\n      competitivePosition,\n      ownershipTrend: popularPick?.trend || emergingPick ? 'rising' : 'stable',\n      topManagerUsage,\n      strategicValue,\n      recommendations\n    };\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  private isCacheValid(key: string): boolean {\n    const expiry = this.cacheExpiry.get(key);\n    return expiry ? Date.now() < expiry : false;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n    this.cacheExpiry.clear();\n    console.log('Competitive intelligence cache cleared');\n  }\n\n  /**\n   * Get engine information for debugging\n   */\n  public getEngineInfo(): { \n    available: boolean; \n    cacheSize: number;\n    capabilities: string[];\n  } {\n    return {\n      available: true,\n      cacheSize: this.cache.size,\n      capabilities: [\n        'competitive-intelligence', \n        'rival-analysis', \n        'meta-trends', \n        'strategic-recommendations',\n        'market-inefficiencies'\n      ]\n    };\n  }\n}","size_bytes":15532},"server/services/fplApi.ts":{"content":"import {\n  type FPLPlayer,\n  type FPLTeam,\n  type FPLFixture,\n  type FPLUserSquad\n} from \"@shared/schema\";\n\nconst FPL_BASE_URL = 'https://fantasy.premierleague.com/api';\n\ninterface FPLBootstrapResponse {\n  events: any[];\n  game_settings: any;\n  phases: any[];\n  teams: FPLTeam[];\n  total_players: number;\n  elements: FPLPlayer[];\n  element_stats: any[];\n  element_types: {\n    id: number;\n    plural_name: string;\n    plural_name_short: string;\n    singular_name: string;\n    singular_name_short: string;\n    squad_select: number;\n    squad_min_play: number;\n    squad_max_play: number;\n    ui_shirt_specific: boolean;\n    sub_positions_locked: any[];\n    element_count: number;\n  }[];\n}\n\nexport class FPLApiService {\n  private static instance: FPLApiService;\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\n  private readonly cacheExpiry = 5 * 60 * 1000; // 5 minutes\n\n  public static getInstance(): FPLApiService {\n    if (!FPLApiService.instance) {\n      FPLApiService.instance = new FPLApiService();\n    }\n    return FPLApiService.instance;\n  }\n\n  private async fetchWithCache<T>(url: string, cacheKey: string): Promise<T> {\n    const cached = this.cache.get(cacheKey);\n    const now = Date.now();\n    \n    if (cached && (now - cached.timestamp) < this.cacheExpiry) {\n      return cached.data as T;\n    }\n\n    try {\n      const response = await fetch(url, {\n        headers: {\n          'User-Agent': 'FPL-Chip-Strategy-Architect/1.0',\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`FPL API returned ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      this.cache.set(cacheKey, { data, timestamp: now });\n      return data as T;\n    } catch (error) {\n      console.error(`FPL API Error for ${url}:`, error);\n      throw new Error(`Failed to fetch data from FPL API: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async getBootstrapData(): Promise<FPLBootstrapResponse> {\n    return this.fetchWithCache<FPLBootstrapResponse>(\n      `${FPL_BASE_URL}/bootstrap-static/`,\n      'bootstrap'\n    );\n  }\n\n  async getFixtures(): Promise<FPLFixture[]> {\n    return this.fetchWithCache<FPLFixture[]>(\n      `${FPL_BASE_URL}/fixtures/`,\n      'fixtures'\n    );\n  }\n\n  async getUserSquad(managerId: number, gameweek?: number): Promise<FPLUserSquad> {\n    const currentGW = gameweek || await this.getCurrentGameweek();\n    const cacheKey = `squad-${managerId}-${currentGW}`;\n    \n    return this.fetchWithCache<FPLUserSquad>(\n      `${FPL_BASE_URL}/entry/${managerId}/event/${currentGW}/picks/`,\n      cacheKey\n    );\n  }\n\n  async getUserHistory(managerId: number): Promise<{\n    current: Array<{\n      event: number;\n      points: number;\n      total_points: number;\n      rank: number;\n      overall_rank: number;\n      bank: number;\n      value: number;\n      event_transfers: number;\n      event_transfers_cost: number;\n      points_on_bench: number;\n    }>;\n    past: any[];\n    chips: Array<{\n      name: string;\n      time: string;\n      event: number;\n    }>;\n  }> {\n    return this.fetchWithCache(\n      `${FPL_BASE_URL}/entry/${managerId}/history/`,\n      `history-${managerId}`\n    );\n  }\n\n  async getUserInfo(managerId: number): Promise<{ name: string; player_first_name: string; player_last_name: string }> {\n    return this.fetchWithCache<{ name: string; player_first_name: string; player_last_name: string }>(\n      `${FPL_BASE_URL}/entry/${managerId}/`,\n      `user-${managerId}`\n    );\n  }\n\n  async getCurrentGameweek(): Promise<number> {\n    const bootstrap = await this.getBootstrapData();\n    const currentEvent = bootstrap.events.find(event => event.is_current);\n    return currentEvent?.id || 1;\n  }\n\n  async getUpcomingFixtures(gameweeksAhead: number = 10): Promise<FPLFixture[]> {\n    const fixtures = await this.getFixtures();\n    const currentGW = await this.getCurrentGameweek();\n    \n    return fixtures.filter(fixture => \n      fixture.event >= currentGW && \n      fixture.event <= currentGW + gameweeksAhead &&\n      !fixture.finished\n    );\n  }\n\n  async computeFreeTransfers(managerId: number): Promise<number> {\n    try {\n      const history = await this.getUserHistory(managerId);\n      const currentGW = await this.getCurrentGameweek();\n      \n      // Find current and previous gameweek data\n      const currentGWData = history.current.find(gw => gw.event === currentGW);\n      const previousGWData = history.current.find(gw => gw.event === currentGW - 1);\n      \n      if (!currentGWData) {\n        return 1; // Default to 1 free transfer if no data\n      }\n      \n      // If transfers were made this week and cost points, then no free transfers left\n      if (currentGWData.event_transfers_cost > 0) {\n        return 0;\n      }\n      \n      // Calculate free transfers: start with 1, add 1 if no transfers were made last GW\n      let freeTransfers = 1;\n      if (previousGWData && previousGWData.event_transfers === 0) {\n        freeTransfers = Math.min(2, freeTransfers + 1); // Max 2 free transfers\n      }\n      \n      return freeTransfers;\n    } catch (error) {\n      console.warn('Could not compute free transfers, defaulting to 1:', error);\n      return 1; // Default fallback\n    }\n  }\n\n  async getPlayerExpectedPoints(playerId: number, gameweeksAhead: number = 5): Promise<number> {\n    try {\n      const bootstrap = await this.getBootstrapData();\n      const player = bootstrap.elements.find((p) => p.id === playerId);\n      if (!player) return 0;\n\n      // Base PPG from season-to-date. Use current GW to avoid overestimating early.\n      const currentGW = await this.getCurrentGameweek();\n      const approxGamesPlayed = Math.max(1, currentGW - 1);\n      const basePPG = player.total_points / approxGamesPlayed;\n\n      // Weight upcoming fixtures by FDR for the player's team.\n      const fixtures = await this.getUpcomingFixtures(gameweeksAhead);\n      const teamFixtures = fixtures.filter(\n        (f) => f.team_h === player.team || f.team_a === player.team,\n      );\n\n      // Convert FDR (1..5) into a modest multiplier around 1.0\n      // Easier fixture (1) → ~1.3x, Harder (5) → ~0.7x\n      const fdrWeight = (fdr: number) => Math.max(0.6, Math.min(1.4, 1 + (3 - fdr) * 0.15));\n\n      const totalWeight = teamFixtures\n        .slice(0, gameweeksAhead)\n        .reduce((sum, f) => {\n          const fdr = player.team === f.team_h ? f.team_h_difficulty : f.team_a_difficulty;\n          return sum + fdrWeight(fdr);\n        }, 0);\n\n      const expected = basePPG * (totalWeight || gameweeksAhead);\n      return Math.max(0, Math.round(expected * 10) / 10);\n    } catch (error) {\n      console.warn(`Could not calculate expected points for player ${playerId}:`, error);\n      return 0;\n    }\n  }\n\n  async getNextDeadline(): Promise<string> {\n    try {\n      const bootstrap = await this.getBootstrapData();\n      const nextEvent = bootstrap.events.find(event => event.is_next);\n      \n      if (nextEvent && nextEvent.deadline_time) {\n        return nextEvent.deadline_time;\n      }\n      \n      // Fallback: find current or next upcoming event\n      const upcomingEvent = bootstrap.events.find(event => !event.finished) || bootstrap.events[0];\n      return upcomingEvent?.deadline_time || new Date().toISOString();\n    } catch (error) {\n      console.warn('Could not get next deadline:', error);\n      return new Date().toISOString();\n    }\n  }\n\n  async getAllPlayersWithExpectedPoints(gameweeksAhead: number = 5): Promise<Array<FPLPlayer & { expectedPoints: number }>> {\n    const bootstrap = await this.getBootstrapData();\n    \n    return Promise.all(\n      bootstrap.elements.map(async (player) => ({\n        ...player,\n        expectedPoints: await this.getPlayerExpectedPoints(player.id, gameweeksAhead)\n      }))\n    );\n  }\n\n  // Clear cache (useful for testing or forcing fresh data)\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  // Clear specific cache entry\n  clearCacheEntry(key: string): void {\n    this.cache.delete(key);\n  }\n}\n","size_bytes":8077},"server/services/historicalDataService.ts":{"content":"/**\n * HistoricalDataService - Phase 2 Enhancement\n * \n * Collects and processes historical FPL data for machine learning training.\n * Maintains historical performance data across multiple seasons for pattern recognition.\n */\n\nimport { FPLApiService } from './fplApi';\nimport { HistoricalPlayerData, MLModelPerformance } from '@shared/schema';\n\ninterface HistoricalDataProvider {\n  fetchPlayerHistory(playerId: number, seasons: string[]): Promise<HistoricalPlayerData[]>;\n  fetchSeasonData(season: string): Promise<any>;\n}\n\nclass MockHistoricalDataProvider implements HistoricalDataProvider {\n  async fetchPlayerHistory(playerId: number, seasons: string[]): Promise<HistoricalPlayerData[]> {\n    // Mock historical data for demonstration\n    return seasons.map(season => ({\n      playerId,\n      playerName: `Player ${playerId}`,\n      season,\n      gameweeks: Array.from({ length: 38 }, (_, i) => ({\n        gameweek: i + 1,\n        points: Math.max(0, Math.round(Math.random() * 15 + 2)), // 2-17 points\n        minutes: Math.random() > 0.8 ? 0 : Math.round(Math.random() * 90 + 10), // 0 or 10-90 mins\n        goals: Math.random() > 0.85 ? Math.floor(Math.random() * 3) : 0,\n        assists: Math.random() > 0.9 ? Math.floor(Math.random() * 2) : 0,\n        cleanSheets: Math.random() > 0.7 ? 1 : 0,\n        saves: Math.floor(Math.random() * 8),\n        penalties: Math.random() > 0.95 ? 1 : 0,\n        yellowCards: Math.random() > 0.9 ? 1 : 0,\n        redCards: Math.random() > 0.98 ? 1 : 0,\n        ownGoals: Math.random() > 0.99 ? 1 : 0,\n        price: 4.5 + Math.random() * 8, // £4.5-12.5m\n        ownership: Math.random() * 50, // 0-50% ownership\n        captaincy: Math.random() * 20, // 0-20% captaincy\n        fixture: {\n          opponent: `Team ${Math.floor(Math.random() * 20) + 1}`,\n          isHome: Math.random() > 0.5,\n          difficulty: Math.floor(Math.random() * 5) + 1\n        }\n      })),\n      aggregatedStats: {\n        totalPoints: 0, // Will be calculated\n        avgPointsPerGame: 0,\n        pointsPerMillion: 0,\n        volatility: 0,\n        consistency: 0\n      }\n    }));\n  }\n\n  async fetchSeasonData(season: string): Promise<any> {\n    return {\n      season,\n      totalGameweeks: 38,\n      avgPointsPerGameweek: 60,\n      topScorer: { playerId: 1, points: 285 },\n      metadata: {\n        lastUpdated: new Date().toISOString()\n      }\n    };\n  }\n}\n\nexport class HistoricalDataService {\n  private static instance: HistoricalDataService;\n  private provider: HistoricalDataProvider;\n  private cache = new Map<string, HistoricalPlayerData[]>();\n  private cacheExpiry = new Map<string, number>();\n  private readonly CACHE_DURATION = 24 * 60 * 60 * 1000; // 24 hours\n\n  private constructor() {\n    // Use mock provider for development, real provider in production\n    this.provider = new MockHistoricalDataProvider();\n  }\n\n  public static getInstance(): HistoricalDataService {\n    if (!HistoricalDataService.instance) {\n      HistoricalDataService.instance = new HistoricalDataService();\n    }\n    return HistoricalDataService.instance;\n  }\n\n  /**\n   * Get historical data for multiple players across specified seasons\n   */\n  async getPlayersHistory(playerIds: number[], seasons: string[] = ['2023-24', '2022-23']): Promise<Map<number, HistoricalPlayerData[]>> {\n    const results = new Map<number, HistoricalPlayerData[]>();\n\n    for (const playerId of playerIds) {\n      const cacheKey = `${playerId}_${seasons.join(',')}`;\n      \n      // Check cache first\n      if (this.isCacheValid(cacheKey)) {\n        const cached = this.cache.get(cacheKey);\n        if (cached) {\n          results.set(playerId, cached);\n          continue;\n        }\n      }\n\n      try {\n        const history = await this.provider.fetchPlayerHistory(playerId, seasons);\n        \n        // Process and enrich the historical data\n        const processedHistory = this.processHistoricalData(history);\n        \n        // Cache the results\n        this.cache.set(cacheKey, processedHistory);\n        this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_DURATION);\n        \n        results.set(playerId, processedHistory);\n      } catch (error) {\n        console.error(`Failed to fetch history for player ${playerId}:`, error);\n        // Return empty history on error\n        results.set(playerId, []);\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Process raw historical data to calculate derived metrics\n   */\n  private processHistoricalData(rawData: HistoricalPlayerData[]): HistoricalPlayerData[] {\n    return rawData.map(seasonData => {\n      const gameweeks = seasonData.gameweeks;\n      const playedGameweeks = gameweeks.filter(gw => gw.minutes > 0);\n      \n      if (playedGameweeks.length === 0) {\n        return seasonData; // No data to process\n      }\n\n      // Calculate aggregated statistics\n      const totalPoints = gameweeks.reduce((sum, gw) => sum + gw.points, 0);\n      const avgPointsPerGame = playedGameweeks.length > 0 ? totalPoints / playedGameweeks.length : 0;\n      const avgPrice = gameweeks.reduce((sum, gw) => sum + gw.price, 0) / gameweeks.length;\n      const pointsPerMillion = avgPrice > 0 ? avgPointsPerGame / avgPrice : 0;\n\n      // Calculate volatility (standard deviation of points)\n      const pointsVariance = playedGameweeks.reduce((sum, gw) => {\n        return sum + Math.pow(gw.points - avgPointsPerGame, 2);\n      }, 0) / playedGameweeks.length;\n      const volatility = Math.sqrt(pointsVariance);\n\n      // Calculate consistency (inverse of coefficient of variation)\n      const consistency = avgPointsPerGame > 0 ? 100 - (volatility / avgPointsPerGame * 100) : 0;\n\n      return {\n        ...seasonData,\n        aggregatedStats: {\n          totalPoints,\n          avgPointsPerGame,\n          pointsPerMillion,\n          volatility,\n          consistency: Math.max(0, Math.min(100, consistency))\n        }\n      };\n    });\n  }\n\n  /**\n   * Get training features for ML model from historical data\n   */\n  async getTrainingFeatures(playerIds: number[], targetGameweeks: number = 5): Promise<Array<{\n    playerId: number;\n    features: number[];\n    target: number; // actual points scored in target period\n    metadata: any;\n  }>> {\n    const historyMap = await this.getPlayersHistory(playerIds);\n    const trainingData: Array<any> = [];\n\n    for (const [playerId, history] of Array.from(historyMap.entries())) {\n      for (const seasonData of history) {\n        const gameweeks = seasonData.gameweeks;\n        \n        // Create sliding window training examples\n        for (let i = 10; i < gameweeks.length - targetGameweeks; i++) {\n          const lookbackWindow = gameweeks.slice(i - 10, i); // Look at previous 10 gameweeks\n          const targetWindow = gameweeks.slice(i, i + targetGameweeks); // Predict next 5 gameweeks\n\n          const features = this.extractFeatures(lookbackWindow, seasonData);\n          const target = targetWindow.reduce((sum: number, gw: any) => sum + gw.points, 0) / targetGameweeks;\n\n          trainingData.push({\n            playerId,\n            features,\n            target,\n            metadata: {\n              season: seasonData.season,\n              startGameweek: i,\n              endGameweek: i + targetGameweeks,\n              position: this.inferPosition(seasonData),\n              avgPrice: lookbackWindow.reduce((sum, gw) => sum + gw.price, 0) / lookbackWindow.length\n            }\n          });\n        }\n      }\n    }\n\n    return trainingData;\n  }\n\n  /**\n   * Extract ML features from gameweek data\n   */\n  private extractFeatures(gameweeks: any[], seasonData: HistoricalPlayerData): number[] {\n    const recentGames = gameweeks.slice(-5); // Last 5 games\n    const allGames = gameweeks;\n\n    return [\n      // Form features (recent performance)\n      recentGames.reduce((sum, gw) => sum + gw.points, 0) / recentGames.length, // avg recent points\n      recentGames.reduce((sum, gw) => sum + gw.minutes, 0) / recentGames.length, // avg recent minutes\n      recentGames.filter(gw => gw.points > 6).length / recentGames.length, // recent return rate\n      \n      // Season features (overall performance)\n      allGames.reduce((sum: number, gw: any) => sum + gw.points, 0) / allGames.length, // avg season points\n      allGames.reduce((sum, gw) => sum + gw.minutes, 0) / allGames.length, // avg season minutes\n      seasonData.aggregatedStats.volatility, // volatility\n      seasonData.aggregatedStats.consistency, // consistency\n      \n      // Price and ownership features\n      recentGames[recentGames.length - 1]?.price || 0, // current price\n      recentGames[recentGames.length - 1]?.ownership || 0, // current ownership\n      \n      // Fixture difficulty (simplified)\n      recentGames.reduce((sum, gw) => sum + gw.fixture.difficulty, 0) / recentGames.length, // avg recent FDR\n      \n      // Goal/assist potential\n      allGames.reduce((sum, gw) => sum + gw.goals, 0) / allGames.length, // avg goals\n      allGames.reduce((sum, gw) => sum + gw.assists, 0) / allGames.length, // avg assists\n    ];\n  }\n\n  /**\n   * Infer player position from historical data\n   */\n  private inferPosition(seasonData: HistoricalPlayerData): string {\n    const gameweeks = seasonData.gameweeks;\n    const avgGoals = gameweeks.reduce((sum, gw) => sum + gw.goals, 0) / gameweeks.length;\n    const avgSaves = gameweeks.reduce((sum, gw) => sum + gw.saves, 0) / gameweeks.length;\n    const avgCleanSheets = gameweeks.reduce((sum, gw) => sum + gw.cleanSheets, 0) / gameweeks.length;\n\n    if (avgSaves > 1) return 'GK';\n    if (avgCleanSheets > 0.3) return 'DEF';\n    if (avgGoals > 0.2) return 'FWD';\n    return 'MID';\n  }\n\n  /**\n   * Get model performance metrics\n   */\n  async getModelPerformance(): Promise<MLModelPerformance[]> {\n    // Mock performance data - in real implementation, this would track actual model performance\n    return [\n      {\n        modelId: 'points-predictor-v1',\n        modelType: 'regression',\n        accuracy: 0.73,\n        precision: 0.71,\n        recall: 0.69,\n        f1Score: 0.70,\n        lastTrained: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        trainingDataSize: 15420,\n        features: ['form', 'fixtures', 'price', 'ownership', 'historical', 'position', 'volatility'],\n        validationResults: {\n          meanAbsoluteError: 2.1,\n          rootMeanSquareError: 3.2,\n          r2Score: 0.67\n        }\n      }\n    ];\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  private isCacheValid(key: string): boolean {\n    const expiry = this.cacheExpiry.get(key);\n    return expiry ? Date.now() < expiry : false;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n    this.cacheExpiry.clear();\n    console.log('Historical data cache cleared');\n  }\n\n  /**\n   * Get provider information for debugging\n   */\n  public getProviderInfo(): { name: string; available: boolean } {\n    return {\n      name: 'mock-historical-data',\n      available: true\n    };\n  }\n}","size_bytes":10953},"server/services/mlPredictionEngine.ts":{"content":"/**\n * MLPredictionEngine - Phase 2 Enhancement\n * \n * Machine Learning prediction engine for FPL player performance.\n * Uses historical data and current form to predict future points with confidence intervals.\n */\n\nimport { HistoricalDataService } from './historicalDataService';\nimport { StatsService } from './statsService';\nimport { OddsService } from './oddsService';\nimport { MLPrediction, MLModelPerformance, ProcessedPlayer } from '@shared/schema';\n\ninterface MLModel {\n  predict(features: number[]): { prediction: number; confidence: number };\n  predictBatch(featuresArray: number[][]): Array<{ prediction: number; confidence: number }>;\n  getFeatureImportance(): Record<string, number>;\n}\n\n// Simple linear regression model for demonstration\nclass LinearRegressionModel implements MLModel {\n  private weights: number[] = [\n    0.35, // form factor\n    0.28, // fixture difficulty (inverse)\n    0.15, // price factor\n    0.10, // ownership factor\n    0.25, // historical performance\n    0.20, // volatility adjustment\n    0.12, // consistency bonus\n    -0.08, // injury/rotation risk\n  ];\n  private bias = 2.1; // baseline points expectation\n\n  predict(features: number[]): { prediction: number; confidence: number } {\n    // Linear combination of features\n    const rawPrediction = features.reduce((sum, feature, index) => {\n      return sum + feature * (this.weights[index] || 0);\n    }, this.bias);\n\n    // Apply bounds (0-20 points realistic range)\n    const prediction = Math.max(0, Math.min(20, rawPrediction));\n    \n    // Calculate confidence based on feature stability\n    const featureVariance = features.reduce((sum, feature) => sum + Math.pow(feature - 0.5, 2), 0) / features.length;\n    const confidence = Math.max(30, Math.min(95, 85 - featureVariance * 100));\n\n    return { prediction, confidence };\n  }\n\n  predictBatch(featuresArray: number[][]): Array<{ prediction: number; confidence: number }> {\n    return featuresArray.map(features => this.predict(features));\n  }\n\n  getFeatureImportance(): Record<string, number> {\n    const featureNames = [\n      'form', 'fixtures', 'price', 'ownership', 'historical', \n      'volatility', 'consistency', 'riskFactors'\n    ];\n    \n    const importance: Record<string, number> = {};\n    this.weights.forEach((weight, index) => {\n      if (featureNames[index]) {\n        importance[featureNames[index]] = Math.abs(weight);\n      }\n    });\n    \n    return importance;\n  }\n}\n\n// Ensemble model combining multiple approaches\nclass EnsembleModel implements MLModel {\n  private models = [\n    new LinearRegressionModel(),\n    // Could add more models: RandomForest, XGBoost, etc.\n  ];\n\n  predict(features: number[]): { prediction: number; confidence: number } {\n    const predictions = this.models.map(model => model.predict(features));\n    \n    // Weighted average of predictions\n    const avgPrediction = predictions.reduce((sum, pred) => sum + pred.prediction, 0) / predictions.length;\n    const avgConfidence = predictions.reduce((sum, pred) => sum + pred.confidence, 0) / predictions.length;\n    \n    // Adjust confidence based on model agreement\n    const variance = predictions.reduce((sum, pred) => sum + Math.pow(pred.prediction - avgPrediction, 2), 0) / predictions.length;\n    const adjustedConfidence = Math.max(20, avgConfidence - variance * 5);\n\n    return { \n      prediction: avgPrediction, \n      confidence: adjustedConfidence \n    };\n  }\n\n  predictBatch(featuresArray: number[][]): Array<{ prediction: number; confidence: number }> {\n    return featuresArray.map(features => this.predict(features));\n  }\n\n  getFeatureImportance(): Record<string, number> {\n    // Average feature importance across all models\n    const allImportance = this.models.map(model => model.getFeatureImportance());\n    const features = Object.keys(allImportance[0] || {});\n    \n    const avgImportance: Record<string, number> = {};\n    for (const feature of features) {\n      avgImportance[feature] = allImportance.reduce((sum, importance) => \n        sum + (importance[feature] || 0), 0) / allImportance.length;\n    }\n    \n    return avgImportance;\n  }\n}\n\nexport class MLPredictionEngine {\n  private static instance: MLPredictionEngine;\n  private model: MLModel;\n  private historicalDataService: HistoricalDataService;\n  private statsService: StatsService;\n  private oddsService: OddsService;\n  private cache = new Map<string, MLPrediction>();\n  private cacheExpiry = new Map<string, number>();\n  private readonly CACHE_DURATION = 60 * 60 * 1000; // 1 hour\n\n  private constructor() {\n    this.model = new EnsembleModel(); // Use ensemble for better accuracy\n    this.historicalDataService = HistoricalDataService.getInstance();\n    this.statsService = StatsService.getInstance();\n    this.oddsService = OddsService.getInstance();\n  }\n\n  public static getInstance(): MLPredictionEngine {\n    if (!MLPredictionEngine.instance) {\n      MLPredictionEngine.instance = new MLPredictionEngine();\n    }\n    return MLPredictionEngine.instance;\n  }\n\n  /**\n   * Generate ML predictions for a list of players\n   */\n  async predictPlayers(players: ProcessedPlayer[], gameweeks: number = 5): Promise<MLPrediction[]> {\n    const predictions: MLPrediction[] = [];\n\n    // Get historical data for all players\n    const playerIds = players.map(p => p.id);\n    const historyMap = await this.historicalDataService.getPlayersHistory(playerIds, ['2023-24', '2022-23']);\n    \n    // Get advanced stats for context\n    const advancedStatsList = await this.statsService.getPlayerAdvancedBatch(playerIds);\n    const advancedStatsMap = new Map(advancedStatsList.map(stats => [stats.playerId, stats]));\n\n    for (const player of players) {\n      const cacheKey = `${player.id}_${gameweeks}_${Date.now() - (Date.now() % (30 * 60 * 1000))}`; // 30min cache buckets\n      \n      // Check cache first\n      if (this.isCacheValid(cacheKey)) {\n        const cached = this.cache.get(cacheKey);\n        if (cached) {\n          predictions.push(cached);\n          continue;\n        }\n      }\n\n      try {\n        const prediction = await this.predictSinglePlayer(player, historyMap.get(player.id) || [], advancedStatsMap.get(player.id), gameweeks);\n        \n        // Cache the prediction\n        this.cache.set(cacheKey, prediction);\n        this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_DURATION);\n        \n        predictions.push(prediction);\n      } catch (error) {\n        console.error(`ML prediction failed for player ${player.id}:`, error);\n        \n        // Fallback to simple prediction\n        const fallbackPrediction = this.createFallbackPrediction(player, gameweeks);\n        predictions.push(fallbackPrediction);\n      }\n    }\n\n    return predictions;\n  }\n\n  /**\n   * Generate ML prediction for a single player\n   */\n  private async predictSinglePlayer(\n    player: ProcessedPlayer, \n    history: any[], \n    advancedStats: any,\n    gameweeks: number\n  ): Promise<MLPrediction> {\n    // Extract features for ML prediction\n    const features = await this.extractMLFeatures(player, history, advancedStats);\n    \n    // Get ML prediction\n    const { prediction, confidence } = this.model.predict(features);\n    \n    // Calculate risk factors\n    const riskFactors = this.calculateRiskFactors(player, history, advancedStats);\n    \n    // Adjust prediction for gameweeks (currently predicts per gameweek)\n    const totalPrediction = prediction * gameweeks;\n\n    return {\n      playerId: player.id,\n      predictedPoints: totalPrediction,\n      confidence,\n      modelVersion: 'ensemble-v1.0',\n      features: {\n        form: features[0] || 0,\n        fixtures: features[1] || 0,\n        price: features[2] || 0,\n        ownership: features[3] || 0,\n        historical: features[4] || 0,\n      },\n      riskFactors,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Extract normalized features for ML model\n   */\n  private async extractMLFeatures(player: ProcessedPlayer, history: any[], advancedStats: any): Promise<number[]> {\n    const currentSeason = history.find(h => h.season === '2023-24');\n    const recentGameweeks = currentSeason?.gameweeks.slice(-10) || [];\n    \n    // Form factor (0-1)\n    const recentPoints = recentGameweeks.length > 0 \n      ? recentGameweeks.reduce((sum: number, gw: any) => sum + gw.points, 0) / recentGameweeks.length \n      : player.points;\n    const formFactor = Math.min(1, recentPoints / 10); // Normalize to 0-1\n    \n    // Fixture difficulty factor (0-1, lower FDR = higher factor)\n    const recentFDR = recentGameweeks.length > 0 \n      ? recentGameweeks.reduce((sum: number, gw: any) => sum + gw.fixture.difficulty, 0) / recentGameweeks.length \n      : 3;\n    const fixtureFactor = (6 - recentFDR) / 5; // Invert and normalize\n    \n    // Price efficiency factor (0-1)\n    const priceEfficiency = Math.min(1, recentPoints / (player.price || 1));\n    \n    // Ownership factor (0-1)\n    const ownershipFactor = Math.min(1, (recentGameweeks[recentGameweeks.length - 1]?.ownership || 10) / 50);\n    \n    // Historical performance factor (0-1)\n    const historicalFactor = currentSeason \n      ? Math.min(1, currentSeason.aggregatedStats.avgPointsPerGame / 8)\n      : formFactor;\n    \n    // Volatility adjustment (0-1)\n    const volatilityFactor = currentSeason \n      ? Math.max(0, 1 - (currentSeason.aggregatedStats.volatility / 10))\n      : 0.5;\n    \n    // Consistency bonus (0-1)\n    const consistencyFactor = currentSeason \n      ? currentSeason.aggregatedStats.consistency / 100\n      : 0.5;\n    \n    // Risk adjustment (0-1, higher risk = lower factor)\n    const riskFactor = advancedStats \n      ? Math.max(0, 1 - (advancedStats.volatility || 0))\n      : 0.7;\n\n    return [\n      formFactor,\n      fixtureFactor,\n      priceEfficiency,\n      ownershipFactor,\n      historicalFactor,\n      volatilityFactor,\n      consistencyFactor,\n      riskFactor\n    ];\n  }\n\n  /**\n   * Calculate risk factors for a player\n   */\n  private calculateRiskFactors(player: ProcessedPlayer, history: any[], advancedStats: any): {\n    injuryRisk: number;\n    rotationRisk: number;\n    priceDrop: number;\n  } {\n    const currentSeason = history.find(h => h.season === '2023-24');\n    const recentGameweeks = currentSeason?.gameweeks.slice(-10) || [];\n    \n    // Injury risk based on recent minutes and historical patterns\n    const avgMinutes = recentGameweeks.length > 0 \n      ? recentGameweeks.reduce((sum: number, gw: any) => sum + gw.minutes, 0) / recentGameweeks.length \n      : 60;\n    const injuryRisk = Math.max(0, Math.min(1, (90 - avgMinutes) / 90));\n    \n    // Rotation risk based on playing time consistency and role\n    const minutesVariance = recentGameweeks.length > 1 \n      ? recentGameweeks.reduce((sum: number, gw: any) => sum + Math.pow(gw.minutes - avgMinutes, 2), 0) / recentGameweeks.length\n      : 0;\n    const rotationRisk = advancedStats?.role === 'rotation' ? 0.6 : Math.min(0.8, minutesVariance / 1000);\n    \n    // Price drop risk based on form and ownership\n    const formTrend = recentGameweeks.length >= 5 \n      ? (recentGameweeks.slice(-3).reduce((s: number, gw: any) => s + gw.points, 0) / 3) -\n        (recentGameweeks.slice(0, 3).reduce((s: number, gw: any) => s + gw.points, 0) / 3)\n      : 0;\n    const priceDrop = formTrend < -2 ? 0.7 : Math.max(0, 0.3 - formTrend / 10);\n\n    return {\n      injuryRisk: Math.round(injuryRisk * 100) / 100,\n      rotationRisk: Math.round(rotationRisk * 100) / 100,\n      priceDrop: Math.round(priceDrop * 100) / 100\n    };\n  }\n\n  /**\n   * Create fallback prediction when ML fails\n   */\n  private createFallbackPrediction(player: ProcessedPlayer, gameweeks: number): MLPrediction {\n    const basicPrediction = (player.expectedPoints || player.points || 2) * gameweeks;\n    \n    return {\n      playerId: player.id,\n      predictedPoints: basicPrediction,\n      confidence: 40, // Low confidence for fallback\n      modelVersion: 'fallback-v1.0',\n      features: {\n        form: 0.5,\n        fixtures: 0.5,\n        price: 0.5,\n        ownership: 0.5,\n        historical: 0.5,\n      },\n      riskFactors: {\n        injuryRisk: 0.3,\n        rotationRisk: 0.4,\n        priceDrop: 0.2\n      },\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Get model performance metrics\n   */\n  async getModelPerformance(): Promise<MLModelPerformance[]> {\n    return this.historicalDataService.getModelPerformance();\n  }\n\n  /**\n   * Get feature importance for the current model\n   */\n  getFeatureImportance(): Record<string, number> {\n    return this.model.getFeatureImportance();\n  }\n\n  /**\n   * Retrain model with new data (placeholder for future implementation)\n   */\n  async retrainModel(newData?: any[]): Promise<void> {\n    console.log('Model retraining triggered - not implemented in current version');\n    // In a real implementation, this would:\n    // 1. Fetch latest historical data\n    // 2. Prepare training features and targets\n    // 3. Train new model weights\n    // 4. Validate model performance\n    // 5. Replace current model if performance improves\n  }\n\n  /**\n   * Check if cached prediction is still valid\n   */\n  private isCacheValid(key: string): boolean {\n    const expiry = this.cacheExpiry.get(key);\n    return expiry ? Date.now() < expiry : false;\n  }\n\n  /**\n   * Clear prediction cache\n   */\n  public clearCache(): void {\n    this.cache.clear();\n    this.cacheExpiry.clear();\n    console.log('ML prediction cache cleared');\n  }\n\n  /**\n   * Get engine information for debugging\n   */\n  public getEngineInfo(): { \n    modelType: string; \n    available: boolean; \n    cacheSize: number;\n    featureCount: number;\n  } {\n    return {\n      modelType: 'ensemble',\n      available: true,\n      cacheSize: this.cache.size,\n      featureCount: Object.keys(this.model.getFeatureImportance()).length\n    };\n  }\n}","size_bytes":13783},"server/services/naturalLanguageProcessor.ts":{"content":"/**\n * NaturalLanguageProcessor - Phase 3 Enhancement\n * \n * Processes natural language queries about FPL strategy and converts them into\n * structured intents for analysis and response generation.\n */\n\nimport { QueryIntent, FPLConcept, FPLPlayer, FPLTeam } from '@shared/schema';\nimport { FPLApiService } from './fplApi';\n\n// Simple keyword-based NLP for demonstration (would use proper NLP library in production)\ninterface KeywordPattern {\n  keywords: string[];\n  intent: QueryIntent['type'];\n  confidence: number;\n  entityExtractors?: {\n    players?: RegExp;\n    teams?: RegExp;\n    gameweeks?: RegExp;\n    chips?: RegExp;\n    positions?: RegExp;\n    budget?: RegExp;\n  };\n}\n\nexport class NaturalLanguageProcessor {\n  private static instance: NaturalLanguageProcessor;\n  private patterns: KeywordPattern[] = [];\n  private fplTerms: Map<string, string> = new Map();\n  private playerDictionary: Map<string, FPLPlayer> = new Map();\n  private teamDictionary: Map<string, FPLTeam> = new Map();\n  private isLoaded: boolean = false;\n  private readyPromise: Promise<void>;\n\n  private constructor() {\n    this.initializePatterns();\n    this.initializeFPLTerms();\n    this.readyPromise = this.loadDictionaries(); // Load real FPL data on startup\n  }\n\n  public static getInstance(): NaturalLanguageProcessor {\n    if (!NaturalLanguageProcessor.instance) {\n      NaturalLanguageProcessor.instance = new NaturalLanguageProcessor();\n    }\n    return NaturalLanguageProcessor.instance;\n  }\n\n  /**\n   * Process natural language query into structured intent\n   */\n  async processQuery(query: string): Promise<QueryIntent> {\n    // Ensure dictionaries are loaded before processing\n    await this.readyPromise;\n    \n    const normalizedQuery = this.normalizeQuery(query);\n    \n    // Intent classification\n    const intent = this.classifyIntent(normalizedQuery);\n    \n    // Entity extraction\n    const entities = this.extractEntities(normalizedQuery, intent);\n    \n    // Confidence calculation\n    const confidence = this.calculateConfidence(normalizedQuery, intent, entities);\n\n    return {\n      type: intent,\n      entities,\n      confidence,\n      originalQuery: query,\n      processedQuery: normalizedQuery\n    };\n  }\n\n  /**\n   * Normalize query text for processing\n   */\n  private normalizeQuery(query: string): string {\n    return query\n      .toLowerCase()\n      .replace(/[^\\w\\s]/g, ' ') // Remove punctuation\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim();\n  }\n\n  /**\n   * Classify the intent using rule-based approach with precedence\n   */\n  private classifyIntent(query: string): QueryIntent['type'] {\n    const words = query.split(' ');\n    \n    // Pre-extract entities for rule evaluation\n    const tempEntities = this.extractEntitiesForRules(query);\n    \n    // Rule 1: Chips present -> chip_strategy\n    if (tempEntities.chips && tempEntities.chips.length > 0) {\n      return 'chip_strategy';\n    }\n    \n    // Rule 2: Player comparison - requires high-confidence player matches\n    if (tempEntities.players && tempEntities.players.length >= 2) {\n      return 'player_comparison';\n    }\n    \n    // Only trigger comparison if explicit comparison keywords AND multiple noun-like tokens\n    if (this.hasComparisonKeywords(query) && this.hasMultipleNounLikeTokens(words)) {\n      return 'player_comparison';\n    }\n    \n    // Rule 3: Transfer suggestions - transfer verbs OR budget + player/position\n    if (this.hasTransferKeywords(query) ||\n        (tempEntities.budget && (tempEntities.players?.length || tempEntities.positions?.length))) {\n      return 'transfer_suggestions';\n    }\n    \n    // Rule 4: Fixture analysis - fixture-related keywords\n    if (this.hasFixtureKeywords(query)) {\n      return 'fixture_analysis';\n    }\n    \n    // Rule 5: Player evaluation in team context - player + \"my team\" context\n    if (tempEntities.players && tempEntities.players.length > 0 && /my\\s+team/i.test(query)) {\n      return 'squad_analysis';\n    }\n    \n    // Rule 6: Squad analysis - analyze/review squad/team\n    if (this.hasSquadAnalysisKeywords(query)) {\n      return 'squad_analysis';\n    }\n    \n    // Rule 7: Default to general advice\n    return 'general_advice';\n  }\n\n  /**\n   * Extract entities for rule evaluation (simplified version)\n   */\n  private extractEntitiesForRules(query: string): Partial<QueryIntent['entities']> {\n    const entities: Partial<QueryIntent['entities']> = {};\n    \n    // Quick chip detection (include generic \"chip\" keyword)\n    const chipMatches = query.match(/(?:wildcard|bench boost|triple captain|free hit|wc|bb|tc|fh|chip)/gi);\n    if (chipMatches) {\n      entities.chips = chipMatches.map(c => this.normalizeChipName(c));\n    }\n    \n    // Enhanced player detection with better handling of multiple players and special characters\n    if (this.isLoaded) {\n      const players: string[] = [];\n      // Normalize query for better matching (handle special characters)\n      const normalizedQuery = query.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\n      \n      Array.from(this.playerDictionary.entries()).forEach(([playerName, player]) => {\n        const normalizedPlayerName = playerName.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n        \n        // Check for exact match with word boundaries\n        const escapedName = normalizedPlayerName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        if (new RegExp(`\\\\b${escapedName}\\\\b`, 'i').test(normalizedQuery)) {\n          players.push(player.web_name);\n        }\n        \n        // Also check original query for exact matches (in case normalization affects real names)\n        const originalEscapedName = playerName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        if (new RegExp(`\\\\b${originalEscapedName}\\\\b`, 'i').test(query)) {\n          players.push(player.web_name);\n        }\n      });\n      \n      if (players.length > 0) {\n        entities.players = Array.from(new Set(players));\n      }\n    }\n    \n    // Quick budget detection\n    const budgetMatches = query.match(/(?:£|budget|money|cost)\\s*(\\d+(?:\\.\\d+)?)/gi);\n    if (budgetMatches) {\n      const amounts = budgetMatches.map(match => {\n        const num = match.match(/\\d+(?:\\.\\d+)?/);\n        return num ? parseFloat(num[0]) : 0;\n      });\n      entities.budget = Math.max(...amounts);\n    }\n    \n    // Quick position detection\n    const positionMatches = query.match(/(?:goalkeeper|defender|midfielder|forward|gk|def|mid|fwd)/gi);\n    if (positionMatches) {\n      entities.positions = positionMatches.map(p => this.normalizePosition(p));\n    }\n    \n    return entities;\n  }\n\n  /**\n   * Check for comparison keywords (stricter)\n   */\n  private hasComparisonKeywords(query: string): boolean {\n    return /(\\bvs\\b|\\bversus\\b|\\bcompare\\b|\\bpick\\b|\\bchoose\\b|\\bbetween\\b)/i.test(query);\n  }\n\n  /**\n   * Check for multiple noun-like tokens (rough heuristic)\n   */\n  private hasMultipleNounLikeTokens(words: string[]): boolean {\n    const nounLike = words.filter(word => \n      word.length > 2 && \n      !['the', 'and', 'or', 'is', 'are', 'can', 'should', 'will', 'would'].includes(word.toLowerCase())\n    );\n    return nounLike.length >= 2;\n  }\n\n  /**\n   * Check for transfer-related keywords\n   */\n  private hasTransferKeywords(query: string): boolean {\n    return /(?:transfer|buy|sell|bring\\s+in|bring\\s+out|replace|swap|change|worth\\s+a?\\s+hit)\\b/i.test(query);\n  }\n\n  /**\n   * Check for fixture-related keywords (improved)\n   */\n  private hasFixtureKeywords(query: string): boolean {\n    return /(fixtures?|fdr|difficulty|upcoming|schedule|gameweek|gw(?:\\s+\\d+)?)\\b/i.test(query);\n  }\n\n  /**\n   * Check for squad analysis keywords\n   */\n  private hasSquadAnalysisKeywords(query: string): boolean {\n    return /(?:analyze|analysis|review|check|evaluate)\\s*(?:my|squad|team)\\b/i.test(query) ||\n           /(?:squad|team)\\s*(?:analyze|analysis|review|check|evaluate)\\b/i.test(query) ||\n           /(?:what|how)\\s+(?:do\\s+you\\s+)?(?:think|feel)\\s+about\\s+.+?\\s+in\\s+my\\s+(team|squad)/i.test(query) ||\n           /(?:is|should)\\s+.+?\\s+(?:good|worth|worthwhile|worth\\s+keeping)\\s+(?:in|for)\\s+my\\s+(team|squad)/i.test(query) ||\n           /(?:my\\s+team|my\\s+squad).*\\w+/i.test(query);\n  }\n\n  /**\n   * Calculate pattern matching score\n   */\n  private calculatePatternScore(query: string, pattern: KeywordPattern): number {\n    const words = query.split(' ');\n    let matches = 0;\n\n    for (const keyword of pattern.keywords) {\n      if (words.includes(keyword) || query.includes(keyword)) {\n        matches++;\n      }\n    }\n\n    return (matches / pattern.keywords.length) * pattern.confidence;\n  }\n\n  /**\n   * Load player and team dictionaries from FPL API\n   */\n  private async loadDictionaries(): Promise<void> {\n    try {\n      const fplApi = FPLApiService.getInstance();\n      const bootstrap = await fplApi.getBootstrapData();\n      \n      // Build player dictionary with multiple name variations\n      for (const player of bootstrap.elements) {\n        const variations = [\n          player.web_name.toLowerCase(),\n          player.first_name.toLowerCase(),\n          player.second_name.toLowerCase(),\n          `${player.first_name} ${player.second_name}`.toLowerCase()\n        ];\n        \n        for (const variation of variations) {\n          if (variation.length > 1) { // Avoid single character names\n            this.playerDictionary.set(variation, player);\n          }\n        }\n      }\n      \n      // Build team dictionary with multiple name variations\n      for (const team of bootstrap.teams) {\n        const variations = [\n          team.name.toLowerCase(),\n          team.short_name.toLowerCase(),\n          team.name.toLowerCase().replace(/\\s+/g, ''), // Remove spaces for compound names\n        ];\n        \n        for (const variation of variations) {\n          this.teamDictionary.set(variation, team);\n        }\n      }\n      \n      this.isLoaded = true;\n    } catch (error) {\n      console.warn('Failed to load FPL dictionaries, using fallback:', error);\n      this.isLoaded = false;\n    }\n  }\n\n  /**\n   * Stopwords to exclude from entity matching\n   */\n  private readonly stopwords = new Set([\n    'what', 'the', 'are', 'for', 'like', 'about', 'which', 'who', 'when', 'where', 'how',\n    'fixtures', 'gameweek', 'gw', 'should', 'will', 'would', 'can', 'could', 'my', 'your',\n    'and', 'or', 'but', 'is', 'was', 'be', 'have', 'has', 'do', 'does', 'did', 'get', 'got'\n  ]);\n\n  /**\n   * Simple fuzzy string matching for entity recognition\n   */\n  private fuzzyMatch(query: string, target: string, maxDistance: number = 1): boolean {\n    if (query === target) return true;\n    if (query.length < 4 || target.length < 4) return false; // Require minimum length for fuzzy\n    if (Math.abs(query.length - target.length) > maxDistance) return false;\n    \n    // Simple Levenshtein distance calculation\n    const matrix: number[][] = [];\n    for (let i = 0; i <= query.length; i++) {\n      matrix[i] = [i];\n    }\n    for (let j = 0; j <= target.length; j++) {\n      matrix[0][j] = j;\n    }\n    \n    for (let i = 1; i <= query.length; i++) {\n      for (let j = 1; j <= target.length; j++) {\n        const cost = query[i - 1] === target[j - 1] ? 0 : 1;\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j] + 1,\n          matrix[i][j - 1] + 1,\n          matrix[i - 1][j - 1] + cost\n        );\n      }\n    }\n    \n    return matrix[query.length][target.length] <= maxDistance;\n  }\n\n  /**\n   * Extract entities from the query using dynamic dictionaries with improved precision\n   */\n  private extractEntities(query: string, intent: QueryIntent['type']): QueryIntent['entities'] {\n    const entities: QueryIntent['entities'] = {};\n    const words = query.split(' ').map(w => w.toLowerCase());\n    const filteredWords = words.filter(word => !this.stopwords.has(word) && word.length >= 3);\n\n    // Enhanced player extraction with better handling of multiple players and special characters\n    const players: string[] = [];\n    \n    // Normalize query for better matching (handle special characters like Mbappé)\n    const normalizedQuery = query.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '').toLowerCase();\n    \n    Array.from(this.playerDictionary.entries()).forEach(([playerName, player]) => {\n      const nameParts = playerName.split(' ');\n      const normalizedPlayerName = playerName.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n      \n      // Exact word boundary match (case insensitive) on both original and normalized\n      const escapedOriginal = playerName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      const escapedNormalized = normalizedPlayerName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n      \n      if (new RegExp(`\\\\b${escapedOriginal}\\\\b`, 'i').test(query) || \n          new RegExp(`\\\\b${escapedNormalized}\\\\b`, 'i').test(normalizedQuery)) {\n        players.push(player.web_name);\n      }\n      // Multi-token fuzzy match only if both parts match approximately\n      else if (nameParts.length > 1) {\n        const matchingParts = nameParts.filter(part => \n          part.length >= 4 && \n          filteredWords.some(word => word.length >= 4 && this.fuzzyMatch(word, part))\n        );\n        if (matchingParts.length >= 2) {\n          players.push(player.web_name);\n        }\n      }\n    });\n    \n    if (players.length > 0) {\n      entities.players = Array.from(new Set(players));\n    }\n\n    // Extract team names using exact matching only (no fuzzy for teams)\n    const teams: string[] = [];\n    Array.from(this.teamDictionary.entries()).forEach(([teamName, team]) => {\n      // Only exact word boundary matches for teams\n      if (new RegExp(`\\\\b${teamName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\\\\b`, 'i').test(query)) {\n        teams.push(team.short_name);\n      }\n    });\n    if (teams.length > 0) {\n      entities.teams = Array.from(new Set(teams));\n    }\n\n    // Extract gameweeks\n    const gameweekMatches = query.match(/(?:gameweek|gw)\\s*(\\d+)/gi);\n    if (gameweekMatches) {\n      entities.gameweeks = gameweekMatches.map(match => {\n        const num = match.match(/\\d+/);\n        return num ? parseInt(num[0]) : 0;\n      }).filter(n => n > 0);\n    }\n\n    // Extract chips with better synonyms (include generic \"chip\" for consistency)\n    const chipMatches = query.match(/(?:wildcard|bench boost|triple captain|free hit|wc|bb|tc|fh|chip)/gi);\n    if (chipMatches) {\n      entities.chips = Array.from(new Set(chipMatches.map(c => this.normalizeChipName(c))));\n    }\n\n    // Extract positions\n    const positionMatches = query.match(/(?:goalkeeper|defender|midfielder|forward|gk|def|mid|fwd)/gi);\n    if (positionMatches) {\n      entities.positions = Array.from(new Set(positionMatches.map(p => this.normalizePosition(p))));\n    }\n\n    // Extract budget\n    const budgetMatches = query.match(/(?:£|budget|money|cost)\\s*(\\d+(?:\\.\\d+)?)/gi);\n    if (budgetMatches) {\n      const amounts = budgetMatches.map(match => {\n        const num = match.match(/\\d+(?:\\.\\d+)?/);\n        return num ? parseFloat(num[0]) : 0;\n      });\n      entities.budget = Math.max(...amounts);\n    }\n\n    return entities;\n  }\n\n  /**\n   * Calculate entity-based confidence score\n   */\n  private calculateEntityConfidence(entities: QueryIntent['entities']): number {\n    let totalConfidence = 0;\n    let entityCount = 0;\n\n    // Players: exact matches = 1.0, fuzzy = 0.8\n    if (entities.players && entities.players.length > 0) {\n      totalConfidence += entities.players.length * 0.9; // Assume most are good matches after filtering\n      entityCount += entities.players.length;\n    }\n\n    // Teams: exact matches only = 1.0\n    if (entities.teams && entities.teams.length > 0) {\n      totalConfidence += entities.teams.length * 1.0;\n      entityCount += entities.teams.length;\n    }\n\n    // Other entities\n    if (entities.chips && entities.chips.length > 0) {\n      totalConfidence += entities.chips.length * 1.0;\n      entityCount += entities.chips.length;\n    }\n\n    if (entities.gameweeks && entities.gameweeks.length > 0) {\n      totalConfidence += entities.gameweeks.length * 1.0;\n      entityCount += entities.gameweeks.length;\n    }\n\n    if (entities.positions && entities.positions.length > 0) {\n      totalConfidence += entities.positions.length * 0.9;\n      entityCount += entities.positions.length;\n    }\n\n    if (entities.budget) {\n      totalConfidence += 1.0;\n      entityCount += 1;\n    }\n\n    return entityCount > 0 ? (totalConfidence / entityCount) * 100 : 0;\n  }\n\n  /**\n   * Calculate intent-specific confidence score\n   */\n  private calculateIntentConfidence(query: string, intent: QueryIntent['type']): number {\n    const words = query.split(' ');\n    let confidence = 30; // Base confidence\n\n    // Intent-specific confidence boosts\n    switch (intent) {\n      case 'chip_strategy':\n        if (this.hasExplicitChipKeywords(query)) confidence += 40;\n        break;\n      case 'player_comparison':\n        if (this.hasComparisonKeywords(query)) confidence += 30;\n        break;\n      case 'transfer_suggestions':\n        if (this.hasTransferKeywords(query)) confidence += 35;\n        break;\n      case 'fixture_analysis':\n        if (this.hasFixtureKeywords(query)) confidence += 35;\n        break;\n      case 'squad_analysis':\n        if (this.hasSquadAnalysisKeywords(query)) confidence += 40;\n        break;\n      case 'general_advice':\n        confidence += 10; // Lower confidence for general catch-all\n        break;\n    }\n\n    // Boost for FPL-specific terms\n    const fplTermCount = Array.from(this.fplTerms.keys()).filter(term => query.includes(term)).length;\n    confidence += fplTermCount * 8;\n\n    // Penalize very short or very long queries\n    if (words.length < 3) confidence -= 15;\n    if (words.length > 25) confidence -= 10;\n\n    return Math.max(20, Math.min(95, confidence));\n  }\n\n  /**\n   * Check for explicit chip keywords\n   */\n  private hasExplicitChipKeywords(query: string): boolean {\n    return /(?:wildcard|bench boost|triple captain|free hit|chip)\\b/i.test(query);\n  }\n\n  /**\n   * Calculate overall confidence score for the interpretation with dynamic weighting\n   */\n  private calculateConfidence(query: string, intent: QueryIntent['type'], entities: QueryIntent['entities']): number {\n    const entityConfidence = this.calculateEntityConfidence(entities);\n    const intentConfidence = this.calculateIntentConfidence(query, intent);\n    \n    // Dynamic weighting: if no entities but clear intent keywords, prioritize intent\n    const entityCount = Object.values(entities).filter(v => v && (Array.isArray(v) ? v.length > 0 : v > 0)).length;\n    const hasExplicitIntentKeywords = this.hasExplicitIntentKeywords(query, intent);\n    \n    let intentWeight = 0.6;\n    let entityWeight = 0.4;\n    \n    if (entityCount === 0 && hasExplicitIntentKeywords) {\n      intentWeight = 0.8;\n      entityWeight = 0.2;\n    }\n    \n    const overallConfidence = (intentConfidence * intentWeight) + (entityConfidence * entityWeight);\n    \n    return Math.round(Math.max(20, Math.min(95, overallConfidence)));\n  }\n\n  /**\n   * Check if query has explicit intent keywords for the given intent type\n   */\n  private hasExplicitIntentKeywords(query: string, intent: QueryIntent['type']): boolean {\n    switch (intent) {\n      case 'squad_analysis': return this.hasSquadAnalysisKeywords(query);\n      case 'chip_strategy': return this.hasExplicitChipKeywords(query);\n      case 'player_comparison': return this.hasComparisonKeywords(query);\n      case 'transfer_suggestions': return this.hasTransferKeywords(query);\n      case 'fixture_analysis': return this.hasFixtureKeywords(query);\n      default: return false;\n    }\n  }\n\n  /**\n   * Generate clarification question for low-confidence queries\n   */\n  public generateClarificationQuestion(query: string, entities: QueryIntent['entities']): string {\n    const hasPlayers = entities.players && entities.players.length > 0;\n    const hasChips = entities.chips && entities.chips.length > 0;\n    const hasGameweeks = entities.gameweeks && entities.gameweeks.length > 0;\n\n    if (hasPlayers && hasChips) {\n      return \"I can help with both player analysis and chip strategy. Which would you like me to focus on?\";\n    }\n\n    if (hasPlayers) {\n      return \"I see you mentioned some players. Are you looking to compare them, get transfer advice, or analyze their fixtures?\";\n    }\n\n    if (hasChips) {\n      return \"I can help with your chip strategy! Are you asking about when to use it, or do you want me to analyze if now is the right time?\";\n    }\n\n    if (hasGameweeks) {\n      return \"I can help with gameweek analysis! Are you asking about fixtures, transfers, or chip timing for that gameweek?\";\n    }\n\n    return \"I'd love to help! Could you be more specific? I can analyze your squad, suggest transfers, help with chip timing, or compare players.\";\n  }\n\n  /**\n   * Normalize chip names to standard format\n   */\n  private normalizeChipName(chip: string): string {\n    const normalized = chip.toLowerCase();\n    if (normalized.includes('wildcard') || normalized === 'wc') return 'wildcard';\n    if (normalized.includes('bench') || normalized === 'bb') return 'bench-boost';\n    if (normalized.includes('triple') || normalized === 'tc') return 'triple-captain';\n    if (normalized.includes('free') || normalized === 'fh') return 'free-hit';\n    if (normalized === 'chip') return 'chip'; // Generic chip reference\n    return normalized;\n  }\n\n  /**\n   * Normalize position names to standard format\n   */\n  private normalizePosition(position: string): string {\n    const normalized = position.toLowerCase();\n    if (normalized.includes('goal') || normalized === 'gk') return 'GK';\n    if (normalized.includes('def') || normalized === 'def') return 'DEF';\n    if (normalized.includes('mid') || normalized === 'mid') return 'MID';\n    if (normalized.includes('for') || normalized === 'fwd') return 'FWD';\n    return normalized.toUpperCase();\n  }\n\n  /**\n   * Initialize intent classification patterns\n   */\n  private initializePatterns(): void {\n    this.patterns = [\n      {\n        keywords: ['analyze', 'squad', 'team', 'analysis', 'review', 'check', 'evaluate'],\n        intent: 'squad_analysis',\n        confidence: 0.9\n      },\n      {\n        keywords: ['chip', 'wildcard', 'bench boost', 'triple captain', 'free hit', 'when', 'use'],\n        intent: 'chip_strategy',\n        confidence: 0.85\n      },\n      {\n        keywords: ['transfer', 'buy', 'sell', 'in', 'out', 'replace', 'swap', 'change'],\n        intent: 'transfer_suggestions',\n        confidence: 0.8\n      },\n      {\n        keywords: ['compare', 'vs', 'versus', 'better', 'choose', 'pick', 'between'],\n        intent: 'player_comparison',\n        confidence: 0.75\n      },\n      {\n        keywords: ['fixture', 'gameweek', 'difficulty', 'upcoming', 'schedule', 'gw'],\n        intent: 'fixture_analysis',\n        confidence: 0.7\n      },\n      {\n        keywords: ['help', 'advice', 'suggest', 'recommend', 'what', 'how', 'should'],\n        intent: 'general_advice',\n        confidence: 0.6\n      }\n    ];\n  }\n\n  /**\n   * Initialize FPL terminology dictionary\n   */\n  private initializeFPLTerms(): void {\n    this.fplTerms = new Map([\n      ['fpl', 'Fantasy Premier League'],\n      ['gw', 'gameweek'],\n      ['fdr', 'fixture difficulty rating'],\n      ['wc', 'wildcard'],\n      ['bb', 'bench boost'],\n      ['tc', 'triple captain'],\n      ['fh', 'free hit'],\n      ['xg', 'expected goals'],\n      ['xa', 'expected assists'],\n      ['bps', 'bonus points system'],\n      ['ownership', 'percentage of teams that own a player'],\n      ['captaincy', 'percentage of teams that captain a player'],\n      ['differential', 'low ownership player'],\n      ['template', 'popular player choice'],\n      ['haul', 'high scoring gameweek'],\n      ['blank', 'low scoring gameweek'],\n      ['rotation', 'player not guaranteed to start'],\n      ['nailed', 'player guaranteed to start'],\n      ['punt', 'risky player choice'],\n      ['fodder', 'cheap bench player']\n    ]);\n  }\n\n  /**\n   * Get explanation for FPL term\n   */\n  public explainTerm(term: string): string | null {\n    return this.fplTerms.get(term.toLowerCase()) || null;\n  }\n\n  /**\n   * Check if query contains FPL-specific terminology\n   */\n  public containsFPLTerms(query: string): boolean {\n    const normalized = query.toLowerCase();\n    return Array.from(this.fplTerms.keys()).some(term => normalized.includes(term));\n  }\n\n  /**\n   * Get processor information for debugging\n   */\n  public getProcessorInfo(): {\n    patternCount: number;\n    termCount: number;\n    version: string;\n  } {\n    return {\n      patternCount: this.patterns.length,\n      termCount: this.fplTerms.size,\n      version: 'v3.0-nlp'\n    };\n  }\n}","size_bytes":24622},"server/services/oddsService.ts":{"content":"import { MatchOdds, TeamStrength } from \"@shared/schema\";\n\n// Provider interface for different odds APIs\nexport interface IOddsProvider {\n  name: string;\n  getMatchOdds(fixtureId: number): Promise<MatchOdds | null>;\n  getMatchOddsBatch(fixtureIds: number[]): Promise<MatchOdds[]>;\n  isAvailable(): Promise<boolean>;\n}\n\n// Mock provider for development and fallback\nclass MockOddsProvider implements IOddsProvider {\n  name = \"mock\";\n\n  async getMatchOdds(fixtureId: number): Promise<MatchOdds | null> {\n    // Generate realistic mock odds based on fixture ID (deterministic for consistency)\n    const seed = fixtureId % 100;\n    const homeStrength = 0.4 + (seed % 30) / 100; // 0.4 to 0.7\n    const awayStrength = 0.4 + ((seed + 17) % 30) / 100;\n    \n    // Convert strength to odds (higher strength = lower odds)\n    const homeWinOdds = 1 / homeStrength;\n    const awayWinOdds = 1 / awayStrength;\n    const drawOdds = 3.2 + (seed % 10) / 10; // 3.2 to 4.2\n\n    return {\n      fixtureId,\n      homeWin: Math.round(homeWinOdds * 100) / 100,\n      draw: Math.round(drawOdds * 100) / 100,\n      awayWin: Math.round(awayWinOdds * 100) / 100,\n      btts: 1.8 + (seed % 15) / 100, // 1.8 to 1.95\n      over25Goals: 1.7 + (seed % 20) / 100,\n      under25Goals: 2.1 + (seed % 15) / 100,\n      homeCleanSheet: 2.5 + homeStrength * 2,\n      awayCleanSheet: 2.5 + awayStrength * 2,\n      homeGoalsOver15: 1.4 + homeStrength,\n      awayGoalsOver15: 1.4 + awayStrength,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  async getMatchOddsBatch(fixtureIds: number[]): Promise<MatchOdds[]> {\n    return Promise.all(\n      fixtureIds.map(id => this.getMatchOdds(id)).filter(Boolean) as Promise<MatchOdds>[]\n    );\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n}\n\n// Service class for odds management\nexport class OddsService {\n  private static instance: OddsService;\n  private cache: Map<number, { data: MatchOdds; timestamp: number }> = new Map();\n  private readonly cacheExpiry = 15 * 60 * 1000; // 15 minutes\n  private provider: IOddsProvider;\n\n  constructor(provider?: IOddsProvider) {\n    // Use environment variable to determine provider, fallback to mock\n    const providerName = process.env.ODDS_PROVIDER || 'mock';\n    this.provider = provider || this.createProvider(providerName);\n  }\n\n  public static getInstance(): OddsService {\n    if (!OddsService.instance) {\n      OddsService.instance = new OddsService();\n    }\n    return OddsService.instance;\n  }\n\n  private createProvider(providerName: string): IOddsProvider {\n    switch (providerName.toLowerCase()) {\n      case 'mock':\n      default:\n        return new MockOddsProvider();\n      // Future providers can be added here:\n      // case 'oddschecker':\n      //   return new OddsCheckerProvider(process.env.ODDSCHECKER_API_KEY!);\n      // case 'betfair':\n      //   return new BetfairProvider(process.env.BETFAIR_API_KEY!);\n    }\n  }\n\n  async getMatchOdds(fixtureId: number): Promise<MatchOdds | null> {\n    // Check cache first\n    const cached = this.cache.get(fixtureId);\n    const now = Date.now();\n    \n    if (cached && (now - cached.timestamp) < this.cacheExpiry) {\n      return cached.data;\n    }\n\n    try {\n      const odds = await this.provider.getMatchOdds(fixtureId);\n      if (odds) {\n        this.cache.set(fixtureId, { data: odds, timestamp: now });\n      }\n      return odds;\n    } catch (error) {\n      console.error(`Odds Service Error for fixture ${fixtureId}:`, error);\n      return null;\n    }\n  }\n\n  async getMatchOddsBatch(fixtureIds: number[]): Promise<MatchOdds[]> {\n    const now = Date.now();\n    const uncachedIds: number[] = [];\n    const results: MatchOdds[] = [];\n\n    // Check cache for each fixture\n    for (const fixtureId of fixtureIds) {\n      const cached = this.cache.get(fixtureId);\n      if (cached && (now - cached.timestamp) < this.cacheExpiry) {\n        results.push(cached.data);\n      } else {\n        uncachedIds.push(fixtureId);\n      }\n    }\n\n    // Fetch uncached data\n    if (uncachedIds.length > 0) {\n      try {\n        const freshOdds = await this.provider.getMatchOddsBatch(uncachedIds);\n        freshOdds.forEach(odds => {\n          this.cache.set(odds.fixtureId, { data: odds, timestamp: now });\n          results.push(odds);\n        });\n      } catch (error) {\n        console.error('Batch Odds Service Error:', error);\n      }\n    }\n\n    return results;\n  }\n\n  // Convert odds to probabilities (implied probability)\n  static oddsToProb(odds: number): number {\n    return 1 / odds;\n  }\n\n  // Calculate implied xG from over/under odds\n  static oddsToExpectedGoals(over25Odds: number, under25Odds: number): number {\n    const overProb = this.oddsToProb(over25Odds);\n    const underProb = this.oddsToProb(under25Odds);\n    // Simple approximation: if over 2.5 is more likely, xG > 2.5, else < 2.5\n    return overProb > underProb ? 2.8 : 2.2;\n  }\n\n  // Calculate clean sheet probability from odds\n  static getCleanSheetProb(cleanSheetOdds: number): number {\n    return Math.min(0.8, this.oddsToProb(cleanSheetOdds));\n  }\n\n  // Derive team strength from odds\n  async deriveTeamStrength(teamId: number, recentFixtures: number[]): Promise<TeamStrength | null> {\n    if (recentFixtures.length === 0) return null;\n\n    const oddsData = await this.getMatchOddsBatch(recentFixtures);\n    if (oddsData.length === 0) return null;\n\n    let totalAttack = 0;\n    let totalDefense = 0;\n    let homeAdvantage = 1.0;\n\n    oddsData.forEach(odds => {\n      const homeWinProb = OddsService.oddsToProb(odds.homeWin);\n      const drawProb = OddsService.oddsToProb(odds.draw);\n      const awayWinProb = OddsService.oddsToProb(odds.awayWin);\n      \n      // Normalize probabilities (they don't sum to 1 due to bookmaker margin)\n      const total = homeWinProb + drawProb + awayWinProb;\n      const normalizedHome = homeWinProb / total;\n      const normalizedAway = awayWinProb / total;\n      \n      // Attack strength from win probability, defense from clean sheet odds\n      totalAttack += (normalizedHome + normalizedAway) * 50; // Scale to 0-100\n      totalDefense += OddsService.getCleanSheetProb(odds.homeCleanSheet) * 100;\n    });\n\n    return {\n      teamId,\n      attack: Math.round(totalAttack / oddsData.length),\n      defense: Math.round(totalDefense / oddsData.length),\n      xGFor: OddsService.oddsToExpectedGoals(oddsData[0].over25Goals, oddsData[0].under25Goals),\n      xGAgainst: 2.5 - OddsService.oddsToExpectedGoals(oddsData[0].over25Goals, oddsData[0].under25Goals),\n      homeAdvantage,\n      form: Math.min(100, (totalAttack / oddsData.length) + (totalDefense / oddsData.length)),\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Clear cache\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  // Get provider info\n  getProviderInfo(): { name: string; cached: number } {\n    return {\n      name: this.provider.name,\n      cached: this.cache.size\n    };\n  }\n}","size_bytes":6902},"server/services/openRouterService.ts":{"content":"/**\n * OpenRouter Service for LLM Integration\n * Provides access to Qwen3 Coder and other models via OpenRouter API\n */\n\ninterface OpenRouterResponse {\n  id: string;\n  choices: Array<{\n    message: {\n      role: string;\n      content: string;\n    };\n    finish_reason: string;\n  }>;\n  usage: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\ninterface LLMMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport class OpenRouterService {\n  private static instance: OpenRouterService;\n  private apiKey: string;\n  private baseUrl = 'https://openrouter.ai/api/v1';\n  private defaultModel = 'qwen/qwen3-235b-a22b:free'; // Free Qwen3 235B A22B model\n\n  private constructor() {\n    this.apiKey = process.env.OPENROUTER_API_KEY || '';\n    // Note: Service can operate without API key - will be detected by isConfigured()\n  }\n\n  public static getInstance(): OpenRouterService {\n    if (!OpenRouterService.instance) {\n      OpenRouterService.instance = new OpenRouterService();\n    }\n    return OpenRouterService.instance;\n  }\n\n  /**\n   * Generate a completion using the specified model\n   */\n  async generateCompletion(\n    messages: LLMMessage[],\n    options: {\n      model?: string;\n      maxTokens?: number;\n      temperature?: number;\n      stream?: boolean;\n    } = {}\n  ): Promise<string> {\n    const {\n      model = this.defaultModel,\n      maxTokens = 1000,\n      temperature = 0.7,\n      stream = false\n    } = options;\n\n    try {\n      const response = await fetch(`${this.baseUrl}/chat/completions`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'HTTP-Referer': 'https://fpl-chip-strategy-architect.repl.co',\n          'X-Title': 'FPL Chip Strategy Architect'\n        },\n        body: JSON.stringify({\n          model,\n          messages,\n          max_tokens: maxTokens,\n          temperature,\n          stream\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('OpenRouter API Error:', response.status, errorData);\n        throw new Error(`OpenRouter API error: ${response.status} - ${errorData}`);\n      }\n\n      const data: OpenRouterResponse = await response.json();\n      \n      if (!data.choices || data.choices.length === 0) {\n        throw new Error('No response choices returned from OpenRouter API');\n      }\n\n      return data.choices[0].message.content;\n    } catch (error) {\n      console.error('Error calling OpenRouter API:', error);\n      throw new Error(`Failed to generate LLM response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Generate an FPL-specific response with enhanced context\n   */\n  async generateFPLResponse(\n    userQuery: string,\n    fplContext: {\n      intent: string;\n      entities: any;\n      squadData?: any;\n      analysisData?: any;\n      recommendations?: any[];\n    },\n    conversationHistory: LLMMessage[] = []\n  ): Promise<string> {\n    // Build a comprehensive system prompt for FPL expertise\n    const systemPrompt = this.buildFPLSystemPrompt(fplContext);\n    \n    // Construct messages with conversation history\n    const messages: LLMMessage[] = [\n      { role: 'system', content: systemPrompt },\n      ...conversationHistory.slice(-6), // Keep last 6 messages for context\n      { role: 'user', content: userQuery }\n    ];\n\n    return await this.generateCompletion(messages, {\n      temperature: 0.8, // Slightly higher for more creative FPL insights\n      maxTokens: 800   // Generous token limit for detailed responses\n    });\n  }\n\n  /**\n   * Build a comprehensive system prompt for FPL expertise\n   */\n  private buildFPLSystemPrompt(fplContext: any): string {\n    const { intent, entities, squadData, analysisData, recommendations } = fplContext;\n\n    let systemPrompt = `You are an expert Fantasy Premier League (FPL) strategist and AI assistant. You provide intelligent, data-driven advice to help managers optimize their FPL teams.\n\n## Your Expertise:\n- Deep knowledge of FPL rules, mechanics, and strategy\n- Understanding of fixture difficulty, player form, and value trends\n- Expertise in chip timing (wildcard, bench boost, triple captain, free hit)\n- Transfer strategy and team optimization\n- Player comparison and differential picks\n\n## Current Context:\n- User Intent: ${intent}\n- Detected Entities: ${JSON.stringify(entities)}`;\n\n    // Add squad-specific context if available\n    if (squadData) {\n      systemPrompt += `\n- User's Team Value: £${squadData.teamValue}m\n- Bank: £${squadData.bank}m  \n- Free Transfers: ${squadData.freeTransfers}`;\n    }\n\n    // Add analysis data if available\n    if (analysisData?.insights) {\n      systemPrompt += `\n- Key Squad Insights: ${analysisData.insights.map((i: any) => i.content).join(', ')}`;\n    }\n\n    // Add recommendations if available\n    if (recommendations && recommendations.length > 0) {\n      systemPrompt += `\n- Top Recommendations: ${recommendations.map((r: any) => `${r.title}: ${r.content}`).join(', ')}`;\n    }\n\n    systemPrompt += `\n\n## Response Guidelines:\n- Be conversational and engaging, not robotic\n- Provide specific, actionable advice based on the user's situation\n- Use data and analysis to support your recommendations\n- Explain your reasoning clearly\n- Ask follow-up questions when helpful\n- Use FPL terminology naturally (GW, FDR, differential, etc.)\n- Keep responses focused and avoid unnecessary repetition\n- If you don't have specific data, acknowledge limitations but still provide helpful general advice\n\n## Response Style:\n- Professional but friendly tone\n- Use relevant emojis sparingly for emphasis\n- Structure longer responses with clear sections\n- Always end with helpful follow-up suggestions when appropriate\n\nRespond to the user's query with expertise, insight, and personality.`;\n\n    return systemPrompt;\n  }\n\n  /**\n   * Check if the service is properly configured\n   */\n  isConfigured(): boolean {\n    return !!this.apiKey;\n  }\n\n  /**\n   * Get available models (for future expansion)\n   */\n  getAvailableModels(): string[] {\n    return [\n      'qwen/qwen3-235b-a22b:free', // Free Qwen3 235B A22B (235B params, 22B active)\n      'qwen/qwen3-30b-a3b:free', // Free Qwen3-30B-A3B (MoE, 30.5B params)\n      'qwen/qwen3-coder:free', // Free Qwen3-Coder (specialized for coding)\n      'qwen/qwq-32b:free' // Free QwQ-32B (advanced reasoning)\n    ];\n  }\n}","size_bytes":6484},"server/services/rivalAnalysisService.ts":{"content":"/**\n * RivalAnalysisService - Phase 2 Enhancement\n * \n * Analyzes competing FPL managers' strategies, transfers, and chip usage patterns.\n * Provides competitive intelligence for strategic decision making.\n */\n\nimport { FPLApiService } from './fplApi';\nimport { RivalAnalysis, CompetitiveIntelligence } from '@shared/schema';\n\ninterface RivalDataProvider {\n  fetchManagerData(managerId: string): Promise<any>;\n  fetchTopManagers(count: number): Promise<any[]>;\n  fetchLeagueManagers(leagueId: string): Promise<any[]>;\n}\n\nclass MockRivalDataProvider implements RivalDataProvider {\n  async fetchManagerData(managerId: string): Promise<any> {\n    // Mock rival manager data for demonstration\n    const id = parseInt(managerId) || 1;\n    const names = ['Alex the Ace', 'Sarah Strategist', 'Mike Master', 'Pro Player', 'FPL Legend'];\n    \n    return {\n      id,\n      name: names[id % names.length],\n      overallRank: 5000 + (id % 50000),\n      gameweekRank: 1000 + (id % 10000),\n      totalPoints: 1850 + (id % 500),\n      recentTransfers: this.generateMockTransfers(id),\n      chipsUsed: this.generateMockChipUsage(id),\n      squad: this.generateMockSquad(id)\n    };\n  }\n\n  async fetchTopManagers(count: number = 100): Promise<any[]> {\n    return Array.from({ length: count }, (_, i) => ({\n      id: i + 1,\n      name: `Top Manager ${i + 1}`,\n      overallRank: i + 1,\n      totalPoints: 2200 - i * 2,\n      gameweekPoints: 70 - (i % 30)\n    }));\n  }\n\n  async fetchLeagueManagers(leagueId: string): Promise<any[]> {\n    const leagueSize = parseInt(leagueId) % 50 + 10; // 10-60 managers\n    return Array.from({ length: leagueSize }, (_, i) => ({\n      id: i + 1000,\n      name: `League Player ${i + 1}`,\n      rank: i + 1,\n      totalPoints: 1950 - i * 10,\n      gameweekPoints: 65 - (i % 25)\n    }));\n  }\n\n  private generateMockTransfers(seed: number): any[] {\n    const playerNames = [\n      'Salah', 'Kane', 'De Bruyne', 'Son', 'Haaland', 'Mané', 'Sterling', \n      'Bruno', 'Vardy', 'Rashford', 'Mount', 'Grealish', 'Mahrez'\n    ];\n    \n    const reasons = ['popular_pick', 'differential', 'fixture_swing', 'price_rise'];\n    \n    return Array.from({ length: (seed % 5) + 2 }, (_, i) => ({\n      playersIn: [{\n        playerId: (seed + i) % 1000,\n        playerName: playerNames[(seed + i) % playerNames.length],\n        gameweek: 15 - i,\n        reason: reasons[(seed + i) % reasons.length]\n      }],\n      playersOut: [{\n        playerId: (seed + i + 500) % 1000,\n        playerName: playerNames[(seed + i + 7) % playerNames.length],\n        gameweek: 15 - i,\n        reason: 'fixture_swing'\n      }]\n    }));\n  }\n\n  private generateMockChipUsage(seed: number): any[] {\n    const chips = ['wildcard', 'bench-boost', 'triple-captain', 'free-hit'];\n    return chips.slice(0, (seed % 3) + 1).map((chip, i) => ({\n      chip,\n      gameweek: 10 + i * 3 + (seed % 5),\n      success: Math.random() > 0.3,\n      points: 45 + (seed % 30) + (i * 10)\n    }));\n  }\n\n  private generateMockSquad(seed: number): any[] {\n    return Array.from({ length: 15 }, (_, i) => ({\n      playerId: seed + i,\n      playerName: `Player ${seed + i}`,\n      position: ['GK', 'DEF', 'DEF', 'DEF', 'DEF', 'DEF', 'MID', 'MID', 'MID', 'MID', 'MID', 'FWD', 'FWD', 'FWD', 'GK'][i],\n      price: 4.5 + Math.random() * 8,\n      isStarter: i < 11\n    }));\n  }\n}\n\nexport class RivalAnalysisService {\n  private static instance: RivalAnalysisService;\n  private provider: RivalDataProvider;\n  private fplApiService: FPLApiService;\n  private cache = new Map<string, RivalAnalysis>();\n  private cacheExpiry = new Map<string, number>();\n  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 minutes\n\n  private constructor() {\n    this.provider = new MockRivalDataProvider();\n    this.fplApiService = FPLApiService.getInstance();\n  }\n\n  public static getInstance(): RivalAnalysisService {\n    if (!RivalAnalysisService.instance) {\n      RivalAnalysisService.instance = new RivalAnalysisService();\n    }\n    return RivalAnalysisService.instance;\n  }\n\n  /**\n   * Analyze a specific rival manager\n   */\n  async analyzeRival(managerId: string): Promise<RivalAnalysis> {\n    const cacheKey = `rival_${managerId}`;\n    \n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      const cached = this.cache.get(cacheKey);\n      if (cached) {\n        return cached;\n      }\n    }\n\n    try {\n      const managerData = await this.provider.fetchManagerData(managerId);\n      \n      const analysis: RivalAnalysis = {\n        managerId,\n        managerName: managerData.name,\n        overallRank: managerData.overallRank,\n        gameweekRank: managerData.gameweekRank,\n        totalPoints: managerData.totalPoints,\n        transfers: {\n          playersIn: this.flattenTransfers(managerData.recentTransfers, 'playersIn'),\n          playersOut: this.flattenTransfers(managerData.recentTransfers, 'playersOut')\n        },\n        strategy: this.classifyStrategy(managerData),\n        chipsUsed: managerData.chipsUsed,\n        lastUpdated: new Date().toISOString()\n      };\n\n      // Cache the analysis\n      this.cache.set(cacheKey, analysis);\n      this.cacheExpiry.set(cacheKey, Date.now() + this.CACHE_DURATION);\n      \n      return analysis;\n    } catch (error) {\n      console.error(`Failed to analyze rival ${managerId}:`, error);\n      throw new Error(`Rival analysis failed for manager ${managerId}`);\n    }\n  }\n\n  /**\n   * Get competitive intelligence about the FPL meta\n   */\n  async getCompetitiveIntelligence(): Promise<CompetitiveIntelligence> {\n    const cacheKey = 'competitive_intelligence';\n    \n    // Check cache first (longer cache for meta analysis)\n    if (this.isCacheValid(cacheKey, 60 * 60 * 1000)) { // 1 hour cache\n      const cached = this.cache.get(cacheKey) as any;\n      if (cached && cached.metaTrends) {\n        return cached as CompetitiveIntelligence;\n      }\n    }\n\n    try {\n      // Get top managers' data\n      const topManagers = await this.provider.fetchTopManagers(100);\n      const topManagerAnalyses = await Promise.all(\n        topManagers.slice(0, 20).map(manager => this.analyzeRival(manager.id.toString()))\n      );\n\n      const intelligence: CompetitiveIntelligence = {\n        metaTrends: await this.analyzeMetaTrends(topManagerAnalyses),\n        rivalInsights: {\n          topManagerMoves: topManagerAnalyses.slice(0, 10),\n          commonStrategies: this.identifyCommonStrategies(topManagerAnalyses),\n          chipUsagePatterns: this.analyzeChipUsagePatterns(topManagerAnalyses)\n        },\n        marketInefficiencies: await this.identifyMarketInefficiencies(topManagerAnalyses),\n        lastUpdated: new Date().toISOString()\n      };\n\n      // Cache the intelligence\n      this.cache.set(cacheKey, intelligence as any);\n      this.cacheExpiry.set(cacheKey, Date.now() + 60 * 60 * 1000);\n      \n      return intelligence;\n    } catch (error) {\n      console.error('Failed to generate competitive intelligence:', error);\n      throw new Error('Competitive intelligence analysis failed');\n    }\n  }\n\n  /**\n   * Analyze current meta trends from top managers\n   */\n  private async analyzeMetaTrends(analyses: RivalAnalysis[]): Promise<CompetitiveIntelligence['metaTrends']> {\n    // Count popular transfers\n    const transferCounts = new Map<number, { count: number; playerName: string; trend: 'rising' | 'falling' | 'stable' }>();\n    \n    analyses.forEach(analysis => {\n      analysis.transfers.playersIn.forEach(transfer => {\n        const existing = transferCounts.get(transfer.playerId) || { count: 0, playerName: transfer.playerName, trend: 'stable' as const };\n        transferCounts.set(transfer.playerId, {\n          ...existing,\n          count: existing.count + 1,\n          trend: existing.count > 3 ? 'rising' : 'stable'\n        });\n      });\n    });\n\n    const popularPicks = Array.from(transferCounts.entries())\n      .sort(([, a], [, b]) => b.count - a.count)\n      .slice(0, 20)\n      .map(([playerId, data]) => ({\n        playerId,\n        playerName: data.playerName,\n        ownership: 15 + (data.count * 2), // Mock ownership calculation\n        trend: data.trend,\n        differential: data.count < 5 // Less than 5 top managers = differential\n      }));\n\n    const emergingPlayers = Array.from(transferCounts.entries())\n      .filter(([, data]) => data.count >= 3 && data.count <= 8) // Emerging but not yet mainstream\n      .map(([playerId, data]) => ({\n        playerId,\n        playerName: data.playerName,\n        ownershipGrowth: data.count * 3,\n        reasons: this.inferTransferReasons(data.count)\n      }));\n\n    return {\n      popularPicks,\n      emergingPlayers\n    };\n  }\n\n  /**\n   * Identify common strategies among top managers\n   */\n  private identifyCommonStrategies(analyses: RivalAnalysis[]): string[] {\n    const strategies = analyses.map(a => a.strategy);\n    const strategyCounts = strategies.reduce((acc, strategy) => {\n      acc[strategy] = (acc[strategy] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return Object.entries(strategyCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([strategy, count]) => `${strategy} (${count}/${analyses.length} managers)`);\n  }\n\n  /**\n   * Analyze chip usage patterns\n   */\n  private analyzeChipUsagePatterns(analyses: RivalAnalysis[]): Array<{\n    chip: string;\n    optimalGameweeks: number[];\n    averageReturn: number;\n  }> {\n    const chipData = new Map<string, { gameweeks: number[]; points: number[] }>();\n\n    analyses.forEach(analysis => {\n      analysis.chipsUsed.forEach(chipUsage => {\n        const existing = chipData.get(chipUsage.chip) || { gameweeks: [], points: [] };\n        existing.gameweeks.push(chipUsage.gameweek);\n        existing.points.push(chipUsage.points);\n        chipData.set(chipUsage.chip, existing);\n      });\n    });\n\n    return Array.from(chipData.entries()).map(([chip, data]) => ({\n      chip,\n      optimalGameweeks: this.findOptimalGameweeks(data.gameweeks),\n      averageReturn: data.points.length > 0 ? data.points.reduce((sum, p) => sum + p, 0) / data.points.length : 0\n    }));\n  }\n\n  /**\n   * Identify market inefficiencies\n   */\n  private async identifyMarketInefficiencies(analyses: RivalAnalysis[]): Promise<CompetitiveIntelligence['marketInefficiencies']> {\n    // Mock implementation - in real version would compare actual vs expected ownership\n    const playerFrequency = new Map<number, { name: string; count: number }>();\n    \n    analyses.forEach(analysis => {\n      analysis.transfers.playersIn.forEach(transfer => {\n        const existing = playerFrequency.get(transfer.playerId) || { name: transfer.playerName, count: 0 };\n        playerFrequency.set(transfer.playerId, { ...existing, count: existing.count + 1 });\n      });\n    });\n\n    return Array.from(playerFrequency.entries())\n      .filter(([, data]) => data.count > 2) // Players transferred in by multiple top managers\n      .map(([playerId, data]) => ({\n        playerId,\n        playerName: data.name,\n        expectedVsActualOwnership: data.count * 2 - 10, // Mock calculation\n        opportunity: data.count > 5 ? 'undervalued' as const : 'overvalued' as const,\n        confidence: Math.min(90, data.count * 15)\n      }));\n  }\n\n  /**\n   * Classify manager strategy based on their decisions\n   */\n  private classifyStrategy(managerData: any): 'template' | 'differential' | 'balanced' | 'contrarian' {\n    const recentTransfers = managerData.recentTransfers || [];\n    const differentialMoves = recentTransfers.filter((t: any) => \n      t.playersIn.some((p: any) => p.reason === 'differential')\n    ).length;\n\n    if (differentialMoves > 2) return 'contrarian';\n    if (differentialMoves > 0) return 'differential';\n    if (recentTransfers.length < 3) return 'template';\n    return 'balanced';\n  }\n\n  /**\n   * Flatten transfer arrays for easier processing\n   */\n  private flattenTransfers(transfers: any[], type: 'playersIn' | 'playersOut'): any[] {\n    return transfers.reduce((acc, transfer) => {\n      return acc.concat(transfer[type] || []);\n    }, []);\n  }\n\n  /**\n   * Infer reasons for player transfers based on frequency\n   */\n  private inferTransferReasons(count: number): string[] {\n    const reasons = [];\n    if (count > 5) reasons.push('fixture run');\n    if (count > 3) reasons.push('form improvement');\n    if (count > 7) reasons.push('price rise expected');\n    return reasons.length > 0 ? reasons : ['emerging pick'];\n  }\n\n  /**\n   * Find optimal gameweeks for chip usage\n   */\n  private findOptimalGameweeks(gameweeks: number[]): number[] {\n    // Find most common gameweeks for chip usage\n    const gwCounts = gameweeks.reduce((acc, gw) => {\n      acc[gw] = (acc[gw] || 0) + 1;\n      return acc;\n    }, {} as Record<number, number>);\n\n    return Object.entries(gwCounts)\n      .sort(([, a], [, b]) => b - a)\n      .slice(0, 3)\n      .map(([gw]) => parseInt(gw));\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  private isCacheValid(key: string, customDuration?: number): boolean {\n    const expiry = this.cacheExpiry.get(key);\n    const duration = customDuration || this.CACHE_DURATION;\n    return expiry ? Date.now() < expiry : false;\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n    this.cacheExpiry.clear();\n    console.log('Rival analysis cache cleared');\n  }\n\n  /**\n   * Get provider information for debugging\n   */\n  public getProviderInfo(): { name: string; available: boolean } {\n    return {\n      name: 'mock-rival-analysis',\n      available: true\n    };\n  }\n}","size_bytes":13511},"server/services/simulationEngine.ts":{"content":"import { PlayerSimOutcome, SimulationSummary, ProcessedPlayer, MatchOdds, PlayerAdvanced } from \"@shared/schema\";\n\nexport interface SimulationConfig {\n  runs: number; // Number of Monte Carlo runs\n  gameweeksToSimulate: number[]; // Which gameweeks to analyze\n  strategy: string; // Description of strategy being simulated\n  targetThreshold?: number; // Minimum points for \"success\" classification\n  useOdds: boolean; // Whether to incorporate odds data\n  useAdvancedStats: boolean; // Whether to use advanced player stats\n}\n\nexport interface GameweekFixture {\n  gameweek: number;\n  playerId: number;\n  hasFixture: boolean;\n  odds?: MatchOdds;\n  fdr: number;\n  isHome: boolean;\n}\n\n// Individual simulation result for one run\ninterface SimulationRun {\n  totalPoints: number;\n  playerPoints: { [playerId: number]: number };\n  gameweekPoints: { [gameweek: number]: number };\n  haulsCount: number;\n  blanksCount: number;\n}\n\nexport class SimulationEngine {\n  private static instance: SimulationEngine;\n\n  public static getInstance(): SimulationEngine {\n    if (!SimulationEngine.instance) {\n      SimulationEngine.instance = new SimulationEngine();\n    }\n    return SimulationEngine.instance;\n  }\n\n  // Main simulation method for a squad of players\n  async simulateSquad(\n    players: ProcessedPlayer[],\n    fixtures: GameweekFixture[],\n    config: SimulationConfig\n  ): Promise<SimulationSummary> {\n    const runs: SimulationRun[] = [];\n\n    // Run Monte Carlo simulations\n    for (let i = 0; i < config.runs; i++) {\n      const run = this.runSingleSimulation(players, fixtures, config);\n      runs.push(run);\n    }\n\n    // Analyze results\n    return this.analyzeSimulationResults(runs, config);\n  }\n\n  // Simulate individual player over specified gameweeks\n  async simulatePlayer(\n    player: ProcessedPlayer,\n    fixtures: GameweekFixture[],\n    config: SimulationConfig\n  ): Promise<PlayerSimOutcome> {\n    const playerFixtures = fixtures.filter(f => f.playerId === player.id);\n    const runs: number[] = [];\n    let haulsCount = 0;\n    let blankCount = 0;\n    let bestGW = 0;\n    let worstGW = 999;\n    let bestPoints = 0;\n    let worstPoints = 999;\n\n    // Monte Carlo runs for this player\n    for (let i = 0; i < config.runs; i++) {\n      const totalPoints = this.simulatePlayerPoints(player, playerFixtures, config);\n      runs.push(totalPoints);\n\n      if (totalPoints >= 10) haulsCount++;\n      if (totalPoints <= 2) blankCount++;\n\n      // Track best/worst gameweeks (simplified - assume one fixture per GW)\n      playerFixtures.forEach(fixture => {\n        const gwPoints = this.simulateGameweekPoints(player, fixture, config);\n        if (gwPoints > bestPoints) {\n          bestPoints = gwPoints;\n          bestGW = fixture.gameweek;\n        }\n        if (gwPoints < worstPoints) {\n          worstPoints = gwPoints;\n          worstGW = fixture.gameweek;\n        }\n      });\n    }\n\n    // Calculate statistics\n    runs.sort((a, b) => a - b);\n    const mean = runs.reduce((sum, val) => sum + val, 0) / runs.length;\n    const variance = runs.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / runs.length;\n    const stdDev = Math.sqrt(variance);\n\n    return {\n      playerId: player.id,\n      gameweeksSimulated: config.gameweeksToSimulate.length,\n      meanPoints: Math.round(mean * 10) / 10,\n      p10: runs[Math.floor(runs.length * 0.1)],\n      p50: runs[Math.floor(runs.length * 0.5)],\n      p90: runs[Math.floor(runs.length * 0.9)],\n      standardDeviation: Math.round(stdDev * 10) / 10,\n      haulsCount: Math.round(haulsCount / config.runs * 100),\n      blankCount: Math.round(blankCount / config.runs * 100),\n      bestGameweek: bestGW || config.gameweeksToSimulate[0],\n      worstGameweek: worstGW !== 999 ? worstGW : config.gameweeksToSimulate[0],\n      confidence: Math.min(100, Math.max(50, 100 - stdDev * 5)) // Lower std dev = higher confidence\n    };\n  }\n\n  private runSingleSimulation(\n    players: ProcessedPlayer[],\n    fixtures: GameweekFixture[],\n    config: SimulationConfig\n  ): SimulationRun {\n    let totalPoints = 0;\n    const playerPoints: { [playerId: number]: number } = {};\n    const gameweekPoints: { [gameweek: number]: number } = {};\n    let haulsCount = 0;\n    let blanksCount = 0;\n\n    // Simulate each player\n    players.forEach(player => {\n      const playerFixtures = fixtures.filter(f => f.playerId === player.id);\n      const points = this.simulatePlayerPoints(player, playerFixtures, config);\n      \n      playerPoints[player.id] = points;\n      totalPoints += points;\n\n      if (points >= 10) haulsCount++;\n      if (points <= 2) blanksCount++;\n    });\n\n    // Calculate gameweek totals\n    config.gameweeksToSimulate.forEach(gw => {\n      gameweekPoints[gw] = players.reduce((sum, player) => {\n        const playerGWFixtures = fixtures.filter(f => f.playerId === player.id && f.gameweek === gw);\n        if (playerGWFixtures.length > 0) {\n          return sum + this.simulateGameweekPoints(player, playerGWFixtures[0], config);\n        }\n        return sum;\n      }, 0);\n    });\n\n    return {\n      totalPoints,\n      playerPoints,\n      gameweekPoints,\n      haulsCount,\n      blanksCount\n    };\n  }\n\n  private simulatePlayerPoints(\n    player: ProcessedPlayer,\n    fixtures: GameweekFixture[],\n    config: SimulationConfig\n  ): number {\n    return fixtures.reduce((total, fixture) => {\n      return total + this.simulateGameweekPoints(player, fixture, config);\n    }, 0);\n  }\n\n  private simulateGameweekPoints(\n    player: ProcessedPlayer,\n    fixture: GameweekFixture,\n    config: SimulationConfig\n  ): number {\n    if (!fixture.hasFixture) return 0;\n\n    // Base expected points from historical data\n    let basePoints = this.getHistoricalExpectedPoints(player);\n    \n    // Adjust for fixture difficulty\n    const fdrAdjustment = this.getFDRAdjustment(fixture.fdr, fixture.isHome);\n    basePoints *= fdrAdjustment;\n\n    // Use odds data if available and enabled\n    if (config.useOdds && fixture.odds) {\n      basePoints *= this.getOddsAdjustment(player, fixture.odds);\n    }\n\n    // Use advanced stats if available and enabled\n    if (config.useAdvancedStats && player.advancedStats) {\n      basePoints *= this.getAdvancedStatsAdjustment(player, player.advancedStats);\n    }\n\n    // Add volatility using player's historical variance\n    const volatility = player.volatility || this.getDefaultVolatility(player);\n    const randomness = this.generateNormalRandom() * volatility;\n\n    return Math.max(0, Math.round((basePoints + randomness) * 10) / 10);\n  }\n\n  private getHistoricalExpectedPoints(player: ProcessedPlayer): number {\n    // Estimate points per gameweek from season total\n    const gamesPlayed = Math.max(1, 15); // Rough estimate, could be improved\n    return player.points / gamesPlayed;\n  }\n\n  private getFDRAdjustment(fdr: number, isHome: boolean): number {\n    // Convert FDR to multiplier (easier fixtures = higher multiplier)\n    let adjustment = 1.3 - (fdr * 0.15); // FDR 1 = 1.15x, FDR 5 = 0.55x\n    \n    // Home advantage\n    if (isHome) {\n      adjustment *= 1.1;\n    }\n\n    return Math.max(0.4, Math.min(1.8, adjustment));\n  }\n\n  private getOddsAdjustment(player: ProcessedPlayer, odds: MatchOdds): number {\n    // Use clean sheet odds for defensive points, goal odds for attacking points\n    let adjustment = 1.0;\n\n    if (player.position === 'GK' || player.position === 'DEF') {\n      // Defenders benefit from clean sheet probability\n      const csProb = 1 / odds.homeCleanSheet; // Assuming home team\n      adjustment *= (1 + csProb * 0.3);\n    }\n\n    if (player.position === 'MID' || player.position === 'FWD') {\n      // Attackers benefit from goals probability\n      const goalProb = 1 / odds.over25Goals; // Over 2.5 goals\n      adjustment *= (1 + goalProb * 0.2);\n    }\n\n    return Math.max(0.7, Math.min(1.4, adjustment));\n  }\n\n  private getAdvancedStatsAdjustment(player: ProcessedPlayer, stats: PlayerAdvanced): number {\n    let adjustment = 1.0;\n\n    // Minutes adjustment (rotation risk)\n    const minutesReliability = Math.min(1.0, stats.xMins / 90);\n    adjustment *= (0.5 + 0.5 * minutesReliability);\n\n    // Form trend adjustment\n    switch (stats.formTrend) {\n      case 'rising':\n        adjustment *= 1.15;\n        break;\n      case 'declining':\n        adjustment *= 0.85;\n        break;\n      default:\n        break; // No adjustment for stable\n    }\n\n    // Role adjustment\n    switch (stats.role) {\n      case 'nailed':\n        adjustment *= 1.1;\n        break;\n      case 'benchwarmer':\n        adjustment *= 0.6;\n        break;\n      default:\n        break; // No adjustment for rotation\n    }\n\n    return Math.max(0.4, Math.min(1.6, adjustment));\n  }\n\n  private getDefaultVolatility(player: ProcessedPlayer): number {\n    // Default volatility based on position\n    switch (player.position) {\n      case 'FWD': return 4.5;\n      case 'MID': return 3.5;\n      case 'DEF': return 2.5;\n      case 'GK': return 2.0;\n      default: return 3.0;\n    }\n  }\n\n  // Box-Muller transformation for normal random numbers\n  private generateNormalRandom(): number {\n    const u = Math.random();\n    const v = Math.random();\n    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n  }\n\n  private analyzeSimulationResults(runs: SimulationRun[], config: SimulationConfig): SimulationSummary {\n    // Sort runs by total points\n    runs.sort((a, b) => a.totalPoints - b.totalPoints);\n\n    const totalPoints = runs.map(r => r.totalPoints);\n    const mean = totalPoints.reduce((sum, val) => sum + val, 0) / totalPoints.length;\n    const variance = totalPoints.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / totalPoints.length;\n\n    const p10Index = Math.floor(runs.length * 0.1);\n    const p90Index = Math.floor(runs.length * 0.9);\n\n    const target = config.targetThreshold || mean;\n    const successCount = runs.filter(r => r.totalPoints >= target).length;\n    const boomCount = runs.filter(r => r.totalPoints >= mean * 1.2).length;\n    const bustCount = runs.filter(r => r.totalPoints <= mean * 0.8).length;\n\n    const stdDev = Math.sqrt(variance);\n    const confidenceInterval: [number, number] = [\n      Math.round((mean - 1.28 * stdDev) * 10) / 10, // 80% CI lower\n      Math.round((mean + 1.28 * stdDev) * 10) / 10  // 80% CI upper\n    ];\n\n    // Recommendation strength based on consistency and upside\n    let recommendationStrength: 'strong' | 'moderate' | 'weak';\n    const consistencyScore = 1 - (stdDev / mean); // Higher = more consistent\n    const upsideScore = (runs[p90Index].totalPoints - mean) / mean; // Higher = more upside\n\n    if (consistencyScore > 0.7 && upsideScore > 0.2) {\n      recommendationStrength = 'strong';\n    } else if (consistencyScore > 0.5 || upsideScore > 0.15) {\n      recommendationStrength = 'moderate';\n    } else {\n      recommendationStrength = 'weak';\n    }\n\n    return {\n      strategy: config.strategy,\n      runs: config.runs,\n      gameweeksAnalyzed: config.gameweeksToSimulate,\n      \n      meanTotalPoints: Math.round(mean * 10) / 10,\n      p10TotalPoints: runs[p10Index].totalPoints,\n      p90TotalPoints: runs[p90Index].totalPoints,\n      \n      successRate: Math.round((successCount / runs.length) * 100),\n      boomRate: Math.round((boomCount / runs.length) * 100),\n      bustRate: Math.round((bustCount / runs.length) * 100),\n      \n      variance: Math.round(variance * 10) / 10,\n      confidenceInterval,\n      recommendationStrength,\n      \n      lastUpdated: new Date().toISOString()\n    };\n  }\n}","size_bytes":11472},"server/services/statsService.ts":{"content":"import { PlayerAdvanced } from \"@shared/schema\";\n\n// Provider interface for different stats APIs\nexport interface IStatsProvider {\n  name: string;\n  getPlayerAdvanced(playerId: number): Promise<PlayerAdvanced | null>;\n  getPlayerAdvancedBatch(playerIds: number[]): Promise<PlayerAdvanced[]>;\n  isAvailable(): Promise<boolean>;\n}\n\n// Mock provider for development and fallback\nclass MockStatsProvider implements IStatsProvider {\n  name = \"mock\";\n\n  async getPlayerAdvanced(playerId: number): Promise<PlayerAdvanced | null> {\n    // Generate realistic mock stats based on player ID (deterministic for consistency)\n    const seed = playerId % 1000;\n    const position = this.inferPosition(playerId); // Infer from FPL data patterns\n    \n    // Different baseline stats by position\n    let baseXG = 0.1;\n    let baseXA = 0.1; \n    let baseXMins = 65;\n    let volatility = 3.0;\n\n    switch (position) {\n      case 'FWD':\n        baseXG = 0.4 + (seed % 20) / 100; // 0.4 to 0.6\n        baseXA = 0.2 + (seed % 15) / 100;\n        baseXMins = 70 + (seed % 20);\n        volatility = 4.5 + (seed % 30) / 10;\n        break;\n      case 'MID':\n        baseXG = 0.15 + (seed % 25) / 100;\n        baseXA = 0.3 + (seed % 20) / 100;\n        baseXMins = 75 + (seed % 15);\n        volatility = 3.5 + (seed % 25) / 10;\n        break;\n      case 'DEF':\n        baseXG = 0.05 + (seed % 10) / 100;\n        baseXA = 0.1 + (seed % 15) / 100;\n        baseXMins = 80 + (seed % 10);\n        volatility = 2.5 + (seed % 20) / 10;\n        break;\n      case 'GK':\n        baseXG = 0;\n        baseXA = 0;\n        baseXMins = 85 + (seed % 5);\n        volatility = 2.0 + (seed % 15) / 10;\n        break;\n    }\n\n    // Rotation risk assessment\n    const role = baseXMins > 80 ? 'nailed' : baseXMins > 60 ? 'rotation' : 'benchwarmer';\n    \n    // Form trend (based on recent performance - mock)\n    const trendSeed = (seed + 50) % 100;\n    const formTrend = trendSeed > 70 ? 'rising' : trendSeed < 30 ? 'declining' : 'stable';\n\n    return {\n      playerId,\n      xG: Math.round(baseXG * 100) / 100,\n      xA: Math.round(baseXA * 100) / 100,\n      xMins: Math.round(baseXMins),\n      role: role as 'nailed' | 'rotation' | 'benchwarmer',\n      volatility: Math.round(volatility * 10) / 10,\n      formTrend: formTrend as 'rising' | 'stable' | 'declining',\n      fixtureAdjustedXG: Math.round(baseXG * (1 + (seed % 20 - 10) / 100) * 100) / 100,\n      fixtureAdjustedXA: Math.round(baseXA * (1 + (seed % 20 - 10) / 100) * 100) / 100,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  async getPlayerAdvancedBatch(playerIds: number[]): Promise<PlayerAdvanced[]> {\n    return Promise.all(\n      playerIds.map(id => this.getPlayerAdvanced(id)).filter(Boolean) as Promise<PlayerAdvanced>[]\n    );\n  }\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  private inferPosition(playerId: number): 'GK' | 'DEF' | 'MID' | 'FWD' {\n    // Simple heuristic based on FPL player ID ranges (approximate)\n    if (playerId <= 50) return 'GK';\n    if (playerId <= 200) return 'DEF';\n    if (playerId <= 400) return 'MID';\n    return 'FWD';\n  }\n}\n\n// Service class for advanced stats management\nexport class StatsService {\n  private static instance: StatsService;\n  private cache: Map<number, { data: PlayerAdvanced; timestamp: number }> = new Map();\n  private readonly cacheExpiry = 60 * 60 * 1000; // 1 hour (stats change less frequently)\n  private provider: IStatsProvider;\n\n  constructor(provider?: IStatsProvider) {\n    // Use environment variable to determine provider, fallback to mock\n    const providerName = process.env.STATS_PROVIDER || 'mock';\n    this.provider = provider || this.createProvider(providerName);\n  }\n\n  public static getInstance(): StatsService {\n    if (!StatsService.instance) {\n      StatsService.instance = new StatsService();\n    }\n    return StatsService.instance;\n  }\n\n  private createProvider(providerName: string): IStatsProvider {\n    switch (providerName.toLowerCase()) {\n      case 'mock':\n      default:\n        return new MockStatsProvider();\n      // Future providers can be added here:\n      // case 'understat':\n      //   return new UnderstatProvider(process.env.UNDERSTAT_API_KEY!);\n      // case 'fbref':\n      //   return new FBRefProvider(process.env.FBREF_API_KEY!);\n    }\n  }\n\n  async getPlayerAdvanced(playerId: number): Promise<PlayerAdvanced | null> {\n    // Check cache first\n    const cached = this.cache.get(playerId);\n    const now = Date.now();\n    \n    if (cached && (now - cached.timestamp) < this.cacheExpiry) {\n      return cached.data;\n    }\n\n    try {\n      const stats = await this.provider.getPlayerAdvanced(playerId);\n      if (stats) {\n        this.cache.set(playerId, { data: stats, timestamp: now });\n      }\n      return stats;\n    } catch (error) {\n      console.error(`Stats Service Error for player ${playerId}:`, error);\n      return null;\n    }\n  }\n\n  async getPlayerAdvancedBatch(playerIds: number[]): Promise<PlayerAdvanced[]> {\n    const now = Date.now();\n    const uncachedIds: number[] = [];\n    const results: PlayerAdvanced[] = [];\n\n    // Check cache for each player\n    for (const playerId of playerIds) {\n      const cached = this.cache.get(playerId);\n      if (cached && (now - cached.timestamp) < this.cacheExpiry) {\n        results.push(cached.data);\n      } else {\n        uncachedIds.push(playerId);\n      }\n    }\n\n    // Fetch uncached data\n    if (uncachedIds.length > 0) {\n      try {\n        const freshStats = await this.provider.getPlayerAdvancedBatch(uncachedIds);\n        freshStats.forEach(stats => {\n          this.cache.set(stats.playerId, { data: stats, timestamp: now });\n          results.push(stats);\n        });\n      } catch (error) {\n        console.error('Batch Stats Service Error:', error);\n      }\n    }\n\n    return results;\n  }\n\n  // Calculate historical volatility from FPL data (fallback if not provided by stats)\n  static calculateVolatility(gameweekScores: number[]): number {\n    if (gameweekScores.length < 3) return 0;\n    \n    const mean = gameweekScores.reduce((sum, score) => sum + score, 0) / gameweekScores.length;\n    const variance = gameweekScores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / gameweekScores.length;\n    \n    return Math.round(Math.sqrt(variance) * 10) / 10;\n  }\n\n  // Calculate form trend from recent performance\n  static calculateFormTrend(recentScores: number[]): 'rising' | 'stable' | 'declining' {\n    if (recentScores.length < 4) return 'stable';\n    \n    const firstHalf = recentScores.slice(0, Math.floor(recentScores.length / 2));\n    const secondHalf = recentScores.slice(Math.floor(recentScores.length / 2));\n    \n    const firstAvg = firstHalf.reduce((sum, score) => sum + score, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((sum, score) => sum + score, 0) / secondHalf.length;\n    \n    const improvement = secondAvg - firstAvg;\n    \n    if (improvement > 1.5) return 'rising';\n    if (improvement < -1.5) return 'declining';\n    return 'stable';\n  }\n\n  // Enhance basic player stats with fixture adjustments\n  adjustStatsForFixtures(stats: PlayerAdvanced, upcomingFDR: number[]): PlayerAdvanced {\n    if (upcomingFDR.length === 0) return stats;\n    \n    const avgFDR = upcomingFDR.reduce((sum, fdr) => sum + fdr, 0) / upcomingFDR.length;\n    \n    // Better fixtures (lower FDR) = higher adjusted stats\n    const adjustment = (3.5 - avgFDR) * 0.15; // -0.225 to +0.375 multiplier\n    \n    return {\n      ...stats,\n      fixtureAdjustedXG: Math.max(0, Math.round((stats.xG * (1 + adjustment)) * 100) / 100),\n      fixtureAdjustedXA: Math.max(0, Math.round((stats.xA * (1 + adjustment)) * 100) / 100),\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Clear cache\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  // Get provider info\n  getProviderInfo(): { name: string; cached: number } {\n    return {\n      name: this.provider.name,\n      cached: this.cache.size\n    };\n  }\n}","size_bytes":7944},"server/services/transferEngine.ts":{"content":"import {\n  type FPLPlayer,\n  type FPLTeam,\n  type ProcessedPlayer,\n  type TransferTarget,\n  type TransferMove,\n  type TransferPlan,\n  type ChipType,\n  type GameweekFDR\n} from \"@shared/schema\";\nimport { FPLApiService } from \"./fplApi\";\n\ninterface SquadConstraints {\n  maxPlayersPerTeam: number;\n  formation: { GK: number; DEF: number; MID: number; FWD: number };\n  maxBudget: number;\n  freeTransfers: number;\n}\n\ninterface TransferContext {\n  targetGameweek: number;\n  chipType?: ChipType;\n  maxHits: number;\n  includeRiskyMoves: boolean;\n  gameweeks: GameweekFDR[];\n}\n\nexport class TransferEngine {\n  private fplApi: FPLApiService;\n\n  constructor() {\n    this.fplApi = FPLApiService.getInstance();\n  }\n\n  async generateTransferPlans(\n    currentSquad: ProcessedPlayer[],\n    budget: number,\n    freeTransfers: number,\n    context: TransferContext\n  ): Promise<TransferPlan[]> {\n    try {\n      console.log('Generating transfer plans for budget:', budget, 'FT:', freeTransfers);\n      \n      const plans: TransferPlan[] = [];\n      const constraints = this.buildConstraints(currentSquad, budget, freeTransfers);\n      \n      // Get all available players with expected points\n      const allPlayers = await this.fplApi.getAllPlayersWithExpectedPoints(5);\n      const candidatePool = this.buildCandidatePool(allPlayers, currentSquad, constraints);\n      \n      // Generate different types of plans\n      const conservativePlan = await this.generateConservativePlan(\n        currentSquad, candidatePool, constraints, context\n      );\n      \n      const aggressivePlan = await this.generateAggressivePlan(\n        currentSquad, candidatePool, constraints, context\n      );\n      \n      const chipOptimizedPlan = context.chipType\n        ? await this.generateChipOptimizedPlan(\n            currentSquad, candidatePool, constraints, context\n          )\n        : null;\n\n      if (conservativePlan) plans.push(conservativePlan);\n      if (aggressivePlan) plans.push(aggressivePlan);\n      if (chipOptimizedPlan) plans.push(chipOptimizedPlan);\n\n      // Sort plans by projected gain vs cost ratio\n      return plans\n        .filter(plan => plan.feasible)\n        .sort((a, b) => {\n          const aRatio = a.projectedGain / Math.max(1, a.totalCost + 1);\n          const bRatio = b.projectedGain / Math.max(1, b.totalCost + 1);\n          return bRatio - aRatio;\n        })\n        .slice(0, 3); // Return top 3 plans\n    } catch (error) {\n      console.error('Error generating transfer plans:', error);\n      return [];\n    }\n  }\n\n  private buildConstraints(\n    currentSquad: ProcessedPlayer[],\n    budget: number,\n    freeTransfers: number\n  ): SquadConstraints {\n    const positionCounts = {\n      GK: currentSquad.filter(p => p.position === 'GK').length,\n      DEF: currentSquad.filter(p => p.position === 'DEF').length,\n      MID: currentSquad.filter(p => p.position === 'MID').length,\n      FWD: currentSquad.filter(p => p.position === 'FWD').length\n    };\n\n    return {\n      maxPlayersPerTeam: 3,\n      formation: positionCounts,\n      maxBudget: budget,\n      freeTransfers\n    };\n  }\n\n  private buildCandidatePool(\n    allPlayers: Array<FPLPlayer & { expectedPoints: number }>,\n    currentSquad: ProcessedPlayer[],\n    constraints: SquadConstraints\n  ): TransferTarget[] {\n    const currentPlayerIds = new Set(currentSquad.map(p => p.id));\n    \n    return allPlayers\n      .filter(player => !currentPlayerIds.has(player.id))\n      .filter(player => player.now_cost / 10 <= constraints.maxBudget + 5) // Allow some flexibility\n      .map(player => ({\n        playerId: player.id,\n        name: player.web_name,\n        position: this.getPositionName(player.element_type),\n        teamId: player.team,\n        teamName: '', // Will be filled from team data\n        price: player.now_cost / 10,\n        expectedPoints: player.expectedPoints,\n        reason: this.generateTransferReason(player, currentSquad)\n      }))\n      .sort((a, b) => b.expectedPoints - a.expectedPoints)\n      .slice(0, 50); // Top 50 candidates per position\n  }\n\n  private generateConservativePlan(\n    currentSquad: ProcessedPlayer[],\n    candidates: TransferTarget[],\n    constraints: SquadConstraints,\n    context: TransferContext\n  ): TransferPlan {\n    const moves: TransferMove[] = [];\n    const transfersToMake = Math.min(constraints.freeTransfers, 2);\n    \n    if (transfersToMake === 0) {\n      return {\n        gameweek: context.targetGameweek,\n        moves: [],\n        totalHits: 0,\n        totalCost: 0,\n        budgetAfter: constraints.maxBudget,\n        projectedGain: 0,\n        confidence: 95,\n        notes: ['No free transfers available - hold transfers for next gameweek'],\n        feasible: true\n      };\n    }\n\n    // Find the worst performing players to replace\n    const worstPlayers = currentSquad\n      .filter(p => !p.isBench) // Focus on starting players\n      .sort((a, b) => (a.points || 0) - (b.points || 0))\n      .slice(0, transfersToMake);\n\n    for (const playerOut of worstPlayers) {\n      const replacement = this.findBestReplacement(\n        playerOut, candidates, constraints, moves\n      );\n      \n      if (replacement && this.isTransferFeasible(playerOut, replacement, constraints, moves)) {\n        moves.push({\n          outPlayerId: playerOut.id,\n          outPlayerName: playerOut.name,\n          inPlayerId: replacement.playerId,\n          inPlayerName: replacement.name,\n          cost: 0, // Free transfer\n          netCost: replacement.price - (playerOut.sellPrice || playerOut.price),\n          expectedGain: replacement.expectedPoints - (playerOut.expectedPoints || 0)\n        });\n      }\n    }\n\n    const totalNetCost = moves.reduce((sum, move) => sum + move.netCost, 0);\n    const totalGain = moves.reduce((sum, move) => sum + move.expectedGain, 0);\n\n    return {\n      gameweek: context.targetGameweek,\n      moves,\n      totalHits: 0,\n      totalCost: 0,\n      budgetAfter: constraints.maxBudget - totalNetCost,\n      projectedGain: totalGain,\n      confidence: 85,\n      notes: [\n        `Using ${moves.length} free transfer${moves.length !== 1 ? 's' : ''}`,\n        'Conservative approach focusing on proven performers',\n        `Net spend: £${totalNetCost.toFixed(1)}m`\n      ],\n      feasible: totalNetCost <= constraints.maxBudget\n    };\n  }\n\n  private generateAggressivePlan(\n    currentSquad: ProcessedPlayer[],\n    candidates: TransferTarget[],\n    constraints: SquadConstraints,\n    context: TransferContext\n  ): TransferPlan {\n    if (context.maxHits === 0) return this.generateConservativePlan(currentSquad, candidates, constraints, context);\n\n    const moves: TransferMove[] = [];\n    const maxTransfers = constraints.freeTransfers + context.maxHits;\n    \n    // Target highest expected point gains even if it requires hits\n    const improvementTargets = currentSquad\n      .sort((a, b) => (a.expectedPoints || 0) - (b.expectedPoints || 0))\n      .slice(0, maxTransfers);\n\n    let hitsUsed = 0;\n    \n    for (const playerOut of improvementTargets) {\n      const replacement = this.findBestReplacement(\n        playerOut, candidates, constraints, moves\n      );\n      \n      if (replacement) {\n        const expectedGain = replacement.expectedPoints - (playerOut.expectedPoints || 0);\n        const isHit = moves.length >= constraints.freeTransfers;\n        const hitCost = isHit ? 4 : 0;\n        \n        // Only take hit if expected gain exceeds cost threshold\n        if (!isHit || (expectedGain > 6 && hitsUsed < context.maxHits)) {\n          moves.push({\n            outPlayerId: playerOut.id,\n            outPlayerName: playerOut.name,\n            inPlayerId: replacement.playerId,\n            inPlayerName: replacement.name,\n            cost: hitCost,\n            netCost: replacement.price - (playerOut.sellPrice || playerOut.price),\n            expectedGain\n          });\n          \n          if (isHit) hitsUsed++;\n        }\n      }\n    }\n\n    const totalNetCost = moves.reduce((sum, move) => sum + move.netCost, 0);\n    const totalGain = moves.reduce((sum, move) => sum + move.expectedGain, 0);\n    const totalHitCost = moves.reduce((sum, move) => sum + move.cost, 0);\n\n    return {\n      gameweek: context.targetGameweek,\n      moves,\n      totalHits: hitsUsed,\n      totalCost: totalHitCost,\n      budgetAfter: constraints.maxBudget - totalNetCost,\n      projectedGain: totalGain - totalHitCost,\n      confidence: Math.max(50, 80 - hitsUsed * 15),\n      notes: [\n        `Aggressive strategy with ${hitsUsed} hit${hitsUsed !== 1 ? 's' : ''}`,\n        'Higher risk but potentially higher reward',\n        `Net points gain after hits: ${(totalGain - totalHitCost).toFixed(1)}`\n      ],\n      feasible: totalNetCost <= constraints.maxBudget && totalHitCost <= hitsUsed * 4\n    };\n  }\n\n  private generateChipOptimizedPlan(\n    currentSquad: ProcessedPlayer[],\n    candidates: TransferTarget[],\n    constraints: SquadConstraints,\n    context: TransferContext\n  ): TransferPlan {\n    const moves: TransferMove[] = [];\n    let strategy = '';\n    \n    switch (context.chipType) {\n      case 'bench-boost':\n        // Focus on upgrading bench players\n        strategy = 'Bench Boost optimization - upgrading bench strength';\n        const benchPlayers = currentSquad.filter(p => p.isBench);\n        for (const benchPlayer of benchPlayers.slice(0, 2)) {\n          const upgrade = this.findBestReplacement(benchPlayer, candidates, constraints, moves);\n          if (upgrade) {\n            moves.push({\n              outPlayerId: benchPlayer.id,\n              outPlayerName: benchPlayer.name,\n              inPlayerId: upgrade.playerId,\n              inPlayerName: upgrade.name,\n              cost: moves.length >= constraints.freeTransfers ? 4 : 0,\n              netCost: upgrade.price - (benchPlayer.sellPrice || benchPlayer.price),\n              expectedGain: upgrade.expectedPoints - (benchPlayer.expectedPoints || 0)\n            });\n          }\n        }\n        break;\n        \n      case 'triple-captain':\n        // Focus on getting the best captain option\n        strategy = 'Triple Captain setup - targeting premium captain options';\n        const currentPremiums = currentSquad.filter(p => (p.price || 0) > 10);\n        if (currentPremiums.length < 2) {\n          const premiumTarget = candidates\n            .filter(c => c.price > 10)\n            .sort((a, b) => b.expectedPoints - a.expectedPoints)[0];\n          \n          if (premiumTarget) {\n            const worstStarter = currentSquad\n              .filter(p => !p.isBench)\n              .sort((a, b) => (a.expectedPoints || 0) - (b.expectedPoints || 0))[0];\n              \n            moves.push({\n              outPlayerId: worstStarter.id,\n              outPlayerName: worstStarter.name,\n              inPlayerId: premiumTarget.playerId,\n              inPlayerName: premiumTarget.name,\n              cost: 0,\n              netCost: premiumTarget.price - (worstStarter.sellPrice || worstStarter.price),\n              expectedGain: premiumTarget.expectedPoints - (worstStarter.expectedPoints || 0)\n            });\n          }\n        }\n        break;\n        \n      case 'free-hit':\n        strategy = 'Free Hit setup - targeting best one-week upgrades';\n        // Focus on upgrading lowest expected starters for the target GW.\n        // We treat Free Hit as zero transfer cost but still respect budget/net spend.\n        {\n          const starters = currentSquad\n            .filter(p => !p.isBench)\n            .sort((a, b) => (a.expectedPoints || 0) - (b.expectedPoints || 0))\n            .slice(0, 3); // up to 3 upgrades\n\n          for (const playerOut of starters) {\n            const replacement = this.findBestReplacement(playerOut, candidates, constraints, moves);\n            if (replacement) {\n              const netCost = replacement.price - (playerOut.sellPrice || playerOut.price);\n              const expectedGain = replacement.expectedPoints - (playerOut.expectedPoints || 0);\n              const totalNetCost = moves.reduce((s, m) => s + m.netCost, 0) + netCost;\n              if (totalNetCost <= constraints.maxBudget && expectedGain > 0) {\n                moves.push({\n                  outPlayerId: playerOut.id,\n                  outPlayerName: playerOut.name,\n                  inPlayerId: replacement.playerId,\n                  inPlayerName: replacement.name,\n                  cost: 0, // Free Hit transfers do not cost points\n                  netCost,\n                  expectedGain,\n                });\n              }\n            }\n          }\n        }\n        break;\n    }\n\n    const totalNetCost = moves.reduce((sum, move) => sum + move.netCost, 0);\n    const totalGain = moves.reduce((sum, move) => sum + move.expectedGain, 0);\n    const totalHitCost = moves.reduce((sum, move) => sum + move.cost, 0);\n\n    return {\n      gameweek: context.targetGameweek,\n      chipContext: context.chipType,\n      moves,\n      totalHits: moves.filter(m => m.cost > 0).length,\n      totalCost: totalHitCost,\n      budgetAfter: constraints.maxBudget - totalNetCost,\n      projectedGain: totalGain - totalHitCost,\n      confidence: 75,\n      notes: [\n        strategy,\n        `Optimized for ${context.chipType} chip usage`,\n        `Expected chip boost: +${Math.floor(totalGain * 0.3)} points`\n      ],\n      feasible: totalNetCost <= constraints.maxBudget\n    };\n  }\n\n  private findBestReplacement(\n    playerOut: ProcessedPlayer,\n    candidates: TransferTarget[],\n    constraints: SquadConstraints,\n    existingMoves: TransferMove[]\n  ): TransferTarget | null {\n    const position = playerOut.position;\n    const maxPrice = (playerOut.sellPrice || playerOut.price) + constraints.maxBudget;\n    const usedPlayerIds = new Set(existingMoves.map(m => m.inPlayerId));\n    \n    return candidates\n      .filter(c => c.position === position)\n      .filter(c => c.price <= maxPrice)\n      .filter(c => !usedPlayerIds.has(c.playerId))\n      .sort((a, b) => b.expectedPoints - a.expectedPoints)[0] || null;\n  }\n\n  private isTransferFeasible(\n    playerOut: ProcessedPlayer,\n    playerIn: TransferTarget,\n    constraints: SquadConstraints,\n    existingMoves: TransferMove[]\n  ): boolean {\n    const netCost = playerIn.price - (playerOut.sellPrice || playerOut.price);\n    const totalNetCost = existingMoves.reduce((sum, move) => sum + move.netCost, 0) + netCost;\n    \n    return totalNetCost <= constraints.maxBudget;\n  }\n\n  private getPositionName(elementType: number): 'GK' | 'DEF' | 'MID' | 'FWD' {\n    switch (elementType) {\n      case 1: return 'GK';\n      case 2: return 'DEF';\n      case 3: return 'MID';\n      case 4: return 'FWD';\n      default: return 'MID';\n    }\n  }\n\n  private generateTransferReason(\n    player: FPLPlayer & { expectedPoints: number },\n    currentSquad: ProcessedPlayer[]\n  ): string {\n    if (player.expectedPoints > 25) return 'Premium option with excellent fixtures';\n    if (player.expectedPoints > 15) return 'Great value with strong upcoming fixtures';\n    if (player.now_cost < 50) return 'Budget-friendly option to free up funds';\n    return 'Solid performer with decent fixtures ahead';\n  }\n}\n","size_bytes":15050},"client/src/components/AIInsights.tsx":{"content":"/**\n * AIInsights - Phase 3 Enhancement\n * \n * Displays AI-generated insights, recommendations, and follow-up questions\n * in a clean, actionable format.\n */\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Lightbulb, \n  AlertTriangle, \n  TrendingUp, \n  HelpCircle,\n  CheckCircle,\n  Star,\n  ArrowRight\n} from 'lucide-react';\nimport { type AIInsight } from '@shared/schema';\n\ninterface AIInsightsProps {\n  insights: AIInsight[];\n  suggestions?: string[];\n  followUpQuestions?: string[];\n  onQuestionClick?: (question: string) => void;\n  className?: string;\n}\n\nexport function AIInsights({ \n  insights, \n  suggestions = [], \n  followUpQuestions = [], \n  onQuestionClick,\n  className \n}: AIInsightsProps) {\n  \n  const getInsightIcon = (type: AIInsight['type']) => {\n    switch (type) {\n      case 'recommendation':\n        return <Lightbulb className=\"h-4 w-4 text-blue-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4 text-amber-500\" />;\n      case 'opportunity':\n        return <TrendingUp className=\"h-4 w-4 text-green-500\" />;\n      case 'explanation':\n        return <HelpCircle className=\"h-4 w-4 text-purple-500\" />;\n      default:\n        return <Star className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: AIInsight['priority']) => {\n    switch (priority) {\n      case 'high':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n      case 'medium':\n        return 'bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-300';\n      case 'low':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const formatConfidence = (confidence: number) => {\n    return `${Math.round(confidence)}% confidence`;\n  };\n\n  if (insights.length === 0 && suggestions.length === 0 && followUpQuestions.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`space-y-4 ${className}`} data-testid=\"ai-insights-container\">\n      {/* AI Insights */}\n      {insights.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <Star className=\"h-4 w-4 text-primary\" />\n              AI Insights\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {insights.map((insight, index) => (\n              <div\n                key={index}\n                className=\"border rounded-lg p-3 space-y-2\"\n                data-testid={`insight-${insight.type}-${index}`}\n              >\n                <div className=\"flex items-start justify-between gap-2\">\n                  <div className=\"flex items-center gap-2 flex-1\">\n                    {getInsightIcon(insight.type)}\n                    <h4 className=\"font-medium text-sm\">{insight.title}</h4>\n                  </div>\n                  <div className=\"flex items-center gap-2 flex-shrink-0\">\n                    <Badge \n                      className={`text-xs ${getPriorityColor(insight.priority)}`}\n                      data-testid={`priority-${insight.priority}`}\n                    >\n                      {insight.priority}\n                    </Badge>\n                    <Badge \n                      variant=\"outline\" \n                      className=\"text-xs\"\n                      data-testid={`confidence-${index}`}\n                    >\n                      {formatConfidence(insight.confidence)}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <p className=\"text-sm text-muted-foreground\">\n                  {insight.content}\n                </p>\n                \n                {insight.reasoning.length > 0 && (\n                  <div className=\"space-y-1\">\n                    <h5 className=\"text-xs font-medium text-muted-foreground\">\n                      Reasoning:\n                    </h5>\n                    <ul className=\"text-xs text-muted-foreground space-y-1\">\n                      {insight.reasoning.map((reason, idx) => (\n                        <li key={idx} className=\"flex items-start gap-1\">\n                          <span className=\"text-primary mt-0.5\">•</span>\n                          {reason}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {insight.actionItems && insight.actionItems.length > 0 && (\n                  <div className=\"space-y-1\">\n                    <h5 className=\"text-xs font-medium text-muted-foreground\">\n                      Actions:\n                    </h5>\n                    <ul className=\"text-xs space-y-1\">\n                      {insight.actionItems.map((action, idx) => (\n                        <li key={idx} className=\"flex items-start gap-1\">\n                          <CheckCircle className=\"h-3 w-3 text-green-500 mt-0.5 flex-shrink-0\" />\n                          {action}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {insight.relatedData?.expectedPoints && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Expected impact: +{insight.relatedData.expectedPoints} points\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Suggestions */}\n      {suggestions.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <ArrowRight className=\"h-4 w-4 text-blue-500\" />\n              Suggestions\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ul className=\"space-y-2\" data-testid=\"suggestions-list\">\n              {suggestions.map((suggestion, index) => (\n                <li \n                  key={index} \n                  className=\"flex items-start gap-2 text-sm\"\n                  data-testid={`suggestion-${index}`}\n                >\n                  <span className=\"text-blue-500 mt-0.5\">•</span>\n                  {suggestion}\n                </li>\n              ))}\n            </ul>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Follow-up Questions */}\n      {followUpQuestions.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm flex items-center gap-2\">\n              <HelpCircle className=\"h-4 w-4 text-purple-500\" />\n              What would you like to know next?\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\" data-testid=\"follow-up-questions\">\n              {followUpQuestions.map((question, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onQuestionClick?.(question)}\n                  className=\"text-xs h-auto py-1 px-2 whitespace-normal text-left\"\n                  data-testid={`button-question-${index}`}\n                >\n                  {question}\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7628},"client/src/components/AppHeader.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Target, Activity, TrendingUp, Zap } from \"lucide-react\";\nimport ThemeToggle from \"./ThemeToggle\";\n\nexport default function AppHeader() {\n  return (\n    <Card className=\"w-full border-b rounded-none sticky top-0 z-50 backdrop-blur-sm bg-background/95\">\n      <div className=\"flex items-center justify-between p-4\">\n        {/* Logo and Title */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"relative\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center shadow-md\">\n                <Target className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-chart-1 rounded-full animate-pulse shadow-sm\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground flex items-center gap-2\" data-testid=\"text-app-title\">\n                FPL Chip Strategy Architect\n                <Badge variant=\"outline\" className=\"text-xs hidden sm:inline-flex\">\n                  <Activity className=\"w-3 h-3 mr-1\" />\n                  LIVE\n                </Badge>\n              </h1>\n              <p className=\"text-xs text-muted-foreground\">\n                AI-powered chip timing optimization for Fantasy Premier League\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Right side */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"hidden md:flex items-center gap-2\">\n            <div className=\"flex items-center gap-1 text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md\">\n              <TrendingUp className=\"w-3 h-3 text-chart-1\" />\n              <span>Season 2024/25</span>\n            </div>\n            <div className=\"flex items-center gap-1 text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md\">\n              <Zap className=\"w-3 h-3 text-primary\" />\n              <span>Real-time API</span>\n            </div>\n          </div>\n          <ThemeToggle />\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":2301},"client/src/components/ChatInterface.tsx":{"content":"/**\n * ChatInterface - Phase 3 Enhancement\n * \n * Interactive chat interface for the AI co-pilot with message history,\n * typing indicators, and seamless integration with FPL analysis.\n */\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Send, Bot, User, Loader2, MessageCircle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { \n  type ChatMessage, \n  type AICopilotResponse, \n  type AIInsight \n} from '@shared/schema';\nimport { AIInsights } from '@/components/AIInsights';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ChatInterfaceProps {\n  teamId?: string;\n  onAnalysisRequest?: (teamId: string) => void;\n  className?: string;\n}\n\nexport function ChatInterface({ teamId, onAnalysisRequest, className }: ChatInterfaceProps) {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [currentMessage, setCurrentMessage] = useState('');\n  const [sessionId, setSessionId] = useState<string>('');\n  const [isInitialized, setIsInitialized] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Initialize chat with welcome message\n  useEffect(() => {\n    if (!isInitialized) {\n      const welcomeMessage: ChatMessage = {\n        id: 'welcome_msg',\n        role: 'assistant',\n        content: \"Hi! I'm your AI FPL co-pilot. I can help you analyze your squad, plan chip strategy, suggest transfers, and answer any FPL questions. What would you like to know?\",\n        timestamp: new Date().toISOString(),\n        metadata: {\n          queryType: 'general',\n          confidence: 100\n        }\n      };\n      setMessages([welcomeMessage]);\n      setIsInitialized(true);\n    }\n  }, [isInitialized]);\n\n  // Chat mutation for sending messages\n  const chatMutation = useMutation({\n    mutationFn: async (message: string): Promise<AICopilotResponse & { sessionId: string }> => {\n      const response = await apiRequest('POST', '/api/chat', {\n        message,\n        sessionId: sessionId || undefined,\n        teamId,\n        userId: undefined // Could be added for user tracking\n      });\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Chat request failed');\n      }\n      return result.data;\n    },\n    onSuccess: (response) => {\n      // Update session ID if new\n      if (response.sessionId && !sessionId) {\n        setSessionId(response.sessionId);\n      }\n\n      // Add assistant response to messages\n      const assistantMessage: ChatMessage = {\n        id: `msg_${Date.now()}_assistant`,\n        role: 'assistant',\n        content: response.message,\n        timestamp: new Date().toISOString(),\n        metadata: {\n          queryType: response.conversationContext.intent.type as any,\n          confidence: response.conversationContext.intent.confidence,\n          processingTime: response.conversationContext.responseTime\n        }\n      };\n\n      setMessages(prev => [...prev, assistantMessage]);\n\n      // Trigger analysis request if the AI detected a team ID\n      if (response.conversationContext.intent.entities.players && onAnalysisRequest && teamId) {\n        setTimeout(() => onAnalysisRequest(teamId), 1000); // Delayed to let user see the response\n      }\n    },\n    onError: (error) => {\n      console.error('Chat error:', error);\n      toast({\n        title: \"Chat Error\",\n        description: \"Sorry, I couldn't process your message. Please try again.\",\n        variant: \"destructive\",\n      });\n\n      // Add error message\n      const errorMessage: ChatMessage = {\n        id: `msg_${Date.now()}_error`,\n        role: 'assistant',\n        content: \"I apologize, but I'm having trouble processing your request right now. Could you try rephrasing your question?\",\n        timestamp: new Date().toISOString(),\n        metadata: {\n          queryType: 'general',\n          confidence: 0\n        }\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n  });\n\n  const sendMessage = async () => {\n    if (!currentMessage.trim() || chatMutation.isPending) return;\n\n    const messageText = currentMessage.trim();\n    setCurrentMessage('');\n\n    // Add user message immediately\n    const userMessage: ChatMessage = {\n      id: `msg_${Date.now()}_user`,\n      role: 'user',\n      content: messageText,\n      timestamp: new Date().toISOString(),\n      metadata: {\n        queryType: 'general'\n      }\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Send to AI\n    chatMutation.mutate(messageText);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  const formatMessageTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  const getLatestResponse = (): AICopilotResponse | null => {\n    const lastAssistantMessage = messages\n      .filter(m => m.role === 'assistant')\n      .pop();\n    \n    if (!lastAssistantMessage || !chatMutation.data) return null;\n    \n    return chatMutation.data;\n  };\n\n  const latestResponse = getLatestResponse();\n\n  return (\n    <div className={`flex flex-col h-full ${className}`}>\n      <Card className=\"flex-1 flex flex-col\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <MessageCircle className=\"h-5 w-5 text-primary\" />\n            AI FPL Co-pilot\n            {teamId && (\n              <Badge variant=\"secondary\" className=\"ml-auto\">\n                Team {teamId}\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent className=\"flex-1 flex flex-col min-h-0\">\n          {/* Messages Area */}\n          <ScrollArea className=\"flex-1 mb-4 pr-4\">\n            <div className=\"space-y-4\" data-testid=\"chat-messages\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex gap-3 ${\n                    message.role === 'user' ? 'justify-end' : 'justify-start'\n                  }`}\n                  data-testid={`message-${message.role}-${message.id}`}\n                >\n                  {message.role === 'assistant' && (\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                        <Bot className=\"h-4 w-4 text-primary\" />\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div\n                    className={`max-w-[80%] rounded-lg px-3 py-2 ${\n                      message.role === 'user'\n                        ? 'bg-primary text-primary-foreground'\n                        : 'bg-muted'\n                    }`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <span className=\"text-xs opacity-70\">\n                        {formatMessageTime(message.timestamp)}\n                      </span>\n                      {message.metadata?.confidence && message.role === 'assistant' && (\n                        <Badge \n                          variant=\"outline\" \n                          className=\"text-xs py-0 px-1\"\n                          data-testid={`confidence-${message.id}`}\n                        >\n                          {message.metadata.confidence}% confidence\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {message.role === 'user' && (\n                    <div className=\"flex-shrink-0\">\n                      <div className=\"w-8 h-8 rounded-full bg-secondary flex items-center justify-center\">\n                        <User className=\"h-4 w-4 text-secondary-foreground\" />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              ))}\n              \n              {/* Typing indicator */}\n              {chatMutation.isPending && (\n                <div className=\"flex gap-3 justify-start\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                      <Loader2 className=\"h-4 w-4 text-primary animate-spin\" />\n                    </div>\n                  </div>\n                  <div className=\"bg-muted rounded-lg px-3 py-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      AI is analyzing...\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n\n          {/* AI Insights Panel */}\n          {latestResponse && latestResponse.insights.length > 0 && (\n            <>\n              <Separator className=\"mb-4\" />\n              <div className=\"mb-4\">\n                <AIInsights \n                  insights={latestResponse.insights}\n                  suggestions={latestResponse.suggestions}\n                  followUpQuestions={latestResponse.followUpQuestions}\n                  onQuestionClick={(question: string) => {\n                    setCurrentMessage(question);\n                    setTimeout(() => sendMessage(), 100);\n                  }}\n                />\n              </div>\n            </>\n          )}\n\n          {/* Input Area */}\n          <div className=\"flex gap-2\" data-testid=\"chat-input-area\">\n            <Input\n              value={currentMessage}\n              onChange={(e) => setCurrentMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder=\"Ask me about your FPL strategy...\"\n              disabled={chatMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"input-chat-message\"\n            />\n            <Button\n              onClick={sendMessage}\n              disabled={!currentMessage.trim() || chatMutation.isPending}\n              size=\"icon\"\n              data-testid=\"button-send-message\"\n            >\n              {chatMutation.isPending ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </Button>\n          </div>\n\n          {/* Quick Actions */}\n          {messages.length <= 1 && (\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              {[\n                \"Analyze my squad\",\n                \"When should I use my wildcard?\",\n                \"Who should I transfer in?\",\n                \"Compare Salah vs Son\"\n              ].map((quickAction) => (\n                <Button\n                  key={quickAction}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setCurrentMessage(quickAction);\n                    setTimeout(() => sendMessage(), 100);\n                  }}\n                  className=\"text-xs\"\n                  data-testid={`button-quick-action-${quickAction.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {quickAction}\n                </Button>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12014},"client/src/components/ChipDetailModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Calendar, \n  Star, \n  Target, \n  TrendingUp, \n  TrendingDown, \n  Users,\n  Shield,\n  Zap,\n  RotateCcw\n} from \"lucide-react\";\nimport { type ChipRecommendation, type GameweekFDR, type ProcessedPlayer } from \"@shared/schema\";\n\ninterface ChipDetailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  recommendation: ChipRecommendation | null;\n  gameweeks: GameweekFDR[];\n  players: ProcessedPlayer[];\n}\n\nconst chipConfig = {\n  'wildcard': { icon: RotateCcw, color: 'bg-chart-4', label: 'Wildcard' },\n  'bench-boost': { icon: TrendingUp, color: 'bg-chart-1', label: 'Bench Boost' },\n  'triple-captain': { icon: Star, color: 'bg-chart-2', label: 'Triple Captain' },\n  'free-hit': { icon: Zap, color: 'bg-chart-3', label: 'Free Hit' }\n};\n\nconst getDifficultyColor = (fdr: number) => {\n  if (fdr <= 2) return 'text-green-600 bg-green-50';\n  if (fdr >= 4) return 'text-red-600 bg-red-50';\n  return 'text-yellow-600 bg-yellow-50';\n};\n\nexport default function ChipDetailModal({\n  isOpen,\n  onClose,\n  recommendation,\n  gameweeks,\n  players\n}: ChipDetailModalProps) {\n  if (!recommendation) return null;\n\n  const chipInfo = chipConfig[recommendation.chipType];\n  const ChipIcon = chipInfo.icon;\n  \n  const targetGameweek = gameweeks.find(gw => gw.gameweek === recommendation.gameweek);\n  const surroundingGameweeks = gameweeks.filter(gw => \n    gw.gameweek >= recommendation.gameweek - 1 && \n    gw.gameweek <= recommendation.gameweek + 2\n  );\n\n  const getTopPlayersForGameweek = (gameweek: number) => {\n    const gw = gameweeks.find(g => g.gameweek === gameweek);\n    if (!gw) return [];\n    \n    return gw.fixtures\n      .map(fixture => ({\n        ...fixture,\n        player: players.find(p => p.id === fixture.playerId)\n      }))\n      .filter(f => f.player)\n      .sort((a, b) => (b.player?.points || 0) - (a.player?.points || 0))\n      .slice(0, 5);\n  };\n\n  const getChipSpecificAdvice = () => {\n    switch (recommendation.chipType) {\n      case 'bench-boost':\n        const benchPlayers = players.slice(11); // Assuming last 4 are bench\n        return {\n          title: 'Bench Players Analysis',\n          content: (\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground mb-3\">\n                Your bench players for this gameweek:\n              </p>\n              {benchPlayers.map(player => (\n                <div key={player.id} className=\"flex items-center justify-between p-2 bg-muted/50 rounded\">\n                  <div>\n                    <span className=\"font-medium\">{player.name}</span>\n                    <span className=\"text-sm text-muted-foreground ml-2\">({player.team})</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {player.position}\n                    </Badge>\n                    <span className=\"text-sm font-medium\">{player.points} pts</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )\n        };\n      \n      case 'triple-captain':\n        const topScorer = players.sort((a, b) => b.points - a.points)[0];\n        return {\n          title: 'Captain Choice Analysis',\n          content: (\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-primary/10 rounded-lg border border-primary/20\">\n                <div className=\"flex items-center gap-3\">\n                  <Star className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <h4 className=\"font-semibold\">{topScorer.name} ({topScorer.team})</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {topScorer.points} total points | £{topScorer.price}m\n                    </p>\n                  </div>\n                </div>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                Based on form, fixtures, and historical performance against similar opponents.\n              </p>\n            </div>\n          )\n        };\n      \n      case 'wildcard':\n        return {\n          title: 'Transfer Strategy',\n          content: (\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground\">\n                Consider targeting teams with favorable upcoming fixtures:\n              </p>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {Array.from(new Set(players.map(p => p.team))).slice(0, 6).map(team => (\n                  <Badge key={team} variant=\"outline\" className=\"justify-center\">\n                    {team}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          )\n        };\n      \n      case 'free-hit':\n        return {\n          title: 'One-Week Strategy',\n          content: (\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-muted-foreground\">\n                Perfect opportunity to target players from teams with the best fixtures this week only.\n              </p>\n              <div className=\"p-2 bg-muted/50 rounded\">\n                <p className=\"text-sm font-medium\">Differential Targets:</p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Focus on players with {\"<\"}3% ownership facing weak defenses\n                </p>\n              </div>\n            </div>\n          )\n        };\n      \n      default:\n        return null;\n    }\n  };\n\n  const chipAdvice = getChipSpecificAdvice();\n  const topFixtures = getTopPlayersForGameweek(recommendation.gameweek);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-chip-details\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-3\">\n            <div className={`inline-flex items-center justify-center w-10 h-10 ${chipInfo.color} rounded-lg`}>\n              <ChipIcon className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <span className=\"text-xl\">{recommendation.title}</span>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"outline\">GW {recommendation.gameweek}</Badge>\n                <Badge variant=\"secondary\">{recommendation.confidence}% confidence</Badge>\n              </div>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"grid gap-6 mt-6\">\n          {/* Strategic Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"w-5 h-5\" />\n                Strategic Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\">{recommendation.description}</p>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-medium text-sm\">Key Reasoning:</h4>\n                <ul className=\"space-y-2\">\n                  {recommendation.reasoning.map((reason, index) => (\n                    <li key={index} className=\"text-sm text-muted-foreground flex items-start gap-2\">\n                      <TrendingUp className=\"w-4 h-4 mt-0.5 text-green-600 flex-shrink-0\" />\n                      {reason}\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* Gameweek Fixture Analysis */}\n            {targetGameweek && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-5 h-5\" />\n                    GW {targetGameweek.gameweek} Fixture Analysis\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-2 bg-muted/50 rounded\">\n                      <span className=\"text-sm\">Average FDR</span>\n                      <Badge className={getDifficultyColor(targetGameweek.averageFDR)}>\n                        {targetGameweek.averageFDR.toFixed(1)}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <h4 className=\"text-sm font-medium\">Key Fixtures:</h4>\n                      {topFixtures.slice(0, 4).map(fixture => (\n                        <div key={`${fixture.playerId}-${recommendation.gameweek}`} \n                             className=\"flex items-center justify-between text-sm p-2 border rounded\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium\">{fixture.playerName}</span>\n                            <span className=\"text-muted-foreground\">\n                              {fixture.isHome ? 'vs' : '@'} {fixture.opponent}\n                            </span>\n                          </div>\n                      <Badge className={getDifficultyColor(fixture.fdr)}>\n                        {fixture.fdr}\n                      </Badge>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Chip-Specific Analysis */}\n            {chipAdvice && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ChipIcon className=\"w-5 h-5\" />\n                    {chipAdvice.title}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {chipAdvice.content}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Fixture Context */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Fixture Context (GW {recommendation.gameweek - 1} - {recommendation.gameweek + 2})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {surroundingGameweeks.map(gw => (\n                  <div key={gw.gameweek} className=\"text-center p-3 border rounded-lg\">\n                    <div className=\"text-lg font-bold\">GW {gw.gameweek}</div>\n                    <div className={`text-sm font-medium ${\n                      gw.gameweek === recommendation.gameweek ? 'text-primary' : 'text-muted-foreground'\n                    }`}>\n                      FDR: {gw.averageFDR.toFixed(1)}\n                    </div>\n                    <Badge \n                      variant={gw.gameweek === recommendation.gameweek ? 'default' : 'outline'}\n                      className=\"mt-1\"\n                    >\n                      {gw.difficulty}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Action Button */}\n          <div className=\"flex justify-end gap-3\">\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-modal\">\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11765},"client/src/components/ChipRecommendationCard.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { TrendingUp, TrendingDown, Calendar, Star, Zap, RotateCcw, Target, BarChart3 } from \"lucide-react\";\n\ntype ChipType = 'wildcard' | 'bench-boost' | 'triple-captain' | 'free-hit';\n\ninterface ChipRecommendation {\n  chipType: ChipType;\n  gameweek: number;\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  reasoning: string[];\n  confidence: number;\n  \n  // Enhanced Phase 1 data\n  expectedPointsRange?: [number, number];\n  successProbability?: number;\n  alternativeWindows?: number[];\n}\n\ninterface ChipRecommendationCardProps {\n  recommendation: ChipRecommendation;\n  onViewDetails?: (chipType: ChipType, gameweek: number) => void;\n}\n\nconst chipConfig = {\n  'wildcard': { icon: RotateCcw, color: 'bg-chart-4', label: 'Wildcard' },\n  'bench-boost': { icon: TrendingUp, color: 'bg-chart-1', label: 'Bench Boost' },\n  'triple-captain': { icon: Star, color: 'bg-chart-2', label: 'Triple Captain' },\n  'free-hit': { icon: Zap, color: 'bg-chart-3', label: 'Free Hit' }\n};\n\nconst priorityConfig = {\n  'high': { color: 'bg-chart-1 text-white', label: 'High Priority' },\n  'medium': { color: 'bg-chart-2 text-white', label: 'Medium Priority' },\n  'low': { color: 'bg-chart-5 text-white', label: 'Low Priority' }\n};\n\nexport default function ChipRecommendationCard({ \n  recommendation, \n  onViewDetails \n}: ChipRecommendationCardProps) {\n  const chipInfo = chipConfig[recommendation.chipType];\n  const ChipIcon = chipInfo.icon;\n  const priorityInfo = priorityConfig[recommendation.priority];\n\n  return (\n    <Card className=\"w-full hover-elevate\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex items-center gap-3\">\n            <div className={`inline-flex items-center justify-center w-10 h-10 ${chipInfo.color} rounded-lg`}>\n              <ChipIcon className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-foreground text-lg\" data-testid={`text-${recommendation.chipType}-title`}>\n                {recommendation.title}\n              </h3>\n              <div className=\"flex items-center gap-2 mt-1\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Calendar className=\"w-3 h-3 mr-1\" />\n                  GW {recommendation.gameweek}\n                </Badge>\n                <Badge className={`text-xs ${priorityInfo.color}`}>\n                  {priorityInfo.label}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          <div className=\"text-right space-y-1\">\n            <div className=\"text-sm font-medium text-muted-foreground\">Confidence</div>\n            <div className=\"text-lg font-bold text-foreground\" data-testid={`text-confidence-${recommendation.chipType}`}>\n              {recommendation.confidence}%\n            </div>\n            \n            {/* Enhanced Phase 1: Success Probability */}\n            {recommendation.successProbability && (\n              <div className=\"text-xs text-muted-foreground\">\n                Success: {recommendation.successProbability}%\n              </div>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <p className=\"text-sm text-muted-foreground mb-4\" data-testid={`text-description-${recommendation.chipType}`}>\n          {recommendation.description}\n        </p>\n        \n        {/* Enhanced Phase 1: Expected Points Range */}\n        {recommendation.expectedPointsRange && (\n          <div className=\"flex items-center gap-2 mb-4 p-3 bg-muted/30 rounded-lg\">\n            <Target className=\"w-4 h-4 text-chart-1\" />\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium text-foreground\">Expected Points Range</div>\n              <div className=\"text-xs text-muted-foreground\">\n                {recommendation.expectedPointsRange[0].toFixed(1)} - {recommendation.expectedPointsRange[1].toFixed(1)} pts\n                <span className=\"ml-2 text-chart-1\">\n                  (±{((recommendation.expectedPointsRange[1] - recommendation.expectedPointsRange[0]) / 2).toFixed(1)})\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {/* Enhanced Phase 1: Alternative Windows */}\n        {recommendation.alternativeWindows && recommendation.alternativeWindows.length > 0 && (\n          <div className=\"flex items-center gap-2 mb-4 p-2 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800\">\n            <BarChart3 className=\"w-4 h-4 text-amber-600\" />\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium text-amber-800 dark:text-amber-200\">Alternative Options</div>\n              <div className=\"text-xs text-amber-600 dark:text-amber-400\">\n                Also consider GW {recommendation.alternativeWindows.join(', GW ')}\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"space-y-2 mb-4\">\n          <h4 className=\"text-sm font-medium text-foreground\">Key Insights:</h4>\n          <ul className=\"space-y-1\">\n            {recommendation.reasoning.map((reason, index) => (\n              <li key={index} className=\"text-xs text-muted-foreground flex items-start gap-2\">\n                <TrendingUp className=\"w-3 h-3 mt-0.5 text-chart-1 flex-shrink-0\" />\n                {reason}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"w-full\"\n          onClick={() => {\n            onViewDetails?.(recommendation.chipType, recommendation.gameweek);\n            console.log('View details clicked for:', recommendation.chipType, 'GW', recommendation.gameweek);\n          }}\n          data-testid={`button-details-${recommendation.chipType}`}\n        >\n          View Detailed Analysis\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6172},"client/src/components/FixtureDifficultyChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, TrendingDown, Minus, Calendar, Zap, Activity } from \"lucide-react\";\n\ninterface GameweekFDR {\n  gameweek: number;\n  totalFDR: number;\n  averageFDR: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  \n  // Enhanced Phase 1 data\n  volatility?: number;\n  confidenceLevel?: number;\n  oddsAdjustment?: number;\n}\n\ninterface FixtureDifficultyChartProps {\n  gameweeks: GameweekFDR[];\n  highlightedGameweeks?: number[];\n  \n  // Enhanced Phase 1 data\n  showVolatility?: boolean;\n  expectedPointsSource?: 'fdr' | 'odds' | 'advanced-stats' | 'simulation';\n}\n\nconst difficultyConfig = {\n  'easy': { color: 'bg-chart-1 text-white', icon: TrendingDown, label: 'Easy' },\n  'medium': { color: 'bg-chart-2 text-white', icon: Minus, label: 'Medium' },\n  'hard': { color: 'bg-chart-3 text-white', icon: TrendingUp, label: 'Hard' }\n};\n\nexport default function FixtureDifficultyChart({ \n  gameweeks, \n  highlightedGameweeks = [],\n  showVolatility = false,\n  expectedPointsSource = 'fdr'\n}: FixtureDifficultyChartProps) {\n  const maxFDR = Math.max(...gameweeks.map(gw => gw.totalFDR));\n  const minFDR = Math.min(...gameweeks.map(gw => gw.totalFDR));\n  \n  const getBarHeight = (totalFDR: number) => {\n    const range = maxFDR - minFDR;\n    if (range === 0) return 50;\n    return 20 + ((totalFDR - minFDR) / range) * 60; // 20% to 80% height\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5 text-primary\" />\n            Squad Fixture Difficulty Timeline\n          </div>\n          \n          {/* Enhanced Phase 1: Data source indicator */}\n          {expectedPointsSource !== 'fdr' && (\n            <div className=\"flex items-center gap-1\">\n              {expectedPointsSource === 'odds' && <Zap className=\"w-4 h-4 text-chart-1\" />}\n              {expectedPointsSource === 'simulation' && <Activity className=\"w-4 h-4 text-chart-3\" />}\n              <span className=\"text-xs font-medium text-muted-foreground\">\n                Enhanced Analysis\n              </span>\n            </div>\n          )}\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          {expectedPointsSource === 'fdr' ? \n            'Total FDR across your 15-man squad for upcoming gameweeks' :\n            'Enhanced difficulty analysis with odds & volatility data'\n          }\n        </p>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Legend */}\n          <div className=\"flex flex-wrap gap-2\">\n            {Object.entries(difficultyConfig).map(([key, config]) => {\n              const Icon = config.icon;\n              return (\n                <div key={key} className=\"flex items-center gap-1\">\n                  <Badge className={`${config.color} text-xs`}>\n                    <Icon className=\"w-3 h-3 mr-1\" />\n                    {config.label}\n                  </Badge>\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Chart */}\n          <div className=\"space-y-3\">\n            <div className=\"grid gap-2\" style={{ gridTemplateColumns: `repeat(${gameweeks.length}, 1fr)` }}>\n              {gameweeks.map((gw) => {\n                const difficultyInfo = difficultyConfig[gw.difficulty];\n                const Icon = difficultyInfo.icon;\n                const isHighlighted = highlightedGameweeks.includes(gw.gameweek);\n                const barHeight = getBarHeight(gw.totalFDR);\n                \n                return (\n                  <div key={gw.gameweek} className=\"flex flex-col items-center gap-2\">\n                    {/* Bar */}\n                    <div className=\"relative w-8 h-20 bg-muted rounded-sm overflow-hidden\">\n                      <div \n                        className={`absolute bottom-0 w-full transition-all duration-500 ${difficultyInfo.color} ${isHighlighted ? 'ring-2 ring-primary ring-offset-1' : ''}`}\n                        style={{ height: `${barHeight}%` }}\n                        data-testid={`bar-gw-${gw.gameweek}`}\n                      />\n                      {isHighlighted && (\n                        <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-primary rounded-full\" />\n                      )}\n                    </div>\n                    \n                    {/* Labels */}\n                    <div className=\"text-center\">\n                      <div className=\"text-xs font-medium text-foreground\" data-testid={`text-gw-${gw.gameweek}`}>\n                        GW{gw.gameweek}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {gw.averageFDR.toFixed(1)}\n                        {showVolatility && gw.volatility && (\n                          <div className=\"text-xs text-chart-2\">\n                            σ{gw.volatility.toFixed(2)}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Summary Stats */}\n          <div className=\"grid grid-cols-3 gap-4 pt-4 border-t\">\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-chart-1\" data-testid=\"text-best-gw\">\n                GW{gameweeks.find(gw => gw.totalFDR === minFDR)?.gameweek || '?'}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Best Gameweek</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-chart-3\" data-testid=\"text-worst-gw\">\n                GW{gameweeks.find(gw => gw.totalFDR === maxFDR)?.gameweek || '?'}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Worst Gameweek</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-avg-fdr\">\n                {(gameweeks.reduce((sum, gw) => sum + gw.averageFDR, 0) / gameweeks.length).toFixed(1)}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Avg FDR</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6479},"client/src/components/SimulationSummary.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart3, Target, TrendingUp, Zap, Activity, AlertTriangle } from \"lucide-react\";\n\ninterface SimulationSummary {\n  strategy: string;\n  runs: number;\n  gameweeksAnalyzed: number[];\n  meanTotalPoints: number;\n  p10TotalPoints: number;\n  p90TotalPoints: number;\n  successRate: number;\n  boomRate: number;\n  bustRate: number;\n  variance: number;\n  confidenceInterval: [number, number];\n  recommendationStrength: 'strong' | 'moderate' | 'weak';\n  lastUpdated: string;\n}\n\ninterface SimulationSummaryProps {\n  simulationSummary: SimulationSummary;\n  expectedPointsSource: 'fdr' | 'odds' | 'advanced-stats' | 'simulation';\n  confidenceLevel: number;\n}\n\nexport default function SimulationSummaryCard({ \n  simulationSummary, \n  expectedPointsSource,\n  confidenceLevel \n}: SimulationSummaryProps) {\n  const getSourceIcon = () => {\n    switch(expectedPointsSource) {\n      case 'odds': return <Target className=\"w-4 h-4 text-chart-1\" />;\n      case 'advanced-stats': return <Activity className=\"w-4 h-4 text-chart-2\" />;\n      case 'simulation': return <BarChart3 className=\"w-4 h-4 text-chart-3\" />;\n      default: return <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  const getSourceLabel = () => {\n    switch(expectedPointsSource) {\n      case 'odds': return 'Bookmaker Odds Analysis';\n      case 'advanced-stats': return 'Advanced Statistics';\n      case 'simulation': return 'Monte Carlo Simulation';\n      default: return 'Fixture Difficulty Rating';\n    }\n  };\n\n  const getStrengthColor = (strength: string) => {\n    switch(strength) {\n      case 'strong': return 'text-green-600 bg-green-50';\n      case 'moderate': return 'text-yellow-600 bg-yellow-50';\n      default: return 'text-red-600 bg-red-50';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            {getSourceIcon()}\n            Intelligence Summary\n          </div>\n          <Badge className={`${getStrengthColor(simulationSummary.recommendationStrength)}`}>\n            {simulationSummary.recommendationStrength} confidence\n          </Badge>\n        </CardTitle>\n        <p className=\"text-sm text-muted-foreground\">\n          Powered by {getSourceLabel()} • {simulationSummary.runs.toLocaleString()} simulations\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"bg-muted/30 p-3 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <Target className=\"w-4 h-4 text-chart-1\" />\n              <span className=\"text-xs text-muted-foreground\">Expected Points</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-expected-points\">\n              {simulationSummary.meanTotalPoints.toFixed(1)} pts\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Range: {simulationSummary.confidenceInterval[0].toFixed(1)} - {simulationSummary.confidenceInterval[1].toFixed(1)}\n            </div>\n          </div>\n          \n          <div className=\"bg-muted/30 p-3 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <Zap className=\"w-4 h-4 text-chart-2\" />\n              <span className=\"text-xs text-muted-foreground\">Success Rate</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-success-rate\">\n              {simulationSummary.successRate.toFixed(0)}%\n            </div>\n            <div className=\"text-xs text-muted-foreground\">\n              Above average outcome\n            </div>\n          </div>\n        </div>\n\n        {/* Outcome Distribution */}\n        <div className=\"space-y-3\">\n          <h4 className=\"text-sm font-medium text-foreground\">Outcome Distribution</h4>\n          \n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-green-600 flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Boom (Top 10%)\n              </span>\n              <span className=\"font-medium\">{simulationSummary.boomRate.toFixed(1)}%</span>\n            </div>\n            <Progress \n              value={simulationSummary.boomRate} \n              className=\"h-2\" \n              data-testid=\"progress-boom-rate\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-blue-600 flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                Solid (10-90%)\n              </span>\n              <span className=\"font-medium\">{(100 - simulationSummary.boomRate - simulationSummary.bustRate).toFixed(1)}%</span>\n            </div>\n            <Progress \n              value={100 - simulationSummary.boomRate - simulationSummary.bustRate} \n              className=\"h-2\" \n              data-testid=\"progress-solid-rate\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-red-600 flex items-center gap-1\">\n                <div className=\"w-2 h-2 bg-red-500 rounded-full\" />\n                Bust (Bottom 10%)\n              </span>\n              <span className=\"font-medium\">{simulationSummary.bustRate.toFixed(1)}%</span>\n            </div>\n            <Progress \n              value={simulationSummary.bustRate} \n              className=\"h-2\" \n              data-testid=\"progress-bust-rate\"\n            />\n          </div>\n        </div>\n\n        {/* Risk Analysis */}\n        <div className=\"p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <AlertTriangle className=\"w-4 h-4 text-amber-600\" />\n            <span className=\"text-sm font-medium text-amber-800 dark:text-amber-200\">Risk Assessment</span>\n          </div>\n          <div className=\"text-xs text-amber-600 dark:text-amber-400\">\n            Volatility: σ{Math.sqrt(simulationSummary.variance).toFixed(2)} • \n            GWs analyzed: {simulationSummary.gameweeksAnalyzed.join(', ')} • \n            Confidence: {confidenceLevel}%\n          </div>\n        </div>\n\n        {/* Data Freshness */}\n        <div className=\"text-xs text-muted-foreground text-center\">\n          Last updated: {new Date(simulationSummary.lastUpdated).toLocaleTimeString()}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6985},"client/src/components/SquadOverview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Users, DollarSign, TrendingUp, Award, Target, Star, BarChart3, Zap, Activity } from \"lucide-react\";\n\ninterface Player {\n  id: number;\n  name: string;\n  position: string;\n  team: string;\n  price: number;\n  points: number;\n  \n  // Enhanced Phase 1 data\n  expectedPoints?: number;\n  volatility?: number;\n  advancedStats?: {\n    playerId: number;\n    xG: number;\n    xA: number;\n    xMins: number;\n    role: 'nailed' | 'rotation' | 'benchwarmer';\n    volatility: number;\n    formTrend: 'rising' | 'stable' | 'declining';\n    fixtureAdjustedXG: number;\n    fixtureAdjustedXA: number;\n    lastUpdated: string;\n  };\n}\n\ninterface SquadOverviewProps {\n  players: Player[];\n  totalValue: number;\n  totalPoints: number;\n  teamName: string;\n  \n  // Enhanced Phase 1 data\n  expectedPointsSource?: 'fdr' | 'odds' | 'advanced-stats' | 'simulation';\n  confidenceLevel?: number;\n  dataFreshness?: {\n    odds: string;\n    stats: string;\n    fpl: string;\n  };\n}\n\nexport default function SquadOverview({ \n  players, \n  totalValue, \n  totalPoints, \n  teamName,\n  expectedPointsSource,\n  confidenceLevel,\n  dataFreshness\n}: SquadOverviewProps) {\n  const groupedPlayers = {\n    GK: players.filter(p => p.position === 'GK'),\n    DEF: players.filter(p => p.position === 'DEF'),\n    MID: players.filter(p => p.position === 'MID'),\n    FWD: players.filter(p => p.position === 'FWD')\n  };\n\n  const getPositionColor = (position: string) => {\n    switch (position) {\n      case 'GK': return 'bg-chart-2';\n      case 'DEF': return 'bg-chart-1';\n      case 'MID': return 'bg-chart-4';\n      case 'FWD': return 'bg-chart-3';\n      default: return 'bg-muted';\n    }\n  };\n\n  // Analytics calculations\n  const topScorer = players.reduce((top, player) => player.points > top.points ? player : top, players[0]);\n  const averagePoints = totalPoints / players.length;\n  const valueEfficiency = totalPoints / totalValue; // Points per million\n  const benchPlayers = players.slice(11); // Assuming last 4 are bench\n  const benchPoints = benchPlayers.reduce((sum, p) => sum + p.points, 0);\n  \n  // Enhanced Phase 1 analytics\n  const hasEnhancedData = players.some(p => p.advancedStats || p.volatility || p.expectedPoints);\n  const averageVolatility = hasEnhancedData ? \n    players.filter(p => p.volatility).reduce((sum, p) => sum + (p.volatility || 0), 0) / players.filter(p => p.volatility).length : 0;\n  const nailedPlayers = players.filter(p => p.advancedStats?.role === 'nailed').length;\n  const expectedTotalPoints = players.reduce((sum, p) => sum + (p.expectedPoints || 0), 0);\n  \n  const getExpectedPointsSourceLabel = () => {\n    switch(expectedPointsSource) {\n      case 'odds': return 'Bookmaker Odds';\n      case 'advanced-stats': return 'Advanced Stats';\n      case 'simulation': return 'Monte Carlo';\n      default: return 'FDR Analysis';\n    }\n  };\n  \n  const getVolatilityColor = (volatility: number) => {\n    if (volatility <= 0.3) return 'text-green-600';\n    if (volatility <= 0.6) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n  \n  const getRoleColor = (role: string) => {\n    switch(role) {\n      case 'nailed': return 'text-green-600 bg-green-50';\n      case 'rotation': return 'text-yellow-600 bg-yellow-50';\n      default: return 'text-red-600 bg-red-50';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-4\">\n        <CardTitle className=\"flex items-center justify-between\" data-testid=\"text-team-name\">\n          <div className=\"flex items-center gap-2\">\n            <Users className=\"w-5 h-5 text-primary\" />\n            {teamName}\n          </div>\n          \n          {/* Enhanced Phase 1: Intelligence Status */}\n          {hasEnhancedData && expectedPointsSource && (\n            <div className=\"flex items-center gap-1\">\n              <Zap className=\"w-4 h-4 text-chart-1\" />\n              <span className=\"text-xs font-medium text-chart-1 bg-chart-1/10 px-2 py-1 rounded\">\n                {getExpectedPointsSourceLabel()}\n              </span>\n              {confidenceLevel && (\n                <span className=\"text-xs text-muted-foreground\">\n                  ({confidenceLevel}% confidence)\n                </span>\n              )}\n            </div>\n          )}\n        </CardTitle>\n        \n        {/* Key Stats */}\n        <div className=\"grid grid-cols-2 gap-4 mt-4\">\n          <div className=\"bg-muted/30 p-3 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-xs text-muted-foreground\">Squad Value</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-total-value\">\n              £{totalValue.toFixed(1)}m\n            </div>\n          </div>\n          \n          <div className=\"bg-muted/30 p-3 rounded-lg\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <TrendingUp className=\"w-4 h-4 text-muted-foreground\" />\n              <span className=\"text-xs text-muted-foreground\">\n                {expectedTotalPoints > 0 ? 'Expected Points' : 'Total Points'}\n              </span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-total-points\">\n              {expectedTotalPoints > 0 ? expectedTotalPoints.toFixed(1) : totalPoints} pts\n              {expectedTotalPoints > 0 && (\n                <div className=\"text-xs text-muted-foreground\">\n                  ({totalPoints} actual)\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Squad Analytics */}\n        <div className=\"mt-4 p-3 bg-primary/5 rounded-lg border border-primary/20\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <BarChart3 className=\"w-4 h-4 text-primary\" />\n            <span className=\"text-sm font-medium text-foreground\">Squad Analytics</span>\n          </div>\n          <div className=\"grid grid-cols-2 gap-3 text-xs\">\n            <div>\n              <span className=\"text-muted-foreground\">Avg Points/Player:</span>\n              <span className=\"ml-1 font-medium\">{averagePoints.toFixed(1)}</span>\n            </div>\n            <div>\n              <span className=\"text-muted-foreground\">Points/£m:</span>\n              <span className=\"ml-1 font-medium\">{valueEfficiency.toFixed(1)}</span>\n            </div>\n            {hasEnhancedData ? (\n              <>\n                <div>\n                  <span className=\"text-muted-foreground\">Avg Volatility:</span>\n                  <span className={`ml-1 font-medium ${getVolatilityColor(averageVolatility)}`}>\n                    {averageVolatility.toFixed(2)}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-muted-foreground\">Nailed Players:</span>\n                  <span className=\"ml-1 font-medium text-green-600\">{nailedPlayers}</span>\n                </div>\n              </>\n            ) : (\n              <>\n                <div>\n                  <span className=\"text-muted-foreground\">Bench Points:</span>\n                  <span className=\"ml-1 font-medium\">{benchPoints}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Star className=\"w-3 h-3 text-chart-1\" />\n                  <span className=\"font-medium truncate\">{topScorer?.name}</span>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {Object.entries(groupedPlayers).map(([position, positionPlayers]) => (\n            <div key={position} className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Badge className={`${getPositionColor(position)} text-white text-xs`}>\n                    {position}\n                  </Badge>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {positionPlayers.length} player{positionPlayers.length !== 1 ? 's' : ''}\n                  </span>\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  {positionPlayers.reduce((sum, p) => sum + p.points, 0)} pts total\n                </div>\n              </div>\n              \n              <div className=\"grid gap-2\">\n                {positionPlayers.map((player) => {\n                  const isTopInPosition = player === positionPlayers.reduce((top, p) => p.points > top.points ? p : top);\n                  return (\n                    <div \n                      key={player.id} \n                      className={`flex items-center justify-between p-3 rounded-lg border transition-all hover-elevate ${\n                        isTopInPosition ? 'border-chart-1/30 bg-chart-1/5' : 'border-border bg-muted/30'\n                      }`}\n                      data-testid={`player-${player.id}`}\n                    >\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className=\"font-medium text-sm text-foreground truncate\">\n                            {player.name}\n                          </div>\n                          {isTopInPosition && (\n                            <Award className=\"w-3 h-3 text-chart-1 flex-shrink-0\" />\n                          )}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {player.team}\n                        </div>\n                      </div>\n                      <div className=\"text-right flex-shrink-0\">\n                        <div className=\"text-sm font-medium text-foreground\">\n                          {player.expectedPoints ? player.expectedPoints.toFixed(1) : player.points} pts\n                          {player.expectedPoints && (\n                            <span className=\"text-xs text-muted-foreground ml-1\">\n                              ({player.points} actual)\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          £{player.price}m\n                          {player.volatility && (\n                            <span className={`ml-1 ${getVolatilityColor(player.volatility)}`}>\n                              σ{player.volatility.toFixed(2)}\n                            </span>\n                          )}\n                        </div>\n                        \n                        {/* Enhanced Phase 1: Advanced Stats Display */}\n                        {player.advancedStats && (\n                          <div className=\"mt-1 space-y-0.5\">\n                            <div className=\"flex items-center gap-1\">\n                              <Badge className={`text-xs px-1 py-0 ${getRoleColor(player.advancedStats.role)}`}>\n                                {player.advancedStats.role}\n                              </Badge>\n                              <span className={`text-xs ${player.advancedStats.formTrend === 'rising' ? 'text-green-600' : \n                                player.advancedStats.formTrend === 'declining' ? 'text-red-600' : 'text-muted-foreground'}`}>\n                                {player.advancedStats.formTrend}\n                              </span>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              xG: {player.advancedStats.fixtureAdjustedXG.toFixed(1)} \n                              {player.advancedStats.fixtureAdjustedXA > 0 && (\n                                <span className=\"ml-1\">xA: {player.advancedStats.fixtureAdjustedXA.toFixed(1)}</span>\n                              )}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12392},"client/src/components/TeamIdInput.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Target, Search } from \"lucide-react\";\n\ninterface TeamIdInputProps {\n  onAnalyze: (teamId: string) => void;\n  isLoading?: boolean;\n}\n\nexport default function TeamIdInput({ onAnalyze, isLoading = false }: TeamIdInputProps) {\n  const [teamId, setTeamId] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const trimmedId = teamId.trim();\n    if (!trimmedId) {\n      setError(\"Please enter your FPL Team ID\");\n      return;\n    }\n    if (!/^\\d+$/.test(trimmedId)) {\n      setError(\"Team ID must be a number\");\n      return;\n    }\n    const numericId = parseInt(trimmedId);\n    if (numericId < 1 || numericId > 99999999) {\n      setError(\"Please enter a valid FPL Team ID\");\n      return;\n    }\n    setError(\"\");\n    onAnalyze(trimmedId);\n    console.log('Team ID analysis triggered:', trimmedId);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardContent className=\"pt-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"text-center mb-4\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 bg-primary/10 rounded-full mb-3\">\n              <Target className=\"w-6 h-6 text-primary\" />\n            </div>\n            <h2 className=\"text-xl font-semibold text-foreground mb-2\">\n              Enter Your FPL Team ID\n            </h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Get personalized chip strategy recommendations based on your squad\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"teamId\" className=\"text-sm font-medium\">\n              Team ID\n            </Label>\n            <Input\n              id=\"teamId\"\n              type=\"text\"\n              placeholder=\"e.g. 1234567\"\n              value={teamId}\n              onChange={(e) => {\n                setTeamId(e.target.value);\n                if (error) setError(\"\");\n              }}\n              className={error ? \"border-destructive\" : \"\"}\n              disabled={isLoading}\n              data-testid=\"input-team-id\"\n            />\n            {error && (\n              <p className=\"text-sm text-destructive\" data-testid=\"text-error\">\n                {error}\n              </p>\n            )}\n            <p className=\"text-xs text-muted-foreground\">\n              Find your Team ID in the FPL app: My Team → Points → View Gameweek History\n            </p>\n          </div>\n\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={isLoading}\n            data-testid=\"button-analyze\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2\" />\n                Analyzing Squad...\n              </>\n            ) : (\n              <>\n                <Search className=\"w-4 h-4 mr-2\" />\n                Analyze My Squad\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3363},"client/src/components/ThemeToggle.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Moon, Sun } from \"lucide-react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    // Check for saved theme preference or default to light\n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    const initialTheme = savedTheme || (prefersDark ? 'dark' : 'light');\n    \n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n    console.log('Theme toggled to:', newTheme);\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"w-9 h-9\"\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":1330},"client/src/components/TransferPlanner.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  DollarSign, \n  TrendingUp, \n  ArrowUpDown, \n  Clock, \n  Target, \n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Zap,\n  Users,\n  Star\n} from \"lucide-react\";\nimport { type BudgetAnalysis, type TransferPlan, type TransferTarget } from \"@shared/schema\";\n\ninterface TransferPlannerProps {\n  budget: BudgetAnalysis;\n  transferPlans?: TransferPlan[];\n  onPlanTransfers?: (params: { chipType?: string; maxHits?: number }) => void;\n  isLoading?: boolean;\n}\n\nexport default function TransferPlanner({ \n  budget, \n  transferPlans, \n  onPlanTransfers,\n  isLoading = false \n}: TransferPlannerProps) {\n  const nextDeadline = new Date(budget.nextDeadline);\n  const timeUntilDeadline = Math.max(0, Math.floor((nextDeadline.getTime() - Date.now()) / (1000 * 60 * 60 * 24)));\n\n  const handlePlanTransfers = (chipType?: string, maxHits: number = 2) => {\n    onPlanTransfers?.({ chipType, maxHits });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Budget Overview */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <DollarSign className=\"w-5 h-5 text-primary\" />\n            Budget & Transfer Analysis\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-primary/5 p-3 rounded-lg border border-primary/20\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <DollarSign className=\"w-4 h-4 text-primary\" />\n                <span className=\"text-xs text-muted-foreground\">Money ITB</span>\n              </div>\n              <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-money-itb\">\n                £{budget.bank.toFixed(1)}m\n              </div>\n            </div>\n\n            <div className=\"bg-chart-1/10 p-3 rounded-lg border border-chart-1/30\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <TrendingUp className=\"w-4 h-4 text-chart-1\" />\n                <span className=\"text-xs text-muted-foreground\">Team Value</span>\n              </div>\n              <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-team-value\">\n                £{budget.teamValue.toFixed(1)}m\n              </div>\n            </div>\n\n            <div className=\"bg-chart-2/10 p-3 rounded-lg border border-chart-2/30\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <ArrowUpDown className=\"w-4 h-4 text-chart-2\" />\n                <span className=\"text-xs text-muted-foreground\">Free Transfers</span>\n              </div>\n              <div className=\"text-lg font-bold text-foreground\" data-testid=\"text-free-transfers\">\n                {budget.freeTransfers}\n              </div>\n            </div>\n\n            <div className=\"bg-chart-3/10 p-3 rounded-lg border border-chart-3/30\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Clock className=\"w-4 h-4 text-chart-3\" />\n                <span className=\"text-xs text-muted-foreground\">Deadline</span>\n              </div>\n              <div className=\"text-sm font-medium text-foreground\">\n                {timeUntilDeadline === 0 ? 'Today' : `${timeUntilDeadline}d`}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium\">Max Affordable Player</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  £{budget.canAfford.maxPlayerPrice.toFixed(1)}m\n                </span>\n              </div>\n              <Progress \n                value={Math.min(100, (budget.canAfford.maxPlayerPrice / 15) * 100)} \n                className=\"h-2\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transfer Suggestions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Users className=\"w-4 h-4 text-chart-1\" />\n              Bench Upgrades\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {budget.canAfford.benchUpgrades.length} available\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {budget.canAfford.benchUpgrades.slice(0, 3).map((target: TransferTarget) => (\n                <div \n                  key={target.playerId} \n                  className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg border border-border hover-elevate\"\n                  data-testid={`bench-upgrade-${target.playerId}`}\n                >\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm text-foreground truncate\">\n                      {target.name}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {target.teamName} • {target.position} • {target.expectedPoints.toFixed(1)} pts\n                    </div>\n                  </div>\n                  <div className=\"text-right flex-shrink-0\">\n                    <div className=\"text-sm font-medium text-foreground\">\n                      £{target.price}m\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {budget.canAfford.benchUpgrades.length === 0 && (\n                <div className=\"text-center py-4 text-muted-foreground text-sm\">\n                  No affordable bench upgrades available\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Star className=\"w-4 h-4 text-chart-3\" />\n              Premium Upgrades\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {budget.canAfford.starterUpgrades.length} available\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {budget.canAfford.starterUpgrades.slice(0, 3).map((target: TransferTarget) => (\n                <div \n                  key={target.playerId} \n                  className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg border border-border hover-elevate\"\n                  data-testid={`starter-upgrade-${target.playerId}`}\n                >\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"font-medium text-sm text-foreground truncate\">\n                      {target.name}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {target.teamName} • {target.position} • {target.expectedPoints.toFixed(1)} pts\n                    </div>\n                  </div>\n                  <div className=\"text-right flex-shrink-0\">\n                    <div className=\"text-sm font-medium text-foreground\">\n                      £{target.price}m\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {budget.canAfford.starterUpgrades.length === 0 && (\n                <div className=\"text-center py-4 text-muted-foreground text-sm\">\n                  No premium upgrades within budget\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Transfer Plan Generator */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Target className=\"w-5 h-5 text-primary\" />\n            Transfer Plan Generator\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Generate optimal transfer strategies based on your budget and upcoming fixtures\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-6\">\n            <Button \n              onClick={() => handlePlanTransfers(undefined, 0)}\n              disabled={isLoading}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-plan-conservative\"\n            >\n              <CheckCircle className=\"w-4 h-4\" />\n              Conservative\n            </Button>\n            \n            <Button \n              onClick={() => handlePlanTransfers(undefined, 2)}\n              disabled={isLoading}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-plan-aggressive\"\n            >\n              <Zap className=\"w-4 h-4\" />\n              Aggressive\n            </Button>\n            \n            <Button \n              onClick={() => handlePlanTransfers('bench-boost', 1)}\n              disabled={isLoading}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-plan-bench-boost\"\n            >\n              <Users className=\"w-4 h-4\" />\n              Bench Boost\n            </Button>\n            \n            <Button \n              onClick={() => handlePlanTransfers('triple-captain', 1)}\n              disabled={isLoading}\n              variant=\"outline\"\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-plan-triple-captain\"\n            >\n              <Star className=\"w-4 h-4\" />\n              Triple Captain\n            </Button>\n          </div>\n\n          {/* Transfer Plans */}\n          {transferPlans && transferPlans.length > 0 && (\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium text-foreground\">Recommended Plans</h4>\n              {transferPlans.map((plan: TransferPlan, index: number) => (\n                <Card key={index} className={`${plan.feasible ? 'border-chart-1/30 bg-chart-1/5' : 'border-destructive/30 bg-destructive/5'}`}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex items-center gap-2\">\n                        {plan.feasible ? (\n                          <CheckCircle className=\"w-4 h-4 text-chart-1\" />\n                        ) : (\n                          <XCircle className=\"w-4 h-4 text-destructive\" />\n                        )}\n                        <span className=\"font-medium text-sm\">\n                          GW {plan.gameweek} Plan\n                          {plan.chipContext && (\n                            <Badge variant=\"outline\" className=\"ml-2 text-xs\">\n                              {plan.chipContext}\n                            </Badge>\n                          )}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-sm font-medium text-foreground\">\n                          +{plan.projectedGain.toFixed(1)} pts\n                        </div>\n                        {plan.totalCost > 0 && (\n                          <div className=\"text-xs text-muted-foreground\">\n                            -{plan.totalCost} hit cost\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {plan.moves.length > 0 && (\n                      <div className=\"space-y-2 mb-3\">\n                        {plan.moves.map((move, moveIndex) => (\n                          <div key={moveIndex} className=\"flex items-center justify-between text-xs\">\n                            <div className=\"flex items-center gap-2\">\n                              <ArrowUpDown className=\"w-3 h-3 text-muted-foreground\" />\n                              <span className=\"text-destructive\">{move.outPlayerName}</span>\n                              <span className=\"text-muted-foreground\">→</span>\n                              <span className=\"text-chart-1\">{move.inPlayerName}</span>\n                            </div>\n                            <div className=\"text-muted-foreground\">\n                              +{move.expectedGain.toFixed(1)}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center gap-4\">\n                        <span className=\"text-muted-foreground\">\n                          Confidence: {plan.confidence}%\n                        </span>\n                        {plan.totalHits > 0 && (\n                          <span className=\"text-muted-foreground\">\n                            {plan.totalHits} hit{plan.totalHits > 1 ? 's' : ''}\n                          </span>\n                        )}\n                      </div>\n                      <span className=\"text-muted-foreground\">\n                        £{plan.budgetAfter.toFixed(1)}m remaining\n                      </span>\n                    </div>\n\n                    {plan.notes.length > 0 && (\n                      <div className=\"mt-3 pt-3 border-t border-border\">\n                        <div className=\"text-xs text-muted-foreground\">\n                          {plan.notes[0]}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {isLoading && (\n            <div className=\"text-center py-8\">\n              <div className=\"inline-flex items-center gap-2 text-sm text-muted-foreground\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                Generating transfer plans...\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":14359},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport AppHeader from \"@/components/AppHeader\";\nimport TeamIdInput from \"@/components/TeamIdInput\";\nimport ChipRecommendationCard from \"@/components/ChipRecommendationCard\";\nimport ChipDetailModal from \"@/components/ChipDetailModal\";\nimport SquadOverview from \"@/components/SquadOverview\";\nimport FixtureDifficultyChart from \"@/components/FixtureDifficultyChart\";\nimport TransferPlanner from \"@/components/TransferPlanner\";\nimport SimulationSummaryCard from \"@/components/SimulationSummary\";\nimport { ChatInterface } from \"@/components/ChatInterface\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, AlertCircle, MessageCircle } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  type AnalyzeTeamResponse, \n  type AnalysisResult, \n  type ChipRecommendation,\n  type PlanTransfersResponse,\n  type TransferPlan\n} from \"@shared/schema\";\n\n\ntype AppState = 'input' | 'loading' | 'results' | 'error';\n\nexport default function Home() {\n  const [appState, setAppState] = useState<AppState>('input');\n  const [teamId, setTeamId] = useState('');\n  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRecommendation, setSelectedRecommendation] = useState<ChipRecommendation | null>(null);\n  const [transferPlans, setTransferPlans] = useState<TransferPlan[] | null>(null);\n  const [activeTab, setActiveTab] = useState('analysis');\n\n  const analyzeMutation = useMutation({\n    mutationFn: async (teamId: string) => {\n      const response = await apiRequest('POST', '/api/analyze', { teamId });\n      return (await response.json()) as AnalyzeTeamResponse;\n    },\n    onSuccess: (data) => {\n      if (data.success && data.data) {\n        setAnalysisResult(data.data);\n        setTransferPlans(null); // Reset transfer plans when new analysis comes in\n        setAppState('results');\n        console.log('Analysis complete for team:', teamId);\n      } else {\n        setErrorMessage(data.error || 'Analysis failed');\n        setAppState('error');\n      }\n    },\n    onError: (error) => {\n      console.error('Analysis error:', error);\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to analyze team');\n      setAppState('error');\n    }\n  });\n\n  const transferPlanMutation = useMutation({\n    mutationFn: async (params: { teamId: string; chipType?: string; maxHits?: number }) => {\n      const requestData: any = { teamId: params.teamId };\n      if (params.chipType) requestData.chipType = params.chipType;\n      if (params.maxHits !== undefined) requestData.maxHits = params.maxHits;\n      \n      const response = await apiRequest('POST', '/api/transfer-plan', requestData);\n      return (await response.json()) as PlanTransfersResponse;\n    },\n    onSuccess: (data) => {\n      if (data.success && data.data) {\n        setTransferPlans(data.data.plans);\n        console.log('Transfer plans generated:', data.data.plans.length);\n      } else {\n        console.error('Transfer planning failed:', data.error);\n      }\n    },\n    onError: (error) => {\n      console.error('Transfer planning error:', error);\n    }\n  });\n\n  const handleAnalyze = (id: string) => {\n    setTeamId(id);\n    setAppState('loading');\n    setErrorMessage('');\n    setAnalysisResult(null);\n    console.log('Starting analysis for team:', id);\n    analyzeMutation.mutate(id);\n  };\n\n  const handleReset = () => {\n    setAppState('input');\n    setTeamId('');\n    setAnalysisResult(null);\n    setErrorMessage('');\n    analyzeMutation.reset();\n    console.log('Reset to input state');\n  };\n\n  const handleRetry = () => {\n    if (teamId) {\n      handleAnalyze(teamId);\n    }\n  };\n\n  const handleViewDetails = (chipType: string, gameweek: number) => {\n    if (!analysisResult) return;\n    \n    const recommendation = analysisResult.recommendations.find(\n      r => r.chipType === chipType && r.gameweek === gameweek\n    );\n    \n    if (recommendation) {\n      setSelectedRecommendation(recommendation);\n      setIsModalOpen(true);\n    }\n  };\n\n  const handlePlanTransfers = (params: { chipType?: string; maxHits?: number }) => {\n    if (!teamId || !analysisResult) return;\n    \n    setActiveTab('transfers'); // Switch to transfers tab\n    transferPlanMutation.mutate({\n      teamId,\n      chipType: params.chipType,\n      maxHits: params.maxHits\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <AppHeader />\n      \n      <main className=\"container mx-auto px-4 py-8\">\n        {appState === 'input' && (\n          <div className=\"max-w-2xl mx-auto space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-3xl font-bold text-foreground\">\n                Infinitely Powerful FPL Chip Strategy Architect\n              </h2>\n              <p className=\"text-lg text-muted-foreground max-w-xl mx-auto\">\n                AI-powered chip strategy optimization using bookmaker odds, advanced statistics, \n                and Monte Carlo simulations to maximize your FPL performance.\n              </p>\n            </div>\n            \n            <TeamIdInput onAnalyze={handleAnalyze} />\n\n            <Card className=\"p-6\">\n              <div className=\"grid md:grid-cols-2 gap-6 text-sm text-muted-foreground\">\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">How it works:</h3>\n                  <ul className=\"space-y-1\">\n                    <li>• Analyzes your current 15-player squad</li>\n                    <li>• Uses bookmaker odds & advanced statistics</li>\n                    <li>• Runs Monte Carlo probabilistic simulations</li>\n                    <li>• Provides confidence-rated recommendations</li>\n                  </ul>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-foreground mb-2\">Key features:</h3>\n                  <ul className=\"space-y-1\">\n                    <li>• AI-powered probabilistic forecasting</li>\n                    <li>• Player volatility & form analysis</li>\n                    <li>• Expected points with confidence intervals</li>\n                    <li>• Real-time odds & statistics integration</li>\n                  </ul>\n                </div>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {appState === 'loading' && (\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"p-8\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto\" />\n                <h2 className=\"text-xl font-semibold text-foreground\">\n                  Analyzing Your Squad\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Fetching squad data and calculating fixture difficulty ratings for Team ID: {teamId}\n                </p>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {appState === 'error' && (\n          <div className=\"max-w-md mx-auto\">\n            <Card className=\"p-8\">\n              <div className=\"text-center space-y-4\">\n                <AlertCircle className=\"w-16 h-16 text-destructive mx-auto\" />\n                <h2 className=\"text-xl font-semibold text-foreground\">\n                  Analysis Failed\n                </h2>\n                <p className=\"text-muted-foreground text-sm\" data-testid=\"text-error-message\">\n                  {errorMessage}\n                </p>\n                <div className=\"flex gap-3 justify-center\">\n                  <Button variant=\"outline\" onClick={handleReset} data-testid=\"button-back\">\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    Try Different Team\n                  </Button>\n                  <Button onClick={handleRetry} data-testid=\"button-retry\">\n                    Retry Analysis\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </div>\n        )}\n\n        {appState === 'results' && analysisResult && (\n          <div className=\"space-y-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-results-title\">\n                  Infinitely Powerful FPL Analysis\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Based on analysis of {analysisResult.teamName} (Team ID: {teamId})\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  Last updated: {new Date(analysisResult.lastUpdated).toLocaleString()}\n                </p>\n              </div>\n              <Button \n                variant=\"outline\" \n                onClick={handleReset}\n                data-testid=\"button-analyze-new\"\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Analyze New Team\n              </Button>\n            </div>\n\n            {/* Enhanced Phase 3: Tabbed interface with AI Co-pilot */}\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"analysis\" data-testid=\"tab-analysis\">\n                  Analysis & Recommendations\n                </TabsTrigger>\n                <TabsTrigger value=\"copilot\" data-testid=\"tab-copilot\">\n                  <MessageCircle className=\"w-4 h-4 mr-2\" />\n                  AI Co-pilot\n                </TabsTrigger>\n                <TabsTrigger value=\"transfers\" data-testid=\"tab-transfers\">\n                  Transfer Planner\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Analysis Tab - Original content */}\n              <TabsContent value=\"analysis\" className=\"space-y-6 mt-6\">\n                {/* Enhanced Phase 1: Simulation Summary - shows if enhanced data available */}\n                {analysisResult.simulationSummary && (\n                  <SimulationSummaryCard \n                    simulationSummary={analysisResult.simulationSummary}\n                    expectedPointsSource={analysisResult.expectedPointsSource || 'fdr'}\n                    confidenceLevel={analysisResult.confidenceLevel || 75}\n                  />\n                )}\n\n                <div className=\"grid lg:grid-cols-3 gap-6\">\n                  {/* Squad Overview */}\n                  <div className=\"lg:col-span-1\">\n                    <SquadOverview \n                      players={analysisResult.players}\n                      totalValue={analysisResult.totalValue}\n                      totalPoints={analysisResult.totalPoints}\n                      teamName={analysisResult.teamName}\n                      expectedPointsSource={analysisResult.expectedPointsSource}\n                      confidenceLevel={analysisResult.confidenceLevel}\n                      dataFreshness={analysisResult.dataFreshness}\n                    />\n                  </div>\n\n                  {/* Fixture Difficulty Chart */}\n                  <div className=\"lg:col-span-2\">\n                    <FixtureDifficultyChart \n                      gameweeks={analysisResult.gameweeks}\n                      highlightedGameweeks={analysisResult.recommendations.map(r => r.gameweek)}\n                      showVolatility={!!analysisResult.simulationSummary}\n                      expectedPointsSource={analysisResult.expectedPointsSource}\n                    />\n                  </div>\n                </div>\n\n                {/* Chip Recommendations */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-4\">\n                    Recommended Chip Strategy\n                  </h3>\n                  {analysisResult.recommendations.length > 0 ? (\n                    <div className=\"grid md:grid-cols-2 gap-6\">\n                      {analysisResult.recommendations.map((recommendation, index) => (\n                        <ChipRecommendationCard \n                          key={`${recommendation.chipType}-${index}`}\n                          recommendation={recommendation}\n                          onViewDetails={handleViewDetails}\n                        />\n                      ))}\n                    </div>\n                  ) : (\n                    <Card className=\"p-6\">\n                      <div className=\"text-center space-y-2\">\n                        <p className=\"text-muted-foreground\">\n                          No clear chip opportunities identified at this time.\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Your current fixture run looks fairly balanced. Consider checking back after the next gameweek.\n                        </p>\n                      </div>\n                    </Card>\n                  )}\n                </div>\n              </TabsContent>\n\n              {/* AI Co-pilot Tab - Phase 3 Enhancement */}\n              <TabsContent value=\"copilot\" className=\"mt-6\">\n                <div className=\"grid lg:grid-cols-1 gap-6\">\n                  <div className=\"min-h-[600px]\">\n                    <ChatInterface \n                      teamId={teamId}\n                      onAnalysisRequest={handleAnalyze}\n                      data-testid=\"ai-copilot-interface\"\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n\n              {/* Transfer Planner Tab */}\n              <TabsContent value=\"transfers\" className=\"mt-6\">\n                <TransferPlanner \n                  budget={analysisResult.budget}\n                  transferPlans={transferPlans || undefined}\n                  onPlanTransfers={handlePlanTransfers}\n                  isLoading={transferPlanMutation.isPending}\n                />\n              </TabsContent>\n            </Tabs>\n\n          </div>\n        )}\n      </main>\n      \n      {/* Chip Detail Modal */}\n      <ChipDetailModal \n        isOpen={isModalOpen}\n        onClose={() => setIsModalOpen(false)}\n        recommendation={selectedRecommendation}\n        gameweeks={analysisResult?.gameweeks || []}\n        players={analysisResult?.players || []}\n      />\n    </div>\n  );\n}","size_bytes":14599},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppHeader.tsx":{"content":"import AppHeader from '../AppHeader';\n\nexport default function AppHeaderExample() {\n  return <AppHeader />;\n}","size_bytes":109},"client/src/components/examples/ChipRecommendationCard.tsx":{"content":"import ChipRecommendationCard from '../ChipRecommendationCard';\n\n// todo: remove mock data when integrating with real API\nconst mockRecommendation = {\n  chipType: 'bench-boost' as const,\n  gameweek: 8,\n  priority: 'high' as const,\n  title: 'Optimal Bench Boost Window',\n  description: 'Your entire squad faces favorable fixtures with an average FDR of 2.1, maximizing your bench potential.',\n  reasoning: [\n    'All 15 players have FDR of 2 or below',\n    'Strong bench options against weak defenses',\n    'No injury concerns in your squad',\n    'Historically high-scoring gameweek'\n  ],\n  confidence: 87\n};\n\nexport default function ChipRecommendationCardExample() {\n  return (\n    <ChipRecommendationCard \n      recommendation={mockRecommendation}\n      onViewDetails={(chipType, gw) => console.log('Details for', chipType, 'GW', gw)}\n    />\n  );\n}","size_bytes":849},"client/src/components/examples/FixtureDifficultyChart.tsx":{"content":"import FixtureDifficultyChart from '../FixtureDifficultyChart';\n\n// todo: remove mock data when integrating with real FPL API\nconst mockGameweeks = [\n  { gameweek: 5, totalFDR: 32, averageFDR: 2.1, difficulty: 'easy' as const },\n  { gameweek: 6, totalFDR: 38, averageFDR: 2.5, difficulty: 'medium' as const },\n  { gameweek: 7, totalFDR: 28, averageFDR: 1.9, difficulty: 'easy' as const },\n  { gameweek: 8, totalFDR: 26, averageFDR: 1.7, difficulty: 'easy' as const },\n  { gameweek: 9, totalFDR: 45, averageFDR: 3.0, difficulty: 'hard' as const },\n  { gameweek: 10, totalFDR: 42, averageFDR: 2.8, difficulty: 'hard' as const },\n  { gameweek: 11, totalFDR: 35, averageFDR: 2.3, difficulty: 'medium' as const },\n  { gameweek: 12, totalFDR: 30, averageFDR: 2.0, difficulty: 'easy' as const },\n  { gameweek: 13, totalFDR: 41, averageFDR: 2.7, difficulty: 'hard' as const },\n  { gameweek: 14, totalFDR: 33, averageFDR: 2.2, difficulty: 'easy' as const }\n];\n\nexport default function FixtureDifficultyChartExample() {\n  return (\n    <FixtureDifficultyChart \n      gameweeks={mockGameweeks}\n      highlightedGameweeks={[8, 12]} // Highlight optimal gameweeks\n    />\n  );\n}","size_bytes":1163},"client/src/components/examples/SquadOverview.tsx":{"content":"import SquadOverview from '../SquadOverview';\n\n// todo: remove mock data when integrating with real FPL API\nconst mockPlayers = [\n  { id: 1, name: 'Alisson', position: 'GK', team: 'LIV', price: 5.5, points: 45 },\n  { id: 2, name: 'Pickford', position: 'GK', team: 'EVE', price: 4.9, points: 32 },\n  { id: 3, name: 'Alexander-Arnold', position: 'DEF', team: 'LIV', price: 7.2, points: 78 },\n  { id: 4, name: 'Robertson', position: 'DEF', team: 'LIV', price: 6.8, points: 65 },\n  { id: 5, name: 'Walker', position: 'DEF', team: 'MCI', price: 5.4, points: 52 },\n  { id: 6, name: 'White', position: 'DEF', team: 'ARS', price: 4.7, points: 43 },\n  { id: 7, name: 'Mitchell', position: 'DEF', team: 'CRY', price: 4.2, points: 28 },\n  { id: 8, name: 'Salah', position: 'MID', team: 'LIV', price: 12.9, points: 156 },\n  { id: 9, name: 'Palmer', position: 'MID', team: 'CHE', price: 10.8, points: 134 },\n  { id: 10, name: 'Saka', position: 'MID', team: 'ARS', price: 10.1, points: 98 },\n  { id: 11, name: 'Luis Diaz', position: 'MID', team: 'LIV', price: 8.2, points: 76 },\n  { id: 12, name: 'Gordon', position: 'MID', team: 'NEW', price: 6.1, points: 54 },\n  { id: 13, name: 'Haaland', position: 'FWD', team: 'MCI', price: 14.7, points: 198 },\n  { id: 14, name: 'Isak', position: 'FWD', team: 'NEW', price: 8.4, points: 87 },\n  { id: 15, name: 'Havertz', position: 'FWD', team: 'ARS', price: 8.1, points: 72 }\n];\n\nexport default function SquadOverviewExample() {\n  const totalValue = mockPlayers.reduce((sum, player) => sum + player.price, 0);\n  const totalPoints = mockPlayers.reduce((sum, player) => sum + player.points, 0);\n  \n  return (\n    <SquadOverview \n      players={mockPlayers}\n      totalValue={totalValue}\n      totalPoints={totalPoints}\n      teamName=\"The Chip Masters\"\n    />\n  );\n}","size_bytes":1790},"client/src/components/examples/TeamIdInput.tsx":{"content":"import TeamIdInput from '../TeamIdInput';\n\nexport default function TeamIdInputExample() {\n  return (\n    <TeamIdInput \n      onAnalyze={(teamId) => console.log('Analyzing team:', teamId)}\n      isLoading={false}\n    />\n  );\n}","size_bytes":225},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from '../ThemeToggle';\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}","size_bytes":117},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}